import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharChi(WasedaChar):
    def __init__(self, name='chi', kana='„Å°',
                 model='NE8CL1|SW8CR1', head_type='NE|SW',
                 tail_type='NECL1|SWCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def to_reverse(self):
        return self.before and self.before.tail_type in {
            'SWR', 'SW', 'SR',
            'SWRCR1', 'SWRCR4',
            'S', 'SER'}

    @classmethod
    def path_SWCR(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 44.6509,64.4469 42.5765,70.4703 40.8217,76.5899 40.3717,78.2693 38.336105,77.432937 39.2867,75.816762 39.777712,74.981956 40.6018,74.507243 41.5877,73.8718

        #z0 = P(0, -0)
        #c0 = P(-0.945603, -2.02782)
        #c1 = P(-1.67467, -4.1448)
        #z1 = P(-2.29141, -6.2956)
        #c2 = P(-2.44957, -6.88584)
        #c3 = P(-3.165, -6.59189)
        #z2 = P(-2.8309, -6.02387)
        #c4 = P(-2.65833, -5.73047)
        #c5 = P(-2.3687, -5.56362)
        z3 = P(-2.02219, -5.34029)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.945603, -2.02782)
        #z1 = z0 + P(-2.29141, -6.2956)
        #c1 = z1 + P(0.616742, 2.15079)
        #c2 = z1 + P(-0.158157, -0.590242)
        #z2 = z1 + P(-0.539491, 0.271727)
        #c3 = z2 + P(-0.334096, -0.568021)
        #c4 = z2 + P(0.172571, 0.293401)
        #z3 = z2 + P(0.808709, 0.683576)
        #c5 = z3 + P(-0.346504, -0.223333)

        z0 = P(0, -0)
        c0 = z0 + PP(2.23746, -115)
        z1 = z0 + PP(6.69963, -110)
        c1 = z1 + PP(2.23747, 73)
        c2 = z1 + PP(0.611064, -105)
        z2 = z1 + PP(0.604058, 153)
        #z2 = z3 - PP(1.05891, ta + 367)
        c3 = z2 + PP(0.65899, -120)
        c4 = z2 + PP(0.340389, 59)
        #z3 = z2 + PP(1.05891, 40)
        c5 = z3 + PP(0.412241, -147)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCRe(cls, ta=None, **kwargs):
        #M 47.3414,130.508 C 44.661,136.256 42.7004,142.288 40.8461,148.354 40.3978,150.027 38.788453,150.27089 38.105431,149.37446 37.193563,148.17768 37.759745,147.50528 38.592453,147.07271 39.155971,146.77998 40.11717,146.8045 41.333718,146.76904

        #z0 = P(0, -0)
        #c0 = P(-0.942053, -2.02019)
        #c1 = P(-1.63113, -4.1402)
        #z1 = P(-2.28284, -6.27215)
        #c2 = P(-2.4404, -6.86015)
        #c3 = P(-3.00602, -6.94586)
        #z2 = P(-3.24607, -6.6308)
        #c4 = P(-3.56656, -6.21018)
        #c5 = P(-3.36757, -5.97386)
        #z3 = P(-3.0749, -5.82183)
        #c6 = P(-2.87685, -5.71895)
        #c7 = P(-2.53903, -5.72757)
        z4 = P(-2.11146, -5.7151)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942053, -2.02019)
        #z1 = z0 + P(-2.28284, -6.27215)
        #c1 = z1 + P(0.651712, 2.13196)
        #c2 = z1 + P(-0.157559, -0.587992)
        #z2 = z1 + P(-0.963235, -0.358651)
        #c3 = z2 + P(0.240055, -0.315059)
        #c4 = z2 + P(-0.320485, 0.42062)
        #z3 = z2 + P(0.171169, 0.808973)
        #c5 = z3 + P(-0.292663, -0.152031)
        #c6 = z3 + P(0.198054, 0.102883)
        #z4 = z3 + P(0.963445, 0.106728)
        #c7 = z4 + P(-0.427568, -0.0124628)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22904, -115)
        z1 = z0 + PP(6.67467, -109)
        c1 = z1 + PP(2.22934, 73)
        c2 = z1 + PP(0.608736, -105)
        z2 = z1 + PP(1.02784, -159)
        c3 = z2 + PP(0.396092, -52)
        c4 = z2 + PP(0.528802, 127)
        #z3 = z2 + PP(0.826883, 78)
        z3 = z4 - PP(0.969338, ta + 364)
        c5 = z3 + PP(0.329796, -152)
        #c6 = z3 + PP(0.223182, 27)
        #z4 = z3 + PP(0.969338, 6)
        #c7 = z4 + PP(0.427749, -178)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRer(cls, ta=None, **kwargs):
        #M96.1151 130.565C93.4246 136.334 91.3502 142.358 89.5954 148.477C89.1454 150.157 86.6453 148.592 88.0604 147.362C88.7679 146.747 89.5393 146.21 90.3614 145.759

        #z0 = P(0, -0)
        #c0 = P(-0.945603, -2.02757)
        #c1 = P(-1.67467, -4.14477)
        #z1 = P(-2.29141, -6.29535)
        #c2 = P(-2.44957, -6.8858)
        #c3 = P(-3.32825, -6.33577)
        #z2 = P(-2.8309, -5.90347)
        #c4 = P(-2.58225, -5.68732)
        #c5 = P(-2.31113, -5.49859)
        z3 = P(-2.02219, -5.34008)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.945603, -2.02757)
        #z1 = z0 + P(-2.29141, -6.29535)
        #c1 = z1 + P(0.616742, 2.15058)
        #c2 = z1 + P(-0.158157, -0.590453)
        #z2 = z1 + P(-0.539491, 0.391878)
        #c3 = z2 + P(-0.497351, -0.432296)
        #c4 = z2 + P(0.248658, 0.216148)
        #z3 = z2 + P(0.808709, 0.56339)
        #c5 = z3 + P(-0.288935, -0.158508)

        z0 = P(0, -0)
        c0 = z0 + PP(2.23723, -115)
        z1 = z0 + PP(6.6994, -110)
        c1 = z1 + PP(2.23727, 73)
        c2 = z1 + PP(0.611267, -104)
        z2 = z1 + PP(0.666797, 144)
        #z2 = z3 - PP(0.985606, ta + 365)
        c3 = z2 + PP(0.658967, -139)
        #c4 = z2 + PP(0.32947, 40)
        #z3 = z2 + PP(0.985606, 34)
        #c5 = z3 + PP(0.329558, -151)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCRel(cls, ta=None, **kwargs):
        #M 62.181,130.565 C 59.4905,136.334 57.479272,142.3765 55.6613,148.477 55.405427,149.33562 54.340163,148.56767 53.800975,147.96455 52.969609,147.0346 53.13923,144.79199 54.277762,145.56282 54.970753,146.03201 55.57687,146.19732 56.250645,146.46522

        #z0 = P(0, -0)
        #c0 = P(-0.945603, -2.02757)
        #c1 = P(-1.65247, -4.15127)
        #z1 = P(-2.29141, -6.29535)
        #c2 = P(-2.38134, -6.59712)
        #c3 = P(-2.75574, -6.32722)
        #z2 = P(-2.94524, -6.11524)
        #c4 = P(-3.23743, -5.7884)
        #c5 = P(-3.17782, -5.00022)
        #z3 = P(-2.77767, -5.27113)
        #c6 = P(-2.53411, -5.43603)
        #c7 = P(-2.32109, -5.49413)
        z4 = P(-2.08428, -5.58829)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.945603, -2.02757)
        #z1 = z0 + P(-2.29141, -6.29535)
        #c1 = z1 + P(0.638944, 2.14408)
        #c2 = z1 + P(-0.0899291, -0.30177)
        #z2 = z1 + P(-0.65383, 0.180106)
        #c3 = z2 + P(0.189503, -0.211972)
        #c4 = z2 + P(-0.292192, 0.32684)
        #z3 = z2 + P(0.167572, 0.844112)
        #c5 = z3 + P(-0.400148, 0.270916)
        #c6 = z3 + P(0.243559, -0.164901)
        #z4 = z3 + P(0.693389, -0.317157)
        #c7 = z4 + P(-0.236805, 0.0941561)

        z0 = P(0, -0)
        c0 = z0 + PP(2.23723, -115)
        z1 = z0 + PP(6.6994, -110)
        c1 = z1 + PP(2.23726, 73)
        c2 = z1 + PP(0.314885, -106)
        z2 = z1 + PP(0.678182, 164)
        c3 = z2 + PP(0.28433, -48)
        c4 = z2 + PP(0.438407, 131)
        #z3 = z2 + PP(0.860584, 78)
        z3 = z4 - PP(0.762481, ta + -2)
        c5 = z3 + PP(0.483233, 145)
        #c6 = z3 + PP(0.294131, -34)
        #z4 = z3 + PP(0.762481, -24)
        #c7 = z4 + PP(0.254837, 158)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRne(cls, ta=None, **kwargs):
        #M 63.0741,21.3096 C 60.4038,27.0361 58.799207,33.168357 56.9143,39.1991 56.399553,40.846029 55.399312,40.30422 55.12417,39.878192 54.587475,39.047177 57.687713,35.321756 58.315013,34.547056

        #z0 = P(0, -0)
        #c0 = P(-0.942023, -2.02018)
        #c1 = P(-1.50809, -4.18351)
        #z1 = P(-2.17304, -6.31102)
        #c2 = P(-2.35463, -6.89202)
        #c3 = P(-2.70749, -6.70088)
        #z2 = P(-2.80456, -6.55059)
        #c4 = P(-2.99389, -6.25742)
        #c5 = P(-1.9002, -4.94318)
        z3 = P(-1.6789, -4.66988)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942023, -2.02018)
        #z1 = z0 + P(-2.17304, -6.31102)
        #c1 = z1 + P(0.664953, 2.12751)
        #c2 = z1 + P(-0.181591, -0.581)
        #z2 = z1 + P(-0.631518, -0.239569)
        #c3 = z2 + P(0.097064, -0.150293)
        #c4 = z2 + P(-0.189334, 0.293164)
        #z3 = z2 + P(1.12566, 1.88071)
        #c5 = z3 + P(-0.221297, -0.273297)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22902, -114)
        z1 = z0 + PP(6.67466, -108)
        c1 = z1 + PP(2.22901, 72)
        c2 = z1 + PP(0.608717, -107)
        #z2 = z1 + PP(0.675432, -159)
        z2 = z3 - PP(2.19184, ta + 367)
        c3 = z2 + PP(0.178912, -57)
        #c4 = z2 + PP(0.348988, 122)
        #z3 = z2 + PP(2.19184, 59)
        #c5 = z3 + PP(0.351659, -128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCRner(cls, ta=None, **kwargs):
        #M 110.421,202.338 C 107.741,208.086 106.06255,214.28046 104.20855,220.34546 103.75955,222.01846 101.78891,221.79091 102.72291,220.17291 103.21991,219.34591 103.83009,218.39455 104.689,217.476

        #z0 = P(0, -0)
        #c0 = P(-0.941912, -2.02019)
        #c1 = P(-1.53182, -4.1973)
        #z1 = P(-2.18343, -6.3289)
        #c2 = P(-2.34123, -6.91689)
        #c3 = P(-3.03383, -6.83692)
        #z2 = P(-2.70557, -6.26826)
        #c4 = P(-2.53089, -5.9776)
        #c5 = P(-2.31644, -5.64323)
        z3 = P(-2.01457, -5.3204)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.941912, -2.02019)
        #z1 = z0 + P(-2.18343, -6.3289)
        #c1 = z1 + P(0.651607, 2.1316)
        #c2 = z1 + P(-0.157805, -0.587992)
        #z2 = z1 + P(-0.522143, 0.0606444)
        #c3 = z2 + P(-0.328264, -0.568662)
        #c4 = z2 + P(0.174676, 0.290657)
        #z3 = z2 + P(0.691002, 0.947856)
        #c5 = z3 + P(-0.301872, -0.322833)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22898, -114)
        z1 = z0 + PP(6.69495, -109)
        c1 = z1 + PP(2.22897, 73)
        c2 = z1 + PP(0.6088, -105)
        #z2 = z1 + PP(0.525653, 173)
        z2 = z3 - PP(1.17299, ta + 366)
        c3 = z2 + PP(0.656608, -119)
        #c4 = z2 + PP(0.339107, 58)
        #z3 = z2 + PP(1.17299, 53)
        #c5 = z3 + PP(0.441982, -133)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCRnel(cls, ta=None, **kwargs):
        #M 79.2465,202.338 C 76.5661,208.086 74.6056,214.119 72.7512,220.184 72.3029,221.857 69.079438,219.48656 70.700771,218.55836 71.268866,218.23313 72.176112,218.83002 73.244135,218.58217

        #z0 = P(0, -0)
        #c0 = P(-0.942053, -2.02019)
        #c1 = P(-1.63109, -4.14055)
        #z1 = P(-2.28284, -6.27215)
        #c2 = P(-2.4404, -6.86015)
        #c3 = P(-3.57331, -6.02703)
        #z2 = P(-3.00348, -5.70081)
        #c4 = P(-2.80382, -5.5865)
        #c5 = P(-2.48496, -5.79628)
        z3 = P(-2.10959, -5.70917)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942053, -2.02019)
        #z1 = z0 + P(-2.28284, -6.27215)
        #c1 = z1 + P(0.651747, 2.1316)
        #c2 = z1 + P(-0.157559, -0.587992)
        #z2 = z1 + P(-0.720644, 0.571347)
        #c3 = z2 + P(-0.569833, -0.326225)
        #c4 = z2 + P(0.199663, 0.114305)
        #z3 = z2 + P(0.89389, -0.00836826)
        #c5 = z3 + P(-0.375367, -0.0871093)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22904, -115)
        z1 = z0 + PP(6.67467, -109)
        c1 = z1 + PP(2.22902, 72)
        c2 = z1 + PP(0.608736, -105)
        #z2 = z1 + PP(0.919655, 141)
        z2 = z3 - PP(0.89393, ta + 346)
        c3 = z2 + PP(0.656607, -150)
        #c4 = z2 + PP(0.230067, 29)
        #z3 = z2 + PP(0.89393, 0)
        #c5 = z3 + PP(0.385342, -166)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCRs(cls, ta=None, **kwargs):
        #M 47.3414,259.592 C 44.661,265.34 42.7004,271.373 40.8461,277.438 40.277617,278.96254 38.381923,274.16283 40.248767,273.51263 41.159934,273.19528 41.638294,273.75145 41.6092,274.73

        #z0 = P(0, -0)
        #c0 = P(-0.942053, -2.02019)
        #c1 = P(-1.63113, -4.14055)
        #z1 = P(-2.28284, -6.27215)
        #c2 = P(-2.48264, -6.80797)
        #c3 = P(-3.1489, -5.12106)
        #z2 = P(-2.49278, -4.89254)
        #c4 = P(-2.17254, -4.78101)
        #c5 = P(-2.00441, -4.97648)
        z3 = P(-2.01464, -5.3204)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942053, -2.02019)
        #z1 = z0 + P(-2.28284, -6.27215)
        #c1 = z1 + P(0.651712, 2.1316)
        #c2 = z1 + P(-0.199799, -0.535815)
        #z2 = z1 + P(-0.209939, 1.37961)
        #c3 = z2 + P(-0.656121, -0.228519)
        #c4 = z2 + P(0.320239, 0.111536)
        #z3 = z2 + P(0.478138, -0.427857)
        #c5 = z3 + P(0.0102254, 0.343921)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22904, -115)
        z1 = z0 + PP(6.67467, -109)
        c1 = z1 + PP(2.22901, 72)
        c2 = z1 + PP(0.571854, -110)
        #z2 = z1 + PP(1.39549, 98)
        z2 = z3 - PP(0.641621, ta + 51)
        c3 = z2 + PP(0.694777, -160)
        #c4 = z2 + PP(0.339106, 19)
        #z3 = z2 + PP(0.641621, -41)
        #c5 = z3 + PP(0.344073, 88)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCRsl(cls, ta=None, **kwargs):
        #M 84.1317,259.592 C 81.4513,265.34 79.4908,271.373 77.6364,277.438 77.1881,279.111 75.3729,278.35541 75.666798,276.74173 75.753236,276.26713 76.682263,274.72688 77.154727,274.85696 77.824849,275.04146 78.074716,276.06072 77.474945,277.438

        #z0 = P(0, -0)
        #c0 = P(-0.942053, -2.02019)
        #c1 = P(-1.63109, -4.14055)
        #z1 = P(-2.28284, -6.27215)
        #c2 = P(-2.4404, -6.86015)
        #c3 = P(-3.07837, -6.59459)
        #z2 = P(-2.97507, -6.02744)
        #c4 = P(-2.94469, -5.86064)
        #c5 = P(-2.61818, -5.3193)
        #z3 = P(-2.45213, -5.36502)
        #c6 = P(-2.21661, -5.42987)
        #c7 = P(-2.12879, -5.78809)
        z4 = P(-2.33958, -6.27215)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942053, -2.02019)
        #z1 = z0 + P(-2.28284, -6.27215)
        #c1 = z1 + P(0.651747, 2.1316)
        #c2 = z1 + P(-0.157559, -0.587992)
        #z2 = z1 + P(-0.692236, 0.244711)
        #c3 = z2 + P(-0.103293, -0.567144)
        #c4 = z2 + P(0.0303795, 0.166803)
        #z3 = z2 + P(0.522947, 0.662421)
        #c5 = z3 + P(-0.166052, 0.0457179)
        #c6 = z3 + P(0.235521, -0.0648443)
        #z4 = z3 + P(0.112544, -0.907132)
        #c7 = z4 + P(0.210795, 0.484059)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22904, -115)
        z1 = z0 + PP(6.67467, -109)
        c1 = z1 + PP(2.22902, 72)
        c2 = z1 + PP(0.608736, -105)
        z2 = z1 + PP(0.734217, 160)
        c3 = z2 + PP(0.576473, -100)
        c4 = z2 + PP(0.169547, 79)
        #z3 = z2 + PP(0.843964, 51)
        z3 = z4 - PP(0.914087, ta + 32)
        c5 = z3 + PP(0.172231, 164)
        #c6 = z3 + PP(0.244285, -15)
        #z4 = z3 + PP(0.914087, -82)
        #c7 = z4 + PP(0.527965, 66)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRsr(cls, ta=None, **kwargs):
        #M 120.922,259.592 C 118.242,265.34 116.281,271.373 114.427,277.438 113.978,279.111 112.9426,277.84447 112.82027,276.94355 112.70487,276.09364 112.86438,275.0169 113.33964,274.89732 114.05018,274.71854 114.59505,275.44689 114.96396,275.69398

        #z0 = P(0, -0)
        #c0 = P(-0.941912, -2.02019)
        #c1 = P(-1.63113, -4.14055)
        #z1 = P(-2.28273, -6.27215)
        #c2 = P(-2.44054, -6.86015)
        #c3 = P(-2.80444, -6.41501)
        #z2 = P(-2.84743, -6.09837)
        #c4 = P(-2.88799, -5.79966)
        #c5 = P(-2.83193, -5.42123)
        #z3 = P(-2.6649, -5.37921)
        #c6 = P(-2.41517, -5.31637)
        #c7 = P(-2.22367, -5.57236)
        z4 = P(-2.09401, -5.6592)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.941912, -2.02019)
        #z1 = z0 + P(-2.28273, -6.27215)
        #c1 = z1 + P(0.651607, 2.1316)
        #c2 = z1 + P(-0.157805, -0.587992)
        #z2 = z1 + P(-0.564701, 0.173779)
        #c3 = z2 + P(0.0429941, -0.316637)
        #c4 = z2 + P(-0.0405585, 0.298709)
        #z3 = z2 + P(0.182538, 0.719168)
        #c5 = z3 + P(-0.167035, -0.0420276)
        #c6 = z3 + P(0.249726, 0.062834)
        #z4 = z3 + P(0.570883, -0.279994)
        #c7 = z4 + P(-0.129657, 0.0868422)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22898, -114)
        z1 = z0 + PP(6.67464, -109)
        c1 = z1 + PP(2.22897, 73)
        c2 = z1 + PP(0.6088, -105)
        z2 = z1 + PP(0.590836, 162)
        c3 = z2 + PP(0.319543, -82)
        c4 = z2 + PP(0.30145, 97)
        #z3 = z2 + PP(0.741972, 75)
        z3 = z4 - PP(0.635849, ta + 8)
        c5 = z3 + PP(0.172241, -165)
        #c6 = z3 + PP(0.25751, 14)
        #z4 = z3 + PP(0.635849, -26)
        #c7 = z4 + PP(0.156053, 146)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRse(cls, ta=None, **kwargs):
        #M 47.3414,354.1 C 44.661,359.848 42.7004,365.881 40.8461,371.946 40.3978,373.58496 39.512702,371.83797 39.3204,371.169 39.14216,370.54895 38.984829,368.51859 40.082358,368.3111 40.931569,368.15056 41.119954,369.1481 41.528975,369.83969

        #z0 = P(0, -0)
        #c0 = P(-0.942053, -2.02019)
        #c1 = P(-1.63113, -4.14055)
        #z1 = P(-2.28284, -6.27215)
        #c2 = P(-2.4404, -6.84818)
        #c3 = P(-2.75147, -6.23418)
        #z2 = P(-2.81906, -5.99907)
        #c4 = P(-2.8817, -5.78115)
        #c5 = P(-2.937, -5.06756)
        #z3 = P(-2.55126, -4.99463)
        #c6 = P(-2.2528, -4.93821)
        #c7 = P(-2.18659, -5.2888)
        z4 = P(-2.04283, -5.53187)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942053, -2.02019)
        #z1 = z0 + P(-2.28284, -6.27215)
        #c1 = z1 + P(0.651712, 2.1316)
        #c2 = z1 + P(-0.157559, -0.576029)
        #z2 = z1 + P(-0.536222, 0.273084)
        #c3 = z2 + P(0.0675864, -0.235116)
        #c4 = z2 + P(-0.0626442, 0.217923)
        #z3 = z2 + P(0.267798, 1.00444)
        #c5 = z3 + P(-0.385737, -0.0729244)
        #c6 = z3 + P(0.298464, 0.0564234)
        #z4 = z3 + P(0.508428, -0.537238)
        #c7 = z4 + P(-0.143754, 0.243066)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22904, -115)
        z1 = z0 + PP(6.67467, -109)
        c1 = z1 + PP(2.22901, 72)
        c2 = z1 + PP(0.597188, -105)
        z2 = z1 + PP(0.601755, 153)
        c3 = z2 + PP(0.244638, -73)
        c4 = z2 + PP(0.226748, 106)
        #z3 = z2 + PP(1.03952, 75)
        z3 = z4 - PP(0.739678, ta + 14)
        c5 = z3 + PP(0.39257, -169)
        #c6 = z3 + PP(0.30375, 10)
        #z4 = z3 + PP(0.739678, -46)
        #c7 = z4 + PP(0.282394, 120)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRser(cls, ta=None, **kwargs):
        #M 75.6278,354.1 C 72.9474,359.848 70.9868,365.881 69.1325,371.946 68.804538,373.01731 67.334078,372.07907 66.962213,371.73169 66.416482,371.22188 65.822217,370.24228 66.765005,369.77049 67.620012,369.34261 68.603346,369.47578 69.695037,370.16059

        #z0 = P(0, -0)
        #c0 = P(-0.942053, -2.02019)
        #c1 = P(-1.63113, -4.14055)
        #z1 = P(-2.28284, -6.27215)
        #c2 = P(-2.3981, -6.64868)
        #c3 = P(-2.91491, -6.31892)
        #z2 = P(-3.04561, -6.19683)
        #c4 = P(-3.23741, -6.01765)
        #c5 = P(-3.44627, -5.67336)
        #z3 = P(-3.11492, -5.50755)
        #c6 = P(-2.81442, -5.35717)
        #c7 = P(-2.46881, -5.40397)
        z4 = P(-2.08513, -5.64465)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942053, -2.02019)
        #z1 = z0 + P(-2.28284, -6.27215)
        #c1 = z1 + P(0.651712, 2.1316)
        #c2 = z1 + P(-0.115265, -0.376522)
        #z2 = z1 + P(-0.762769, 0.0753214)
        #c3 = z2 + P(0.130696, -0.12209)
        #c4 = z2 + P(-0.191803, 0.179178)
        #z3 = z2 + P(-0.0693107, 0.689283)
        #c5 = z3 + P(-0.331352, -0.165815)
        #c6 = z3 + P(0.300501, 0.150383)
        #z4 = z3 + P(1.02979, -0.137104)
        #c7 = z4 + P(-0.383686, 0.240683)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22904, -115)
        z1 = z0 + PP(6.67467, -109)
        c1 = z1 + PP(2.22901, 72)
        c2 = z1 + PP(0.393771, -107)
        z2 = z1 + PP(0.766479, 174)
        c3 = z2 + PP(0.17885, -43)
        c4 = z2 + PP(0.262475, 136)
        #z3 = z2 + PP(0.692759, 95)
        z3 = z4 - PP(1.03888, ta + 26)
        c5 = z3 + PP(0.370525, -153)
        #c6 = z3 + PP(0.336029, 26)
        #z4 = z3 + PP(1.03888, -7)
        #c7 = z4 + PP(0.452927, 147)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRsel(cls, ta=None, **kwargs):
        #M 109.583,354.1 C 106.903,359.848 104.943,365.881 103.088,371.946 102.64,373.619 100.24365,372.26785 100.59909,370.73389 100.91976,369.34994 102.24598,368.11554 103.46395,368.24803 104.60309,368.37195 103.44766,369.20614 102.98077,370.51222

        #z0 = P(0, -0)
        #c0 = P(-0.941912, -2.02019)
        #c1 = P(-1.63077, -4.14055)
        #z1 = P(-2.28273, -6.27215)
        #c2 = P(-2.44019, -6.86015)
        #c3 = P(-3.28241, -6.38527)
        #z2 = P(-3.15748, -5.84614)
        #c4 = P(-3.04478, -5.35974)
        #c5 = P(-2.57867, -4.9259)
        #z3 = P(-2.1506, -4.97246)
        #c6 = P(-1.75024, -5.01602)
        #c7 = P(-2.15633, -5.3092)
        z4 = P(-2.32042, -5.76824)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.941912, -2.02019)
        #z1 = z0 + P(-2.28273, -6.27215)
        #c1 = z1 + P(0.651958, 2.1316)
        #c2 = z1 + P(-0.157454, -0.587992)
        #z2 = z1 + P(-0.874752, 0.426008)
        #c3 = z2 + P(-0.124923, -0.539125)
        #c4 = z2 + P(0.112703, 0.486403)
        #z3 = z2 + P(1.00688, 0.87368)
        #c5 = z3 + P(-0.428068, 0.0465649)
        #c6 = z3 + P(0.400362, -0.0435529)
        #z4 = z3 + P(-0.169818, -0.795772)
        #c7 = z4 + P(0.164093, 0.459035)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22898, -114)
        z1 = z0 + PP(6.67464, -109)
        c1 = z1 + PP(2.22908, 72)
        c2 = z1 + PP(0.608709, -104)
        z2 = z1 + PP(0.972972, 154)
        c3 = z2 + PP(0.553409, -103)
        c4 = z2 + PP(0.499289, 76)
        #z3 = z2 + PP(1.33309, 40)
        z3 = z4 - PP(0.81369, ta + 8)
        c5 = z3 + PP(0.430593, 173)
        #c6 = z3 + PP(0.402724, -6)
        #z4 = z3 + PP(0.81369, -102)
        #c7 = z4 + PP(0.487483, 70)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRsw(cls, ta=None, **kwargs):
        #M 8487.42,-32.0704 C 8485.4,-26.1842 8483.3822,-20.043219 8481.55,-14.0094 8481.0008,-12.20079 8478.2417,-14.051398 8479.5178,-16.013967 8479.9826,-16.728781 8481.586,-17.382725 8482.1946,-17.0436 8482.6661,-16.780919 8481.8487,-15.048284 8481.4681,-13.901825

        #z0 = P(0, -0)
        #c0 = P(-0.712611, -2.07652)
        #c1 = P(-1.42445, -4.24292)
        #z1 = P(-2.07081, -6.37152)
        #c2 = P(-2.26455, -7.00956)
        #c3 = P(-3.2379, -6.3567)
        #z2 = P(-2.78772, -5.66435)
        #c4 = P(-2.62375, -5.41218)
        #c5 = P(-2.05811, -5.18149)
        #z3 = P(-1.8434, -5.30112)
        #c6 = P(-1.67707, -5.39379)
        #c7 = P(-1.96543, -6.00502)
        z4 = P(-2.0997, -6.40947)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.712611, -2.07652)
        #z1 = z0 + P(-2.07081, -6.37152)
        #c1 = z1 + P(0.646359, 2.1286)
        #c2 = z1 + P(-0.193746, -0.638037)
        #z2 = z1 + P(-0.716915, 0.707167)
        #c3 = z2 + P(-0.45018, -0.692351)
        #c4 = z2 + P(0.163971, 0.25217)
        #z3 = z2 + P(0.944316, 0.363232)
        #c5 = z3 + P(-0.214701, 0.119636)
        #c6 = z3 + P(0.166335, -0.092668)
        #z4 = z3 + P(-0.256293, -1.10835)
        #c7 = z4 + P(0.134267, 0.404445)

        z0 = P(0, -0)
        c0 = z0 + PP(2.19539, -108)
        z1 = z0 + PP(6.69959, -108)
        c1 = z1 + PP(2.22457, 73)
        c2 = z1 + PP(0.666805, -106)
        z2 = z1 + PP(1.007, 135)
        c3 = z2 + PP(0.82584, -123)
        c4 = z2 + PP(0.300793, 56)
        #z3 = z2 + PP(1.01177, 21)
        z3 = z4 - PP(1.13759, ta + 6)
        c5 = z3 + PP(0.245783, 150)
        #c6 = z3 + PP(0.190406, -29)
        #z4 = z3 + PP(1.13759, -103)
        #c7 = z4 + PP(0.42615, 71)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRswr(cls, ta=None, **kwargs):
        #M 79.9002,442.881 C 77.2198,448.63 75.2592,454.662 73.4049,460.727 72.9566,462.4 70.939361,459.78858 71.8792,458.17396 72.121891,457.75703 72.677027,456.93459 73.165391,456.89503 73.875881,456.83746 74.044795,457.315 74.168,458.019

        #z0 = P(0, -0)
        #c0 = P(-0.942053, -2.02054)
        #c1 = P(-1.63113, -4.14055)
        #z1 = P(-2.28284, -6.27215)
        #c2 = P(-2.4404, -6.86015)
        #c3 = P(-3.14938, -5.94234)
        #z2 = P(-2.81906, -5.37486)
        #c4 = P(-2.73376, -5.22833)
        #c5 = P(-2.53866, -4.93927)
        #z3 = P(-2.36702, -4.92537)
        #c6 = P(-2.11731, -4.90514)
        #c7 = P(-2.05794, -5.07297)
        z4 = P(-2.01464, -5.3204)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942053, -2.02054)
        #z1 = z0 + P(-2.28284, -6.27215)
        #c1 = z1 + P(0.651712, 2.1316)
        #c2 = z1 + P(-0.157559, -0.587992)
        #z2 = z1 + P(-0.536222, 0.897291)
        #c3 = z2 + P(-0.330316, -0.567474)
        #c4 = z2 + P(0.0852961, 0.146534)
        #z3 = z2 + P(0.452045, 0.449493)
        #c5 = z3 + P(-0.17164, -0.0139038)
        #c6 = z3 + P(0.249709, 0.0202335)
        #z4 = z3 + P(0.352377, -0.39503)
        #c7 = z4 + P(-0.0433016, 0.247428)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22936, -114)
        z1 = z0 + PP(6.67467, -109)
        c1 = z1 + PP(2.22901, 72)
        c2 = z1 + PP(0.608736, -105)
        z2 = z1 + PP(1.04531, 120)
        c3 = z2 + PP(0.656609, -120)
        c4 = z2 + PP(0.169551, 59)
        #z3 = z2 + PP(0.637486, 44)
        z3 = z4 - PP(0.529357, ta + 33)
        c5 = z3 + PP(0.172203, -175)
        #c6 = z3 + PP(0.250527, 4)
        #z4 = z3 + PP(0.529357, -48)
        #c7 = z4 + PP(0.251188, 99)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRswl(cls, ta=None, **kwargs):
        #M 106.79,442.881 C 104.109,448.63 102.149,454.662 100.294,460.727 99.8462,462.4 96.786121,459.59463 98.401682,458.65642 99.565727,457.98042 100.41335,458.14184 100.62029,458.71143 101.01656,459.80217 99.61899,460.69063 98.393947,461.36925

        #z0 = P(0, -0)
        #c0 = P(-0.942264, -2.02054)
        #c1 = P(-1.63113, -4.14055)
        #z1 = P(-2.28308, -6.27215)
        #c2 = P(-2.44047, -6.86015)
        #c3 = P(-3.51596, -5.87417)
        #z2 = P(-2.94816, -5.54443)
        #c4 = P(-2.53904, -5.30684)
        #c5 = P(-2.24114, -5.36357)
        #z3 = P(-2.16841, -5.56376)
        #c6 = P(-2.02913, -5.94711)
        #c7 = P(-2.52032, -6.25937)
        z4 = P(-2.95088, -6.49788)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942264, -2.02054)
        #z1 = z0 + P(-2.28308, -6.27215)
        #c1 = z1 + P(0.651958, 2.1316)
        #c2 = z1 + P(-0.157384, -0.587992)
        #z2 = z1 + P(-0.665074, 0.727726)
        #c3 = z2 + P(-0.567805, -0.329743)
        #c4 = z2 + P(0.409115, 0.237587)
        #z3 = z2 + P(0.779752, -0.0193338)
        #c5 = z3 + P(-0.0727311, 0.200188)
        #c6 = z3 + P(0.139273, -0.383351)
        #z4 = z3 + P(-0.78247, -0.934117)
        #c7 = z4 + P(0.430553, 0.238508)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22945, -115)
        z1 = z0 + PP(6.67476, -110)
        c1 = z1 + PP(2.22908, 72)
        c2 = z1 + PP(0.608691, -104)
        z2 = z1 + PP(0.985854, 132)
        c3 = z2 + PP(0.656607, -149)
        c4 = z2 + PP(0.473099, 30)
        #z3 = z2 + PP(0.779991, -1)
        z3 = z4 - PP(1.21854, ta + 23)
        c5 = z3 + PP(0.212991, 109)
        #c6 = z3 + PP(0.407867, -70)
        #z4 = z3 + PP(1.21854, -129)
        #c7 = z4 + PP(0.492201, 28)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECL(cls, ta=None, **kwargs):
        #M8.000000 16.000000C14.032837 11.114731,20.480743 6.765610,27.270264 3.002182C29.920456 1.533188,26.282883 -2.469193,26.282928 0.486435C26.282944 1.438538,26.449509 2.383316,26.775146 3.278000

        #z0 = P(0, -0)
        #c0 = P(2.1203, 1.71698)
        #c1 = P(4.38648, 3.24552)
        #z1 = P(6.77272, 4.56821)
        #c2 = P(7.70416, 5.0845)
        #c3 = P(6.4257, 6.49118)
        #z2 = P(6.42572, 5.4524)
        #c4 = P(6.42572, 5.11777)
        #c5 = P(6.48426, 4.78572)
        z3 = P(6.59871, 4.47127)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1203, 1.71698)
        #z1 = z0 + P(6.77272, 4.56821)
        #c1 = z1 + P(-2.38624, -1.32269)
        #c2 = z1 + P(0.931436, 0.516292)
        #z2 = z1 + P(-0.347009, 0.884184)
        #c3 = z2 + P(-1.58157e-05, 1.03878)
        #c4 = z2 + P(5.62336e-06, -0.334626)
        #z3 = z2 + P(0.172995, -0.981123)
        #c5 = z3 + P(-0.114448, 0.314446)

        z0 = P(0, -0)
        c0 = z0 + PP(2.72831, 38)
        z1 = z0 + PP(8.16935, 33)
        c1 = z1 + PP(2.72831, -151)
        c2 = z1 + PP(1.06496, 28)
        z2 = z1 + PP(0.94984, 111)
        #z2 = z3 - PP(0.996258, ta + -9)
        c3 = z2 + PP(1.03878, 90)
        #c4 = z2 + PP(0.334626, -89)
        #z3 = z2 + PP(0.996258, -80)
        #c5 = z3 + PP(0.334626, 109)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NECLe(cls, ta=None, **kwargs):
        #M 39.5854,615.428 C 45.6797,610.667 52.212994,606.51228 59.0066,602.816 62.067364,601.15069 56.339313,600.94579 55.902868,602.88584 55.722164,603.68909 57.101498,603.41441 57.936156,603.40343

        #z0 = P(0, -0)
        #c0 = P(2.1419, 1.6733)
        #c1 = P(4.43809, 3.13352)
        #z1 = P(6.82577, 4.43261)
        #c2 = P(7.90151, 5.0179)
        #c3 = P(5.88833, 5.08992)
        #z2 = P(5.73494, 4.40807)
        #c4 = P(5.67143, 4.12576)
        #c5 = P(6.15621, 4.22229)
        z3 = P(6.44955, 4.22615)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1419, 1.6733)
        #z1 = z0 + P(6.82577, 4.43261)
        #c1 = z1 + P(-2.38768, -1.29909)
        #c2 = z1 + P(1.07574, 0.58529)
        #z2 = z1 + P(-1.09084, -0.024546)
        #c3 = z2 + P(0.153393, 0.68185)
        #c4 = z2 + P(-0.0635102, -0.28231)
        #z3 = z2 + P(0.714619, -0.181912)
        #c5 = z3 + P(-0.293349, -0.00385903)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71803, 37)
        z1 = z0 + PP(8.13875, 32)
        c1 = z1 + PP(2.71821, -151)
        c2 = z1 + PP(1.22465, 28)
        #z2 = z1 + PP(1.09111, -178)
        z2 = z3 - PP(0.737409, ta + 345)
        c3 = z2 + PP(0.698891, 77)
        #c4 = z2 + PP(0.289366, -102)
        #z3 = z2 + PP(0.737409, -14)
        #c5 = z3 + PP(0.293374, -179)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NECLer(cls, ta=None, **kwargs):
        #M 152.198,615.428 C 158.292,610.667 164.855,606.4432 171.619,602.816 172.9515,602.1075 173.12162,600.09518 172.13587,599.92375 170.63198,599.66221 168.75635,601.54522 168.79495,603.01721 168.83213,604.43511 171.70371,602.05854 172.24152,601.78729

        #z0 = P(0, -0)
        #c0 = P(2.1418, 1.6733)
        #c1 = P(4.44843, 3.1578)
        #z1 = P(6.8257, 4.43261)
        #c2 = P(7.29402, 4.68162)
        #c3 = P(7.35381, 5.38887)
        #z2 = P(7.00736, 5.44912)
        #c4 = P(6.4788, 5.54104)
        #c5 = P(5.8196, 4.87924)
        #z3 = P(5.83316, 4.36189)
        #c6 = P(5.84623, 3.86356)
        #c7 = P(6.85547, 4.69883)
        z4 = P(7.04449, 4.79416)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1418, 1.6733)
        #z1 = z0 + P(6.8257, 4.43261)
        #c1 = z1 + P(-2.37727, -1.27482)
        #c2 = z1 + P(0.46832, 0.249009)
        #z2 = z1 + P(0.181659, 1.01651)
        #c3 = z2 + P(0.346452, -0.0602508)
        #c4 = z2 + P(-0.528557, 0.0919208)
        #z3 = z2 + P(-1.1742, -1.08723)
        #c5 = z3 + P(-0.0135664, 0.517345)
        #c6 = z3 + P(0.0130673, -0.498335)
        #z4 = z3 + P(1.21133, 0.432268)
        #c7 = z4 + P(-0.189019, -0.0953335)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71795, 37)
        z1 = z0 + PP(8.13869, 32)
        c1 = z1 + PP(2.69752, -151)
        c2 = z1 + PP(0.530405, 27)
        z2 = z1 + PP(1.03261, 79)
        c3 = z2 + PP(0.351652, -9)
        c4 = z2 + PP(0.53649, 170)
        #z3 = z2 + PP(1.60025, -137)
        z3 = z4 - PP(1.28615, ta + 352)
        c5 = z3 + PP(0.517523, 91)
        #c6 = z3 + PP(0.498506, -88)
        #z4 = z3 + PP(1.28615, 19)
        #c7 = z4 + PP(0.211699, -153)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLel(cls, ta=None, **kwargs):
        #M 101.561,615.428 C 107.655,610.667 114.218,606.566 120.982,602.816 122.3145,602.1075 121.68457,601.01878 120.71807,600.48146 120.01357,600.0898 118.26949,599.90875 118.26949,601.00944 118.26949,601.83244 119.41284,602.3633 120.266,602.754

        #z0 = P(0, -0)
        #c0 = P(2.1418, 1.6733)
        #c1 = P(4.44843, 3.11464)
        #z1 = P(6.8257, 4.43261)
        #c2 = P(7.29402, 4.68162)
        #c3 = P(7.07263, 5.06426)
        #z2 = P(6.73294, 5.25311)
        #c4 = P(6.48534, 5.39076)
        #c5 = P(5.87236, 5.45439)
        #z3 = P(5.87236, 5.06755)
        #c6 = P(5.87236, 4.77829)
        #c7 = P(6.27421, 4.59172)
        z4 = P(6.57406, 4.4544)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1418, 1.6733)
        #z1 = z0 + P(6.8257, 4.43261)
        #c1 = z1 + P(-2.37727, -1.31797)
        #c2 = z1 + P(0.46832, 0.249009)
        #z2 = z1 + P(-0.0927608, 0.820497)
        #c3 = z2 + P(0.339686, -0.188846)
        #c4 = z2 + P(-0.247603, 0.137653)
        #z3 = z2 + P(-0.860578, -0.185564)
        #c5 = z3 + P(0, 0.386848)
        #c6 = z3 + P(0, -0.289251)
        #z4 = z3 + P(0.701693, -0.613143)
        #c7 = z4 + P(-0.299852, 0.137315)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71795, 37)
        z1 = z0 + PP(8.13869, 32)
        c1 = z1 + PP(2.71818, -150)
        c2 = z1 + PP(0.530405, 27)
        z2 = z1 + PP(0.825724, 96)
        c3 = z2 + PP(0.388651, -29)
        c4 = z2 + PP(0.283294, 150)
        #z3 = z2 + PP(0.880357, -167)
        z3 = z4 - PP(0.931836, ta + -16)
        c5 = z3 + PP(0.386848, 90)
        #c6 = z3 + PP(0.289251, -90)
        #z4 = z3 + PP(0.931836, -41)
        #c7 = z4 + PP(0.329798, 155)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLne(cls, ta=None, **kwargs):
        #M 39.5854,680.757 C 45.6797,675.995 52.2425,671.894 59.0066,668.144 60.33935,667.4355 60.449383,665.63164 59.523763,665.25175 58.614746,664.87867 56.257112,666.16627 56.257112,667.63877 56.257112,668.46177 57.307018,668.6507 58.2904,668.082

        #z0 = P(0, -0)
        #c0 = P(2.1419, 1.67365)
        #c1 = P(4.44846, 3.11499)
        #z1 = P(6.82577, 4.43296)
        #c2 = P(7.29418, 4.68197)
        #c3 = P(7.33285, 5.31596)
        #z2 = P(7.00753, 5.44947)
        #c4 = P(6.68805, 5.5806)
        #c5 = P(5.85944, 5.12806)
        #z3 = P(5.85944, 4.61053)
        #c6 = P(5.85944, 4.32128)
        #c7 = P(6.22844, 4.25488)
        z4 = P(6.57406, 4.45475)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1419, 1.67365)
        #z1 = z0 + P(6.82577, 4.43296)
        #c1 = z1 + P(-2.37731, -1.31797)
        #c2 = z1 + P(0.468408, 0.249009)
        #z2 = z1 + P(0.181762, 1.01651)
        #c3 = z2 + P(0.325318, -0.133516)
        #c4 = z2 + P(-0.319483, 0.131123)
        #z3 = z2 + P(-1.1481, -0.838942)
        #c5 = z3 + P(0, 0.517525)
        #c6 = z3 + P(0, -0.289251)
        #z4 = z3 + P(0.714619, -0.155778)
        #c7 = z4 + P(-0.345619, -0.199875)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71824, 38)
        z1 = z0 + PP(8.13894, 33)
        c1 = z1 + PP(2.71821, -150)
        c2 = z1 + PP(0.530483, 27)
        z2 = z1 + PP(1.03263, 79)
        c3 = z2 + PP(0.351651, -22)
        c4 = z2 + PP(0.345344, 157)
        #z3 = z2 + PP(1.42195, -143)
        z3 = z4 - PP(0.731401, ta + 317)
        c5 = z3 + PP(0.517525, 90)
        #c6 = z3 + PP(0.289251, -90)
        #z4 = z3 + PP(0.731401, -12)
        #c7 = z4 + PP(0.399253, -149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLner(cls, ta=None, **kwargs):
        #M 136.027,680.757 C 142.122,675.995 148.684,671.894 155.449,668.144 156.7815,667.4355 157.11202,665.34502 155.96587,665.25175 155.00394,665.17347 152.81453,668.55313 152.44831,669.83954

        #z0 = P(0, -0)
        #c0 = P(2.14215, 1.67365)
        #c1 = P(4.44843, 3.11499)
        #z1 = P(6.82605, 4.43296)
        #c2 = P(7.29437, 4.68197)
        #c3 = P(7.41054, 5.41669)
        #z2 = P(7.00771, 5.44947)
        #c4 = P(6.66963, 5.47699)
        #c5 = P(5.90014, 4.28917)
        z3 = P(5.77143, 3.83705)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.14215, 1.67365)
        #z1 = z0 + P(6.82605, 4.43296)
        #c1 = z1 + P(-2.37763, -1.31797)
        #c2 = z1 + P(0.46832, 0.249009)
        #z2 = z1 + P(0.181659, 1.01651)
        #c3 = z2 + P(0.402826, -0.0327807)
        #c4 = z2 + P(-0.33808, 0.0275123)
        #z3 = z2 + P(-1.23628, -1.61242)
        #c5 = z3 + P(0.128712, 0.452121)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71844, 38)
        z1 = z0 + PP(8.13918, 33)
        c1 = z1 + PP(2.71849, -150)
        c2 = z1 + PP(0.530405, 27)
        #z2 = z1 + PP(1.03261, 79)
        z2 = z3 - PP(2.03182, ta + 180 -21)
        c3 = z2 + PP(0.404157, -4)
        #c4 = z2 + PP(0.339197, 175)
        #z3 = z2 + PP(2.03182, -127)
        #c5 = z3 + PP(0.470086, 74)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_NECLnel(cls, ta=None, **kwargs):
        #M 88.1716,680.757 C 94.266,675.995 100.829,671.894 107.593,668.144 108.9255,667.4355 108.96284,666.41504 108.07269,665.95819 107.20087,665.51075 105.10358,666.5009 105.10358,667.9734 105.10358,668.7964 106.37883,668.69229 107.02819,668.45822

        #z0 = P(0, -0)
        #c0 = P(2.14194, 1.67365)
        #c1 = P(4.44857, 3.11499)
        #z1 = P(6.82584, 4.43296)
        #c2 = P(7.29416, 4.68197)
        #c3 = P(7.30729, 5.04062)
        #z2 = P(6.99443, 5.20119)
        #c4 = P(6.68802, 5.35845)
        #c5 = P(5.95091, 5.01045)
        #z3 = P(5.95091, 4.49292)
        #c6 = P(5.95091, 4.20367)
        #c7 = P(6.39911, 4.24026)
        z4 = P(6.62733, 4.32253)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.14194, 1.67365)
        #z1 = z0 + P(6.82584, 4.43296)
        #c1 = z1 + P(-2.37727, -1.31797)
        #c2 = z1 + P(0.46832, 0.249009)
        #z2 = z1 + P(0.168592, 0.768225)
        #c3 = z2 + P(0.312852, -0.160564)
        #c4 = z2 + P(-0.30641, 0.157257)
        #z3 = z2 + P(-1.04352, -0.708265)
        #c5 = z3 + P(0, 0.517525)
        #c6 = z3 + P(0, -0.289251)
        #z4 = z3 + P(0.676423, -0.170395)
        #c7 = z4 + P(-0.228224, -0.0822662)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71827, 38)
        z1 = z0 + PP(8.139, 33)
        c1 = z1 + PP(2.71818, -150)
        c2 = z1 + PP(0.530405, 27)
        z2 = z1 + PP(0.786506, 77)
        c3 = z2 + PP(0.351649, -27)
        c4 = z2 + PP(0.344408, 152)
        #z3 = z2 + PP(1.26118, -145)
        z3 = z4 - PP(0.697555, ta + 326)
        c5 = z3 + PP(0.517525, 90)
        #c6 = z3 + PP(0.289251, -90)
        #z4 = z3 + PP(0.697555, -14)
        #c7 = z4 + PP(0.242598, -160)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLs(cls, ta=None, **kwargs):
        #M 39.5854,731.508 C 45.6797,726.747 52.2425,722.645 59.0066,718.896 60.33935,718.187 60.09815,716.82225 59.523763,716.00287 58.949375,715.1835 58.0418,715.39285 58.0418,716.382 58.0418,717.205 58.273724,718.027 58.2904,718.833

        #z0 = P(0, -0)
        #c0 = P(2.1419, 1.6733)
        #c1 = P(4.44846, 3.11499)
        #z1 = P(6.82577, 4.43261)
        #c2 = P(7.29418, 4.6818)
        #c3 = P(7.20941, 5.16145)
        #z2 = P(7.00753, 5.44943)
        #c4 = P(6.80566, 5.73741)
        #c5 = P(6.48668, 5.66383)
        #z3 = P(6.48668, 5.31618)
        #c6 = P(6.48668, 5.02693)
        #c7 = P(6.5682, 4.73803)
        z4 = P(6.57406, 4.45475)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1419, 1.6733)
        #z1 = z0 + P(6.82577, 4.43261)
        #c1 = z1 + P(-2.37731, -1.31762)
        #c2 = z1 + P(0.468408, 0.249185)
        #z2 = z1 + P(0.181762, 1.01682)
        #c3 = z2 + P(0.201874, -0.287979)
        #c4 = z2 + P(-0.201874, 0.287976)
        #z3 = z2 + P(-0.520851, -0.133249)
        #c5 = z3 + P(0, 0.347647)
        #c6 = z3 + P(0, -0.289251)
        #z4 = z3 + P(0.0873729, -0.861428)
        #c7 = z4 + P(-0.00586094, 0.283277)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71803, 37)
        z1 = z0 + PP(8.13875, 32)
        c1 = z1 + PP(2.71804, -151)
        c2 = z1 + PP(0.530565, 28)
        z2 = z1 + PP(1.03294, 79)
        c3 = z2 + PP(0.351689, -54)
        c4 = z2 + PP(0.351686, 125)
        #z3 = z2 + PP(0.537625, -165)
        z3 = z4 - PP(0.865848, ta + 5)
        c5 = z3 + PP(0.347647, 90)
        #c6 = z3 + PP(0.289251, -90)
        #z4 = z3 + PP(0.865848, -84)
        #c7 = z4 + PP(0.283337, 91)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLsl(cls, ta=None, **kwargs):
        #M 93.0568,731.508 C 99.1512,726.747 105.714,722.645 112.478,718.896 113.811,718.187 113.9471,715.89327 112.99525,716.00287 111.46879,716.17863 111.08268,718.63259 110.44502,720.03733

        #z0 = P(0, -0)
        #c0 = P(2.14194, 1.6733)
        #c1 = P(4.4485, 3.11499)
        #z1 = P(6.82577, 4.43261)
        #c2 = P(7.29427, 4.6818)
        #c3 = P(7.3421, 5.48795)
        #z2 = P(7.00757, 5.44943)
        #c4 = P(6.47108, 5.38766)
        #c5 = P(6.33537, 4.52519)
        z3 = P(6.11126, 4.03148)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.14194, 1.6733)
        #z1 = z0 + P(6.82577, 4.43261)
        #c1 = z1 + P(-2.37727, -1.31762)
        #c2 = z1 + P(0.468496, 0.249185)
        #z2 = z1 + P(0.181793, 1.01682)
        #c3 = z2 + P(0.334537, 0.03852)
        #c4 = z2 + P(-0.536489, -0.0617726)
        #z3 = z2 + P(-0.896304, -1.41795)
        #c5 = z3 + P(0.224112, 0.49371)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71806, 37)
        z1 = z0 + PP(8.13875, 32)
        c1 = z1 + PP(2.71801, -151)
        c2 = z1 + PP(0.530643, 28)
        #z2 = z1 + PP(1.03294, 79)
        z2 = z3 - PP(1.67748, ta + -7)
        c3 = z2 + PP(0.336747, 6)
        #c4 = z2 + PP(0.540034, -173)
        #z3 = z2 + PP(1.67748, -122)
        #c5 = z3 + PP(0.542195, 65)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NECLsr(cls, ta=None, **kwargs):
        #M 146.528,731.508 C 152.623,726.747 159.185,722.645 165.95,718.896 167.2825,718.187 166.87328,716.76493 165.88848,716.26578 165.53228,716.08524 163.53827,715.65277 163.53827,717.12527 163.53827,717.94827 164.77414,718.46752 165.42579,719.18745

        #z0 = P(0, -0)
        #c0 = P(2.14215, 1.6733)
        #c1 = P(4.44843, 3.11499)
        #z1 = P(6.82605, 4.43261)
        #c2 = P(7.29437, 4.6818)
        #c3 = P(7.15055, 5.1816)
        #z2 = P(6.80443, 5.35703)
        #c4 = P(6.67924, 5.42048)
        #c5 = P(5.97843, 5.57248)
        #z3 = P(5.97843, 5.05495)
        #c6 = P(5.97843, 4.7657)
        #c7 = P(6.41279, 4.58321)
        z4 = P(6.64181, 4.33018)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.14215, 1.6733)
        #z1 = z0 + P(6.82605, 4.43261)
        #c1 = z1 + P(-2.37763, -1.31762)
        #c2 = z1 + P(0.46832, 0.249185)
        #z2 = z1 + P(-0.0216218, 0.924417)
        #c3 = z2 + P(0.346118, -0.175431)
        #c4 = z2 + P(-0.12519, 0.0634526)
        #z3 = z2 + P(-0.826005, -0.302076)
        #c5 = z3 + P(0, 0.517525)
        #c6 = z3 + P(0, -0.289251)
        #z4 = z3 + P(0.663388, -0.724774)
        #c7 = z4 + P(-0.229029, 0.253027)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71822, 37)
        z1 = z0 + PP(8.13898, 32)
        c1 = z1 + PP(2.71831, -151)
        c2 = z1 + PP(0.530488, 28)
        z2 = z1 + PP(0.92467, 91)
        c3 = z2 + PP(0.388038, -26)
        c4 = z2 + PP(0.140352, 153)
        #z3 = z2 + PP(0.879508, -159)
        z3 = z4 - PP(0.982537, ta + 1)
        c5 = z3 + PP(0.517525, 90)
        #c6 = z3 + PP(0.289251, -90)
        #z4 = z3 + PP(0.982537, -47)
        #c7 = z4 + PP(0.341287, 132)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLse(cls, ta=None, **kwargs):
        #M 39.5854,819.513 C 45.6797,814.752 52.2425,810.65 59.0066,806.901 60.33935,806.1925 60.340958,804.8092 59.523763,804.23171 58.837829,803.74698 57.149435,803.13809 57.186617,804.83318 57.204687,805.65698 58.092082,806.50075 58.4416,807.21524

        #z0 = P(0, -0)
        #c0 = P(2.1419, 1.6733)
        #c1 = P(4.44846, 3.11499)
        #z1 = P(6.82577, 4.43261)
        #c2 = P(7.29418, 4.68162)
        #c3 = P(7.29475, 5.1678)
        #z2 = P(7.00753, 5.37076)
        #c4 = P(6.76646, 5.54112)
        #c5 = P(6.17305, 5.75512)
        #z3 = P(6.18612, 5.15937)
        #c6 = P(6.19247, 4.86984)
        #c7 = P(6.50436, 4.57328)
        z4 = P(6.6272, 4.32217)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1419, 1.6733)
        #z1 = z0 + P(6.82577, 4.43261)
        #c1 = z1 + P(-2.37731, -1.31762)
        #c2 = z1 + P(0.468408, 0.249009)
        #z2 = z1 + P(0.181762, 0.938148)
        #c3 = z2 + P(0.287211, -0.202965)
        #c4 = z2 + P(-0.241078, 0.170363)
        #z3 = z2 + P(-0.821413, -0.211393)
        #c5 = z3 + P(-0.013068, 0.595756)
        #c6 = z3 + P(0.00635088, -0.289533)
        #z4 = z3 + P(0.441076, -0.837199)
        #c7 = z4 + P(-0.122842, 0.251115)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71803, 37)
        z1 = z0 + PP(8.13875, 32)
        c1 = z1 + PP(2.71804, -151)
        c2 = z1 + PP(0.530483, 27)
        z2 = z1 + PP(0.955594, 79)
        c3 = z2 + PP(0.351689, -35)
        c4 = z2 + PP(0.295199, 144)
        #z3 = z2 + PP(0.848178, -165)
        z3 = z4 - PP(0.946282, ta + 2)
        c5 = z3 + PP(0.595899, 91)
        #c6 = z3 + PP(0.289602, -88)
        #z4 = z3 + PP(0.946282, -62)
        #c7 = z4 + PP(0.279551, 116)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLser(cls, ta=None, **kwargs):
        #M 84.5529,819.513 C 90.6472,814.752 97.2101,810.65 103.974,806.901 105.307,806.1925 105.11236,804.82579 104.30534,804.26889 103.68208,803.8388 100.81527,804.17918 100.81527,805.39091 100.81527,806.21491 102.46186,806.67361 103.33332,807.25752

        #z0 = P(0, -0)
        #c0 = P(2.1419, 1.6733)
        #c1 = P(4.4485, 3.11499)
        #z1 = P(6.82574, 4.43261)
        #c2 = P(7.29423, 4.68162)
        #c3 = P(7.22583, 5.16197)
        #z2 = P(6.94219, 5.35769)
        #c4 = P(6.72314, 5.50885)
        #c5 = P(5.71557, 5.38922)
        #z3 = P(5.71557, 4.96335)
        #c6 = P(5.71557, 4.67375)
        #c7 = P(6.29428, 4.51253)
        z4 = P(6.60056, 4.30731)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1419, 1.6733)
        #z1 = z0 + P(6.82574, 4.43261)
        #c1 = z1 + P(-2.37724, -1.31762)
        #c2 = z1 + P(0.468496, 0.249009)
        #z2 = z1 + P(0.116453, 0.925081)
        #c3 = z2 + P(0.283635, -0.195728)
        #c4 = z2 + P(-0.219051, 0.151159)
        #z3 = z2 + P(-1.22662, -0.394345)
        #c5 = z3 + P(0, 0.425874)
        #c6 = z3 + P(0, -0.289603)
        #z4 = z3 + P(0.884994, -0.656039)
        #c7 = z4 + P(-0.306283, 0.205221)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71803, 37)
        z1 = z0 + PP(8.13872, 32)
        c1 = z1 + PP(2.71798, -151)
        c2 = z1 + PP(0.53056, 27)
        z2 = z1 + PP(0.932382, 82)
        c3 = z2 + PP(0.344613, -34)
        c4 = z2 + PP(0.266144, 145)
        #z3 = z2 + PP(1.28845, -162)
        z3 = z4 - PP(1.10164, ta + -2)
        c5 = z3 + PP(0.425874, 90)
        #c6 = z3 + PP(0.289603, -90)
        #z4 = z3 + PP(1.10164, -36)
        #c7 = z4 + PP(0.36868, 146)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLsel(cls, ta=None, **kwargs):
        #M 135.19,819.513 C 141.284,814.752 147.847,810.65 154.611,806.901 155.9435,806.1925 155.85286,804.69832 155.12788,804.00862 154.81377,803.7098 153.86909,803.36118 153.646,804.387 153.47089,805.19218 153.27153,806.8417 153.35364,807.60338

        #z0 = P(0, -0)
        #c0 = P(2.1418, 1.6733)
        #c1 = P(4.44843, 3.11499)
        #z1 = P(6.8257, 4.43261)
        #c2 = P(7.29402, 4.68162)
        #c3 = P(7.26217, 5.20677)
        #z2 = P(7.00736, 5.44917)
        #c4 = P(6.89697, 5.55419)
        #c5 = P(6.56495, 5.67672)
        #z3 = P(6.48654, 5.31618)
        #c6 = P(6.425, 5.03319)
        #c7 = P(6.35493, 4.45345)
        z4 = P(6.38379, 4.18575)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1418, 1.6733)
        #z1 = z0 + P(6.8257, 4.43261)
        #c1 = z1 + P(-2.37727, -1.31762)
        #c2 = z1 + P(0.46832, 0.249009)
        #z2 = z1 + P(0.181663, 1.01656)
        #c3 = z2 + P(0.254801, -0.242402)
        #c4 = z2 + P(-0.110397, 0.105023)
        #z3 = z2 + P(-0.520821, -0.132985)
        #c5 = z3 + P(0.0784072, 0.360535)
        #c6 = z3 + P(-0.0615441, -0.282988)
        #z4 = z3 + P(-0.102753, -1.13043)
        #c7 = z4 + P(-0.0288584, 0.2677)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71795, 37)
        z1 = z0 + PP(8.13869, 32)
        c1 = z1 + PP(2.71801, -151)
        c2 = z1 + PP(0.530405, 27)
        z2 = z1 + PP(1.03266, 79)
        c3 = z2 + PP(0.351685, -43)
        c4 = z2 + PP(0.152373, 136)
        #z3 = z2 + PP(0.537531, -165)
        z3 = z4 - PP(1.13509, ta + -11)
        c5 = z3 + PP(0.368962, 77)
        #c6 = z3 + PP(0.289603, -102)
        #z4 = z3 + PP(1.13509, -95)
        #c7 = z4 + PP(0.269251, 96)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLsw(cls, ta=None, **kwargs):
        #M 39.5854,901.792 C 45.6797,897.03 52.2425,892.929 59.0066,889.179 60.33935,888.4705 60.472105,886.77094 59.523763,886.28675 58.837367,885.9363 58.242225,886.74589 57.952012,887.53131 57.653449,888.33933 57.066556,889.78939 56.818556,890.40887

        #z0 = P(0, -0)
        #c0 = P(2.1419, 1.67365)
        #c1 = P(4.44846, 3.11499)
        #z1 = P(6.82577, 4.43296)
        #c2 = P(7.29418, 4.68197)
        #c3 = P(7.34084, 5.2793)
        #z2 = P(7.00753, 5.44947)
        #c4 = P(6.76629, 5.57264)
        #c5 = P(6.55713, 5.2881)
        #z3 = P(6.45513, 5.01206)
        #c6 = P(6.35019, 4.72807)
        #c7 = P(6.14392, 4.21844)
        z4 = P(6.05676, 4.00071)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1419, 1.67365)
        #z1 = z0 + P(6.82577, 4.43296)
        #c1 = z1 + P(-2.37731, -1.31797)
        #c2 = z1 + P(0.468408, 0.249009)
        #z2 = z1 + P(0.181762, 1.01651)
        #c3 = z2 + P(0.333304, -0.170173)
        #c4 = z2 + P(-0.241241, 0.123169)
        #z3 = z2 + P(-0.552407, -0.437413)
        #c5 = z3 + P(0.101998, 0.276044)
        #c6 = z3 + P(-0.104933, -0.283987)
        #z4 = z3 + P(-0.398364, -1.01135)
        #c7 = z4 + P(0.087162, 0.217722)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71824, 38)
        z1 = z0 + PP(8.13894, 33)
        c1 = z1 + PP(2.71821, -150)
        c2 = z1 + PP(0.530483, 27)
        z2 = z1 + PP(1.03263, 79)
        c3 = z2 + PP(0.374233, -27)
        c4 = z2 + PP(0.270865, 152)
        #z3 = z2 + PP(0.704616, -141)
        z3 = z4 - PP(1.08698, ta + 1)
        c5 = z3 + PP(0.294285, 69)
        #c6 = z3 + PP(0.302753, -110)
        #z4 = z3 + PP(1.08698, -111)
        #c7 = z4 + PP(0.234521, 68)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLswr(cls, ta=None, **kwargs):
        #M 89.1788,901.792 C 95.2731,897.03 101.836,892.929 108.6,889.179 109.933,888.4705 109.95963,886.82677 109.11725,886.28675 108.24529,885.72777 106.30545,885.93018 106.85418,886.88909 107.2704,887.61644 107.68182,888.23664 107.884,889.117

        #z0 = P(0, -0)
        #c0 = P(2.1419, 1.67365)
        #c1 = P(4.4485, 3.11499)
        #z1 = P(6.82577, 4.43296)
        #c2 = P(7.29427, 4.68197)
        #c3 = P(7.30363, 5.25968)
        #z2 = P(7.00757, 5.44947)
        #c4 = P(6.70111, 5.64593)
        #c5 = P(6.01933, 5.57479)
        #z3 = P(6.21219, 5.23777)
        #c6 = P(6.35847, 4.98214)
        #c7 = P(6.50307, 4.76417)
        z4 = P(6.57413, 4.45475)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1419, 1.67365)
        #z1 = z0 + P(6.82577, 4.43296)
        #c1 = z1 + P(-2.37727, -1.31797)
        #c2 = z1 + P(0.468496, 0.249009)
        #z2 = z1 + P(0.181793, 1.01651)
        #c3 = z2 + P(0.296063, -0.189795)
        #c4 = z2 + P(-0.306459, 0.196459)
        #z3 = z2 + P(-0.795378, -0.211698)
        #c5 = z3 + P(-0.192857, 0.337018)
        #c6 = z3 + P(0.146285, -0.255634)
        #z4 = z3 + P(0.36194, -0.783021)
        #c7 = z4 + P(-0.0710582, 0.309411)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71824, 38)
        z1 = z0 + PP(8.13894, 33)
        c1 = z1 + PP(2.71818, -150)
        c2 = z1 + PP(0.53056, 27)
        z2 = z1 + PP(1.03264, 79)
        c3 = z2 + PP(0.351675, -32)
        c4 = z2 + PP(0.364024, 147)
        #z3 = z2 + PP(0.823069, -165)
        z3 = z4 - PP(0.862625, ta + 13)
        c5 = z3 + PP(0.388298, 119)
        #c6 = z3 + PP(0.29453, -60)
        #z4 = z3 + PP(0.862625, -65)
        #c7 = z4 + PP(0.317466, 102)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLswl(cls, ta=None, **kwargs):
        #M 132.75,901.792 C 138.844,897.03 145.407,892.929 152.171,889.179 153.5035,888.4705 153.49422,886.50478 152.68787,886.28675 151.74055,886.0306 151.09221,887.83637 150.56263,889.04264

        #z0 = P(0, -0)
        #c0 = P(2.1418, 1.67365)
        #c1 = P(4.44843, 3.11499)
        #z1 = P(6.8257, 4.43296)
        #c2 = P(7.29402, 4.68197)
        #c3 = P(7.29076, 5.37284)
        #z2 = P(7.00736, 5.44947)
        #c4 = P(6.67442, 5.5395)
        #c5 = P(6.44655, 4.90484)
        z3 = P(6.26042, 4.48089)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1418, 1.67365)
        #z1 = z0 + P(6.8257, 4.43296)
        #c1 = z1 + P(-2.37727, -1.31797)
        #c2 = z1 + P(0.46832, 0.249009)
        #z2 = z1 + P(0.181659, 1.01651)
        #c3 = z2 + P(0.2834, -0.0766288)
        #c4 = z2 + P(-0.332945, 0.0900264)
        #z3 = z2 + P(-0.746937, -0.968585)
        #c5 = z3 + P(0.186126, 0.423956)

        z0 = P(0, -0)
        c0 = z0 + PP(2.71816, 38)
        z1 = z0 + PP(8.13888, 33)
        c1 = z1 + PP(2.71818, -150)
        c2 = z1 + PP(0.530405, 27)
        #z2 = z1 + PP(1.03261, 79)
        z2 = z3 - PP(1.22314, ta + -13)
        c3 = z2 + PP(0.293577, -15)
        #c4 = z2 + PP(0.344902, 164)
        #z3 = z2 + PP(1.22314, -127)
        #c5 = z3 + PP(0.463013, 66)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCRNE(cls, ta=None, **kwargs):
        #M 182.532,130.508 C 179.861,136.234 178.25671,142.36656 176.372,148.397 175.85716,150.04431 173.702,149.213 174.604,147.585 175.095,146.7 176.45475,145.94295 177.29462,145.38425 177.98612,144.92425 179.35701,144.05044 180.17673,143.48856

        #z0 = P(0, -0)
        #c0 = P(-0.942269, -2.02001)
        #c1 = P(-1.50823, -4.18344)
        #z1 = P(-2.17311, -6.31084)
        #c2 = P(-2.35474, -6.89198)
        #c3 = P(-3.11503, -6.59871)
        #z2 = P(-2.79682, -6.02439)
        #c4 = P(-2.62361, -5.71218)
        #c5 = P(-2.14392, -5.44511)
        #z3 = P(-1.84763, -5.24801)
        #c6 = P(-1.60369, -5.08573)
        #c7 = P(-1.12007, -4.77747)
        z4 = P(-0.830887, -4.57925)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.942269, -2.02001)
        #z1 = z0 + P(-2.17311, -6.31084)
        #c1 = z1 + P(0.664884, 2.12741)
        #c2 = z1 + P(-0.181624, -0.581134)
        #z2 = z1 + P(-0.623711, 0.286456)
        #c3 = z2 + P(-0.318206, -0.574322)
        #c4 = z2 + P(0.173214, 0.312208)
        #z3 = z2 + P(0.949191, 0.776376)
        #c5 = z3 + P(-0.296287, -0.197097)
        #c6 = z3 + P(0.243946, 0.162278)
        #z4 = z3 + P(1.01674, 0.668757)
        #c7 = z4 + P(-0.289179, -0.198219)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22897, -115)
        z1 = z0 + PP(6.67451, -109)
        c1 = z1 + PP(2.22888, 72)
        c2 = z1 + PP(0.608855, -107)
        z2 = z1 + PP(0.686347, 155)
        c3 = z2 + PP(0.656583, -118)
        c4 = z2 + PP(0.357039, 60)
        z3 = z2 + PP(1.22626, 39)
        #z3 = z4 - PP(1.21697, ta + 358)
        c5 = z3 + PP(0.355856, -146)
        c6 = z3 + PP(0.292991, 33)
        z4 = z3 + PP(1.21697, 33)
        c7 = z4 + PP(0.350593, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_NECLNE(cls, ta=None, **kwargs):
        #M 39.5854,282.379 C 45.6573,277.635 52.3299,273.782 58.9346,269.814 60.2859,269.155 60.374183,268.07641 59.958246,267.25844 59.730992,266.81153 58.963223,266.69479 58.500503,266.88783 57.660042,267.23846 56.619362,268.65113 57.116162,269.24313 57.987862,270.24613 59.1264,269.126 60.107,268.537 61.5627,267.697 61.2192,268.052 62.6017,267.154

        #z0 = P(0, -0)
        #c0 = P(2.14203, 1.67358)
        #c1 = P(4.49598, 3.03283)
        #z1 = P(6.82597, 4.43265)
        #c2 = P(7.30268, 4.66513)
        #c3 = P(7.33382, 5.04564)
        #z2 = P(7.18709, 5.3342)
        #c4 = P(7.10692, 5.49186)
        #c5 = P(6.83607, 5.53304)
        #z3 = P(6.67283, 5.46494)
        #c6 = P(6.37633, 5.34125)
        #c7 = P(6.0092, 4.84289)
        #z4 = P(6.18446, 4.63404)
        #c8 = P(6.49198, 4.28021)
        #c9 = P(6.89363, 4.67536)
        #z5 = P(7.23956, 4.88315)
        #c10 = P(7.7531, 5.17948)
        #c11 = P(7.63192, 5.05425)
        z6 = P(8.11964, 5.37104)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.14203, 1.67358)
        #z1 = z0 + P(6.82597, 4.43265)
        #c1 = z1 + P(-2.32999, -1.39982)
        #c2 = z1 + P(0.476709, 0.232481)
        #z2 = z1 + P(0.36112, 0.901545)
        #c3 = z2 + P(0.146733, -0.288562)
        #c4 = z2 + P(-0.0801702, 0.15766)
        #z3 = z2 + P(-0.514259, 0.130743)
        #c5 = z3 + P(0.163237, 0.0681002)
        #c6 = z3 + P(-0.296496, -0.123694)
        #z4 = z3 + P(-0.488365, -0.830897)
        #c7 = z4 + P(-0.17526, 0.208844)
        #c8 = z4 + P(0.307516, -0.353836)
        #z5 = z4 + P(1.0551, 0.249107)
        #c9 = z5 + P(-0.345934, -0.207786)
        #c10 = z5 + P(0.513539, 0.296333)
        #z6 = z5 + P(0.880075, 0.487892)
        #c11 = z6 + P(-0.487715, -0.316794)

        z0 = P(0, -0)
        c0 = z0 + PP(2.7183, 38)
        z1 = z0 + PP(8.13893, 32)
        c1 = z1 + PP(2.71815, -149)
        c2 = z1 + PP(0.530376, 25)
        z2 = z1 + PP(0.97118, 68)
        c3 = z2 + PP(0.323726, -63)
        c4 = z2 + PP(0.176873, 116)
        z3 = z2 + PP(0.530619, 165)
        c5 = z3 + PP(0.176873, 22)
        c6 = z3 + PP(0.321263, -157)
        z4 = z3 + PP(0.96379, -120)
        c7 = z4 + PP(0.272639, 130)
        c8 = z4 + PP(0.468792, -49)
        z5 = z4 + PP(1.08411, 13)
        #z5 = z6 - PP(1.00627, ta + 355)
        c9 = z5 + PP(0.403541, -149)
        c10 = z5 + PP(0.592904, 29)
        z6 = z5 + PP(1.00627, 29)
        c11 = z6 + PP(0.581571, -146)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            #curve(),
            endknot(*z6)])

    def get_paths(self, **kwargs):
        if self.to_reverse():
            if self.tail_type.endswith('F'):
                self.head_type = 'NE'
                self.tail_type = 'NEF'
                self.model = 'NE8CL1NE1F'
                return [self.path_NECLNE()]

            self.head_type = 'NE'
            self.tail_type = 'NECL1'
            self.model = 'NE8CL1'
        else:
            if self.tail_type.endswith('F'):
                self.head_type = 'SW'
                self.tail_type = 'NEF'
                self.model = 'SW8CR1NE1F'
                return [self.path_SWCRNE()]

            self.head_type = 'SW'
            self.tail_type = 'SWCR1'
            self.model = 'SW8CR1'

        return super().get_paths()

class CharChin(CharChi):
    def __init__(self, name='chin', kana='„Å°„Çì',
                 model='NE8CL1NE1F|SW8CR1NE1F', head_type='NE|SW',
                 tail_type='NEF'):
        super().__init__(name=name, kana=kana, model=model,
            head_type=head_type, tail_type=tail_type)

    def get_paths(self, **kwargs):
        if self.to_reverse():
            self.head_type = 'NE'
            self.tail_type = 'NEF'
            self.model = 'NE8CL1NE1F'
            return [self.path_NECLNE()]
        else:
            self.head_type = 'SW'
            self.tail_type = 'NEF'
            self.model = 'SW8CR1NE1F'
            return [self.path_SWCRNE()]

class CharChiku(CharChi):
    def __init__(self, name='chiku', kana='„Å°„Åè',
                 model='BNE8CL1|BSW8CR1', head_type='BNE|BSW',
                 tail_type='BNECL1|BSWCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        def _get_paths(self):
            if self.to_reverse():
                if self.tail_type.endswith('F'):
                    self.head_type = 'BNE'
                    self.tail_type = 'NEF'
                    self.model = 'BNE8CL1NE1F'
                    return [self.path_NECLNE()]

                self.head_type = 'BNE'
                self.tail_type = 'NECL1'
                self.model = 'BNE8CL1'
            else:
                if self.tail_type.endswith('F'):
                    self.head_type = 'BSW'
                    self.tail_type = 'NEF'
                    self.model = 'BSW8CR1NE1F'
                    return [self.path_SWCRNE()]

                self.head_type = 'BSW'
                self.tail_type = 'SWCR1'
                self.model = 'BSW8CR1'

            return super().get_paths()

        if getattr(self.before, 'tail_type', '') in {'', 'P'}:
            return self.barb(_get_paths(self))
        else:
            return _get_paths(self)

    def set_next_head(self):
        if self.before and self.before.tail_type not in {'', 'P'}:
            self.head = self.before.tail - self.get_pos_xku()

        super().set_next_head()
