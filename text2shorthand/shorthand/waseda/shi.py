import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharShi(WasedaChar):
    def __init__(self, name='shi', kana='„Åó',
                 model='NEL8CL1|SWR8CR1', head_type='NEL|SWR',
                 tail_type='NELCL1|SWRCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_pos_nai(self):
        if self.paths:
            return P(*self.paths[-1].reversed().at(5.0))
        else:
            return P(0, 0)

    def get_pos_nakatta(self):
        return super().get_pos_nakatta() + P(-1, -1)

    def get_pos_teki(self):
        return super().get_pos_teki() + P(0.8, -0.2)

    def to_reverse(self):
        reverse = getattr(self.before, 'tail_type', '') in {
            'ER', 'ERCL1', 'ERCL4', 'E', 'ECL1', 'ECL4', 'ELCL4', 
            'NER', 'NE', 'NECL1', 'NECL4', 'NECL4', 'NELCL4'}
        reverse = reverse and getattr(self.before, 'model', '') not in {'ER4', 'ER8SWR4'}

        return reverse

    def get_paths(self, **kwargs):
        if self.to_reverse():
            self.model = 'SWR8CR1'
            self.head_type = 'SWR'
            self.tail_type = 'SWRCR1'
            self.head_ligature = {'ER', 'NER'}
            self.tail_ligature = {'ER', 'EL', 'E', 'NER', 'NE', 'NEL',
                'SW', 'S', 'SL', 'SR', 'SE', 'SER', 'SEL', 'SWR', 'SWL'}
        else:
            self.model = 'NEL8CL1'
            self.head_type = 'NEL'
            self.tail_type = 'NEL8CL1'
            self.head_ligature = {'SEL', 'SL', 'SWL'}
            self.tail_ligature = {'ER', 'E', 'EL', 'NE', 'NER', 'NEL',
                'SW', 'SWL', 'S', 'SL', 'SER', 'SEL'}

        return super(WasedaChar, self).get_paths()


    @classmethod
    def path_NELCL(cls, ta=-60, **kwargs):
        # M 0,0 C 5.73724,-3.31239 16.0698,-7.92047 16.0698,-14.4693 16.0698,-17.4719 12.452,-16.9097 13.3176,-15.4103 14.14035,-13.955434 14.8239,-12.778967 15.4516,-11.7142
        z0 = P(0, 0)
        c0 = z0 + PP(2.32835, 29)
        z1 = z0 + PP(7.59998, 41)
        c1 = z1 + PP(2.30165, -90)
        c2 = z1 + PP(1.05529, 90)
        z2 = z1 + PP(1.02226, 161)
        #z2 = z3 - PP(1.5, ta+1)
        c3 = z2 + PP(0.608489, 119)
        c4 = z2 + PP(0.587427, -60)
        z3 = z2 + PP(1.5, -59)
        c5 = z3 + PP(0.43441, 120)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            endknot(*z3)])

    @classmethod
    def path_NELCLser(cls, ta=-60, **kwargs):
        #M 97.069,247.82 C 102.841,244.62 113.328,240.21 113.328,233.686 113.328,230.695 107.56874,234.15424 109.82658,234.95475 111.01694,235.37679 111.69064,235.82861 112.70548,236.45952
        #
        #moveto(97.069, 247.82), 
        #curveto(102.841, 244.62, 113.328, 240.21, 113.328, 233.686), 
        #curveto(113.328, 230.695, 107.56874, 234.15424, 109.82658, 234.95475), 
        #curveto(111.01694, 235.37679, 111.69064, 235.82861, 112.70548, 236.45952)
        #z0 = P(0, -0)
        #c0 = P(2.02863, 1.12467)
        #c1 = P(5.71439, 2.67461)
        #z1 = P(5.71439, 4.96753)
        #c2 = P(5.71439, 6.01875)
        #c3 = P(3.69024, 4.80297)
        #z2 = P(4.48378, 4.52162)
        #c4 = P(4.90214, 4.37329)
        #c5 = P(5.13892, 4.21449)
        z3 = P(5.4956, 3.99275)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.02863, 1.12467)
        #z1 = z0 + P(5.71439, 4.96753)
        #c1 = z1 + P(0, -2.29292)
        #c2 = z1 + P(0, 1.05122)
        #z2 = z1 + P(-1.23061, -0.445915)
        #c3 = z2 + P(-0.79354, 0.281347)
        #c4 = z2 + P(0.418364, -0.14833)
        #z3 = z2 + P(1.01182, -0.528866)
        #c5 = z3 + P(-0.356676, 0.22174)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.31953, 29)
        z1 = z0 + PP(7.5717, 41)
        c1 = z1 + PP(2.29292, -90)
        c2 = z1 + PP(1.05122, 90)
        #z2 = z1 + PP(1.30891, -160)
        z2 = z3 - PP(1.1417, ta+5)
        c3 = z2 + PP(0.84194, 160)
        #c4 = z2 + PP(0.443881, -19)
        #z3 = z2 + PP(1.1417, -27)
        #c5 = z3 + PP(0.419983, 148)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NELCLsel(cls, ta=-90, **kwargs):
        #M 152.466,247.82 C 158.238,244.62 168.725,240.21 168.725,233.686 168.725,230.695 167.12682,230.71505 167.0723,232.43929 167.04865,234.10393 167.13047,236.81169 167.1138,238.04276
        #
        #moveto(152.466, 247.82), 
        #curveto(158.238, 244.62, 168.725, 240.21, 168.725, 233.686), 
        #curveto(168.725, 230.695, 167.12682, 230.71505, 167.0723, 232.43929), 
        #curveto(167.04865, 234.10393, 167.13047, 236.81169, 167.1138, 238.04276)
        #z0 = P(0, -0)
        #c0 = P(2.02863, 1.12467)
        #c1 = P(5.71439, 2.67461)
        #z1 = P(5.71439, 4.96753)
        #c2 = P(5.71439, 6.01875)
        #c3 = P(5.15269, 6.0117)
        #z2 = P(5.13353, 5.4057)
        #c4 = P(5.12522, 4.82065)
        #c5 = P(5.15397, 3.86898)
        z3 = P(5.14811, 3.43631)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.02863, 1.12467)
        #z1 = z0 + P(5.71439, 4.96753)
        #c1 = z1 + P(0, -2.29292)
        #c2 = z1 + P(0, 1.05122)
        #z2 = z1 + P(-0.580858, 0.438169)
        #c3 = z2 + P(0.0191616, 0.606001)
        #c4 = z2 + P(-0.00831203, -0.585054)
        #z3 = z2 + P(0.0145856, -1.96939)
        #c5 = z3 + P(0.00585884, 0.432672)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.31953, 29)
        z1 = z0 + PP(7.5717, 41)
        c1 = z1 + PP(2.29292, -90)
        c2 = z1 + PP(1.05122, 90)
        z2 = z1 + PP(0.72759, 142)
        c3 = z2 + PP(0.606304, 88)
        #c4 = z2 + PP(0.585113, -90)
        #z3 = z2 + PP(1.96945, -89)
        #c5 = z3 + PP(0.432711, 89)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_swlNELCLer(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCLe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCLel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCLne(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCLnel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCLsw(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCLswl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCLs(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCLsl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLer(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLne(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLnel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLsw(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLswl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLs(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCLsl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLer(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLne(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLnel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLsw(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLswl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLs(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCLsl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_elNELCL(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_swlNELCL(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_slNELCL(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_selNELCL(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NELCLer(cls, ta=None, **kwargs):
        #M 169.869,103.938 C 175.642,100.738 186.128,96.3284 186.128,89.804 186.128,86.8127 181.20371,91.254949 182.03971,92.763549 182.87271,94.205649 184.18141,93.141905 185.578,92.5053
        #
        #moveto(169.869, 103.938), 
        #curveto(175.642, 100.738, 186.128, 96.3284, 186.128, 89.804), 
        #curveto(186.128, 86.8127, 181.20371, 91.254949, 182.03971, 92.763549), 
        #curveto(182.87271, 94.205649, 184.18141, 93.141905, 185.578, 92.5053)
        #z0 = P(0, -0)
        #c0 = P(2.02898, 1.12467)
        #c1 = P(5.71439, 2.67447)
        #z1 = P(5.71439, 4.96753)
        #c2 = P(5.71439, 6.01886)
        #c3 = P(3.9837, 4.45758)
        #z2 = P(4.27752, 3.92737)
        #c4 = P(4.57028, 3.42053)
        #c5 = P(5.03024, 3.79439)
        z3 = P(5.52108, 4.01814)
        #
        #z0 = P(0, -0)
        #c0 = z0 + P(2.02898, 1.12467)
        #z1 = z0 + P(5.71439, 4.96753)
        #c1 = z1 + P(0, -2.29306)
        #c2 = z1 + P(0, 1.05132)
        #z2 = z1 + P(-1.43687, -1.04016)
        #c3 = z2 + P(-0.29382, 0.530212)
        #c4 = z2 + P(0.292766, -0.50684)
        #z3 = z2 + P(1.24357, 0.0907642)
        #c5 = z3 + P(-0.490845, -0.223741)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.31984, 28)
        z1 = z0 + PP(7.5717, 41)
        c1 = z1 + PP(2.29306, -90)
        c2 = z1 + PP(1.05132, 90)
        #z2 = z1 + PP(1.77385, -144)
        z2 = z3 - PP(1.24687, ta-21)
        c3 = z2 + PP(0.606181, 118)
        #c4 = z2 + PP(0.58532, -59)
        #z3 = z2 + PP(1.24687, 4)
        #c5 = z3 + PP(0.539434, -155)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NELCLe(cls, ta=None, **kwargs):
        # M 43.9043,-11.7142 C 49.6416,-15.0266 59.9742,-19.6347 59.9742,-26.1836 59.9742,-30.2431 51.472819,-24.702003 56.4563,-24.909523 57.5944,-24.956915 58.7325,-25.004308 59.8706,-25.0517
        #z0 = P(0, -0)
        #c0 = P(2.01643, 1.16418)
        #c1 = P(5.64793, 2.78374)
        #z1 = P(5.64793, 5.08541)
        #c2 = P(5.64793, 6.51216)
        #c3 = P(2.66003, 4.56469)
        #z2 = P(4.41152, 4.63763)
        #c4 = P(4.81152, 4.65428)
        #c5 = P(5.21152, 4.67094)
        z3 = P(5.61151, 4.6876)
        
        z0 = P(0, 0)
        c0 = z0 + PP(2.32837, 29)
        z1 = z0 + PP(7.60003, 41)
        c1 = z1 + PP(2.30168, -90)
        c2 = z1 + PP(1.42675, 90)
        #z2 = z1 + PP(1.31499, -160)
        z2 = z3 - PP(1.20103, 2)
        c3 = z2 + PP(1.75301, -177)
        #c4 = z2 + PP(0.400343, 2)
        #z3 = z2 + PP(1.20103, 2)
        #c5 = z3 + PP(0.400343, -177)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NELCLel(cls, ta=-30, **kwargs):
        #M 114.275,103.938 C 120.047,100.738 130.533,96.3284 130.533,89.804 130.533,88.309 128.50365,87.5329 127.3526,88.4227 125.94631,89.5094 127.78424,91.0864 130.0926,92.0673
        #
        #moveto(114.275, 103.938), 
        #curveto(120.047, 100.738, 130.533, 96.3284, 130.533, 89.804), 
        #curveto(130.533, 88.309, 128.50365, 87.5329, 127.3526, 88.4227), 
        #curveto(125.94631, 89.5094, 127.78424, 91.0864, 130.0926, 92.0673)
        #z0 = P(0, -0)
        #c0 = P(2.02863, 1.12467)
        #c1 = P(5.71403, 2.67447)
        #z1 = P(5.71403, 4.96753)
        #c2 = P(5.71403, 5.49297)
        #c3 = P(5.0008, 5.76573)
        #z2 = P(4.59625, 5.45301)
        #c4 = P(4.102, 5.07107)
        #c5 = P(4.74796, 4.51682)
        z3 = P(5.55925, 4.17207)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.02863, 1.12467)
        #z1 = z0 + P(5.71403, 4.96753)
        #c1 = z1 + P(0, -2.29306)
        #c2 = z1 + P(0, 0.525433)
        #z2 = z1 + P(-1.11778, 0.485472)
        #c3 = z2 + P(0.404548, 0.312729)
        #c4 = z2 + P(-0.494255, -0.381931)
        #z3 = z2 + P(0.963, -1.28093)
        #c5 = z3 + P(-0.811296, 0.344747)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.31953, 29)
        z1 = z0 + PP(7.57143, 41)
        c1 = z1 + PP(2.29306, -90)
        #c2 = z1 + PP(0.525433, 90)
        #z2 = z1 + PP(1.21866, 156)
        z2 = z3 - PP(1.60255, ta-29)
        #c3 = z2 + PP(0.51133, 37)
        #c4 = z2 + PP(0.624627, -142)
        #z3 = z2 + PP(1.60255, -53)
        #c5 = z3 + PP(0.881505, 156)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NELCLne(cls, ta=None, **kwargs):
        #M 269.117,103.938 C 274.868,100.75 285.558,96.6416 285.558,90.1419 285.558,89.049487 285.03933,88.375992 284.31433,88.356603 283.11568,88.324547 281.4267,90.204204 282.10332,91.194145 282.78267,92.18807 284.45436,90.938239 285.56397,90.160477

        #z0 = P(0, -0)
        #c0 = P(2.02882, 1.12466)
        #c1 = P(5.80002, 2.57401)
        #z1 = P(5.80002, 4.86696)
        #c2 = P(5.80002, 5.25234)
        #c3 = P(5.61704, 5.48993)
        #z2 = P(5.36128, 5.49677)
        #c4 = P(4.93842, 5.50808)
        #c5 = P(4.34259, 4.84498)
        #z3 = P(4.58129, 4.49575)
        #c6 = P(4.82094, 4.14511)
        #c7 = P(5.41068, 4.58603)
        z4 = P(5.80213, 4.8604)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.02882, 1.12466)
        #z1 = z0 + P(5.80002, 4.86696)
        #c1 = z1 + P(0, -2.29295)
        #c2 = z1 + P(0, 0.385379)
        #z2 = z1 + P(-0.438739, 0.629813)
        #c3 = z2 + P(0.255764, -0.00684001)
        #c4 = z2 + P(-0.422857, 0.0113086)
        #z3 = z2 + P(-0.779995, -1.00102)
        #c5 = z3 + P(-0.238697, 0.349229)
        #c6 = z3 + P(0.23966, -0.350635)
        #z4 = z3 + P(1.22084, 0.364655)
        #c7 = z4 + P(-0.391446, -0.274377)

        z0 = P(0, -0)
        c0 = z0 + PP(2.31969, 29)
        z1 = z0 + PP(7.57149, 40)
        c1 = z1 + PP(2.29295, -90)
        c2 = z1 + PP(0.385379, 90)
        z2 = z1 + PP(0.767565, 124)
        c3 = z2 + PP(0.255855, -1)
        c4 = z2 + PP(0.423008, 178)
        #z3 = z2 + PP(1.26903, -127)
        z3 = z4 - PP(1.27414, ta + 340)
        c5 = z3 + PP(0.42301, 124)
        #c6 = z3 + PP(0.424713, -55)
        #z4 = z3 + PP(1.27414, 16)
        #c7 = z4 + PP(0.47803, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NELCLnel(cls, ta=None, **kwargs):
        #M 100.688,149.198 C 106.46,145.998 116.947,141.589 116.947,135.065 116.947,132.073 112.56454,136.08941 112.97165,137.60906 113.26742,138.71311 115.05432,138.15236 116.397,137.766
        #
        #moveto(100.688, 149.198), 
        #curveto(106.46, 145.998, 116.947, 141.589, 116.947, 135.065), 
        #curveto(116.947, 132.073, 112.56454, 136.08941, 112.97165, 137.60906), 
        #curveto(113.26742, 138.71311, 115.05432, 138.15236, 116.397, 137.766)
        #z0 = P(0, -0)
        #c0 = P(2.02863, 1.12467)
        #c1 = P(5.71439, 2.67426)
        #z1 = P(5.71439, 4.96718)
        #c2 = P(5.71439, 6.01875)
        #c3 = P(4.17413, 4.60714)
        #z2 = P(4.31721, 4.07305)
        #c4 = P(4.42116, 3.68502)
        #c5 = P(5.04919, 3.8821)
        z3 = P(5.52108, 4.01789)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.02863, 1.12467)
        #z1 = z0 + P(5.71439, 4.96718)
        #c1 = z1 + P(0, -2.29292)
        #c2 = z1 + P(0, 1.05157)
        #z2 = z1 + P(-1.39718, -0.894135)
        #c3 = z2 + P(-0.143083, 0.534096)
        #c4 = z2 + P(0.103951, -0.388029)
        #z3 = z2 + P(1.20387, -0.0551581)
        #c5 = z3 + P(-0.471898, -0.13579)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.31953, 29)
        z1 = z0 + PP(7.57147, 40)
        c1 = z1 + PP(2.29292, -90)
        c2 = z1 + PP(1.05157, 90)
        #z2 = z1 + PP(1.65879, -147)
        z2 = z3 - PP(1.20514, ta-19)
        c3 = z2 + PP(0.55293, 104)
        #c4 = z2 + PP(0.401712, -75)
        #z3 = z2 + PP(1.20514, -2)
        #c5 = z3 + PP(0.491047, -163)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NELCLner(cls, ta=None, **kwargs):
        #M 8521.49,2.67458 C 8527.3,-0.412633 8537.93,-4.62159 8537.93,-11.1212 8537.93,-12.6116 8537.0062,-12.234212 8536.3706,-11.821975 8535.2137,-11.071703 8534.509,-9.4603165 8535.339,-8.4409065 8536.099,-7.5003965 8536.6,-7.21858 8537.14,-8.71472

        #z0 = P(0, -0)
        #c0 = P(2.04964, 1.0891)
        #c1 = P(5.79967, 2.57393)
        #z1 = P(5.79967, 4.86684)
        #c2 = P(5.79967, 5.39262)
        #c3 = P(5.47377, 5.25949)
        #z2 = P(5.24955, 5.11406)
        #c4 = P(4.84142, 4.84938)
        #c5 = P(4.59281, 4.28092)
        #z3 = P(4.88562, 3.9213)
        #c6 = P(5.15373, 3.58951)
        #c7 = P(5.33047, 3.49009)
        z4 = P(5.52097, 4.01789)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.04964, 1.0891)
        #z1 = z0 + P(5.79967, 4.86684)
        #c1 = z1 + P(0, -2.29292)
        #c2 = z1 + P(0, 0.52578)
        #z2 = z1 + P(-0.550122, 0.247218)
        #c3 = z2 + P(0.224226, 0.145428)
        #c4 = z2 + P(-0.408129, -0.264679)
        #z3 = z2 + P(-0.363926, -1.19277)
        #c5 = z3 + P(-0.292806, 0.359625)
        #c6 = z3 + P(0.268111, -0.331791)
        #z4 = z3 + P(0.635353, 0.0965953)
        #c7 = z4 + P(-0.1905, -0.527805)

        z0 = P(0, -0)
        c0 = z0 + PP(2.32103, 27)
        z1 = z0 + PP(7.57115, 40)
        c1 = z1 + PP(2.29292, -90)
        c2 = z1 + PP(0.52578, 90)
        z2 = z1 + PP(0.603117, 155)
        c3 = z2 + PP(0.267257, 32)
        c4 = z2 + PP(0.48644, -147)
        z3 = z2 + PP(1.24705, -106)
        #z3 = z4 - PP(0.642654, ta + 297)
        c5 = z3 + PP(0.463751, 129)
        #c6 = z3 + PP(0.426578, -51)
        #z4 = z3 + PP(0.642654, 8)
        #c7 = z4 + PP(0.561131, -109)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_NELCLsw(cls, ta=None, **kwargs):
        #M 7138.73,0 C 7144.49,-3.18785 7154.93,-7.58036 7154.93,-14.081 7154.6514,-16.013874 7150.5261,-8.0462353 7149.8862,-6.9073933

        #z0 = P(0, 0)
        #c0 = P(2.032, 1.1246)
        #c1 = P(5.715, 2.67418)
        #z1 = P(5.715, 4.96746)
        #c2 = P(5.61672, 5.64934)
        #c3 = P(4.1614, 2.83853)
        z2 = P(3.93566, 2.43677)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.032, 1.1246)
        #z1 = z0 + P(5.715, 4.96746)
        #c1 = z1 + P(0, -2.29328)
        #c2 = z1 + P(-0.0982839, 0.681875)
        #z2 = z1 + P(-1.77934, -2.53069)
        #c3 = z2 + P(0.225743, 0.401758)

        z0 = P(0, 0)
        c0 = z0 + PP(2.32245, 28)
        #z1 = z0 + PP(7.57211, 40)
        z1 = z2 - PP(3.09361, ta + -5)
        c1 = z1 + PP(2.29328, -90)
        #c2 = z1 + PP(0.688922, 98)
        #z2 = z1 + PP(3.09361, -125)
        #c3 = z2 + PP(0.460835, 60)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_NELCLswl(cls, ta=None, **kwargs):
        #M 518.991,714.124 C 525.378,713.565 536.05418,711.38519 536.954,704.971 537.48908,701.15678 536.67544,702.01384 535.59723,704.08468 534.51901,706.15552 533.17622,709.44013 532.653,710.481

        #z0 = P(0, -0)
        #c0 = P(2.25319, 0.197203)
        #c1 = P(6.01951, 0.966191)
        #z1 = P(6.33695, 3.22898)
        #c2 = P(6.52571, 4.57455)
        #c3 = P(6.23868, 4.2722)
        #z2 = P(5.85831, 3.54165)
        #c4 = P(5.47794, 2.8111)
        #c5 = P(5.00423, 1.65237)
        z3 = P(4.81965, 1.28517)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.25319, 0.197203)
        #z1 = z0 + P(6.33695, 3.22898)
        #c1 = z1 + P(-0.317436, -2.26278)
        #c2 = z1 + P(0.188764, 1.34557)
        #z2 = z1 + P(-0.478638, 0.312674)
        #c3 = z2 + P(0.380369, 0.730546)
        #c4 = z2 + P(-0.380372, -0.730546)
        #z3 = z2 + P(-1.03866, -2.25648)
        #c5 = z3 + P(0.18458, 0.367196)

        z0 = P(0, -0)
        c0 = z0 + PP(2.2618, 5)
        z1 = z0 + PP(7.11219, 27)
        c1 = z1 + PP(2.28494, -97)
        c2 = z1 + PP(1.35875, 82)
        #z2 = z1 + PP(0.571716, 146)
        z2 = z3 - PP(2.48405, ta + 3)
        c3 = z2 + PP(0.823637, 62)
        #c4 = z2 + PP(0.823639, -117)
        #z3 = z2 + PP(2.48405, -114)
        #c5 = z3 + PP(0.410978, 63)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NELCLs(cls, ta=None, **kwargs):
        #M 47.3414,179.882 C 53.1139,176.682 63.6003,172.273 63.6003,165.748 63.6003,162.757 61.59065,165.07053 61.679066,166.3261 61.76624,167.56401 62.072118,168.65204 62.071429,169.90033
        #
        #moveto(47.3414, 179.882), 
        #curveto(53.1139, 176.682, 63.6003, 172.273, 63.6003, 165.748), 
        #curveto(63.6003, 162.757, 61.59065, 165.07053, 61.679066, 166.3261), 
        #curveto(61.76624, 167.56401, 62.072118, 168.65204, 62.071429, 169.90033)
        #z0 = P(0, -0)
        #c0 = P(2.0288, 1.12467)
        #c1 = P(5.71435, 2.67426)
        #z1 = P(5.71435, 4.96753)
        #c2 = P(5.71435, 6.01875)
        #c3 = P(5.00804, 5.20564)
        #z2 = P(5.03911, 4.76435)
        #c4 = P(5.06975, 4.32928)
        #c5 = P(5.17726, 3.94688)
        z3 = P(5.17701, 3.50816)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.0288, 1.12467)
        #z1 = z0 + P(5.71435, 4.96753)
        #c1 = z1 + P(0, -2.29328)
        #c2 = z1 + P(0, 1.05122)
        #z2 = z1 + P(-0.675237, -0.203179)
        #c3 = z2 + P(-0.0310747, 0.441282)
        #c4 = z2 + P(0.0306382, -0.435076)
        #z3 = z2 + P(0.1379, -1.2562)
        #c5 = z3 + P(0.000242156, 0.438724)
        
        z0 = P(0, 0)
        c0 = z0 + PP(2.31968, 29)
        z1 = z0 + PP(7.57167, 41)
        c1 = z1 + PP(2.29328, -90)
        c2 = z1 + PP(1.05122, 90)
        #z2 = z1 + PP(0.705143, -163)
        z2 = z3 - PP(1.26374, ta+6)
        c3 = z2 + PP(0.442375, 94)
        #c4 = z2 + PP(0.436153, -85)
        #z3 = z2 + PP(1.26374, -83)
        #c5 = z3 + PP(0.438724, 89)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NELCLsl(cls, ta=None, **kwargs):
        #M 105.573,179.882 C 111.345,176.682 121.832,172.273 121.832,165.748 121.25757,162.06455 119.56834,167.10208 119.21992,168.00936
        #
        #moveto(105.573, 179.882), 
        #curveto(111.345, 176.682, 121.832, 172.273, 121.832, 165.748), 
        #curveto(121.25757, 162.06455, 119.56834, 167.10208, 119.21992, 168.00936)
        #z0 = P(0, -0)
        #c0 = P(2.02863, 1.12467)
        #c1 = P(5.71439, 2.67426)
        #z1 = P(5.71439, 4.96753)
        #c2 = P(5.5125, 6.26212)
        #c3 = P(4.9188, 4.49163)
        #z2 = P(4.79634, 4.17276)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.02863, 1.12467)
        #z1 = z0 + P(5.71439, 4.96753)
        #c1 = z1 + P(0, -2.29328)
        #c2 = z1 + P(-0.201889, 1.29458)
        #z2 = z1 + P(-0.918041, -0.794777)
        #c3 = z2 + P(0.122456, 0.318873)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.31953, 29)
        z1 = z0 + PP(7.5717, 41)
        #z1 = z2 - PP(1.21428, -139)
        c1 = z1 + PP(2.29328, -90)
        #c2 = z1 + PP(1.31023, 98)
        z2 = z1 + PP(1.21428, -139) + P(0.2, 0)
        #c3 = z2 + PP(0.341577, 68)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_erSWRCRer(cls, ta=None, **kwargs):
        #M 283.52,318.14 C 288.355,323.903 278.06471,336.73792 274.4833,336.04524 272.24057,335.61148 278.4329,332.57615 280.75788,331.50655

        #z0 = P(0, -0)
        #c0 = P(1.70568, -2.03306)
        #c1 = P(-1.92451, -6.56093)
        #z1 = P(-3.18795, -6.31657)
        #c2 = P(-3.97913, -6.16355)
        #c3 = P(-1.79462, -5.09275)
        z2 = P(-0.974415, -4.71542)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.70568, -2.03306)
        #z1 = z0 + P(-3.18795, -6.31657)
        #c1 = z1 + P(1.26344, -0.244362)
        #c2 = z1 + P(-0.791185, 0.153021)
        #z2 = z1 + P(2.21353, 1.60115)
        #c3 = z2 + P(-0.820201, -0.377331)

        z0 = P(0, -0)
        c0 = z0 + PP(2.6538, -50)
        #z1 = z0 + PP(7.07546, -116)
        z1 = z2 - PP(2.73192, ta + 370)
        c1 = z1 + PP(1.28686, -10)
        #c2 = z1 + PP(0.805847, 169)
        #z2 = z1 + PP(2.73192, 35)
        #c3 = z2 + PP(0.902834, -155)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_erSWRCRe(cls, ta=None, **kwargs):
        #M 218.463,318.14 C 223.298,323.903 212.456,335.585 207.73,334.667 203.021,333.666 210.79759,332.32625 213.38039,332.32625

        #z0 = P(0, -0)
        #c0 = P(1.70568, -2.03306)
        #c1 = P(-2.11914, -6.15421)
        #z1 = P(-3.78636, -5.83036)
        #c2 = P(-5.44759, -5.47723)
        #c3 = P(-2.70419, -5.00459)
        z2 = P(-1.79303, -5.00459)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.70568, -2.03306)
        #z1 = z0 + P(-3.78636, -5.83036)
        #c1 = z1 + P(1.66723, -0.32385)
        #c2 = z1 + P(-1.66123, 0.353131)
        #z2 = z1 + P(1.99333, 0.825765)
        #c3 = z2 + P(-0.911154, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.6538, -50)
        #z1 = z0 + PP(6.95195, -123)
        z1 = z2 - PP(2.15761, ta + 22)
        c1 = z1 + PP(1.69839, -10)
        #c2 = z1 + PP(1.69835, 167)
        #z2 = z1 + PP(2.15761, 22)
        #c3 = z2 + PP(0.911154, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_erSWRCRner(cls, ta=None, **kwargs):
        #M 127.259,382.638 C 132.095,388.4 124.20021,400.2528 122.49798,401.33527 120.46687,402.62688 120.64069,401.84173 121.67413,400.52171 122.70758,399.20169 124.60064,397.3468 126.008,396.49891

        #z0 = P(0, -0)
        #c0 = P(1.70603, -2.03271)
        #c1 = P(-1.07907, -6.21411)
        #z1 = P(-1.67958, -6.59598)
        #c2 = P(-2.39611, -7.05163)
        #c3 = P(-2.33479, -6.77465)
        #z2 = P(-1.97022, -6.30898)
        #c4 = P(-1.60564, -5.8433)
        #c5 = P(-0.93781, -5.18894)
        z3 = P(-0.441325, -4.88982)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.70603, -2.03271)
        #z1 = z0 + P(-1.67958, -6.59598)
        #c1 = z1 + P(0.600509, 0.381871)
        #c2 = z1 + P(-0.71653, -0.455651)
        #z2 = z1 + P(-0.290636, 0.287006)
        #c3 = z2 + P(-0.364575, -0.465674)
        #c4 = z2 + P(0.364578, 0.465674)
        #z3 = z2 + P(1.52889, 1.41915)
        #c5 = z3 + P(-0.496485, -0.299117)

        z0 = P(0, -0)
        c0 = z0 + PP(2.65376, -49)
        z1 = z0 + PP(6.80647, -104)
        c1 = z1 + PP(0.711644, 32)
        c2 = z1 + PP(0.849137, -147)
        #z2 = z1 + PP(0.408463, 135)
        z2 = z3 - PP(2.08603, ta + 10)
        c3 = z2 + PP(0.591411, -128)
        c4 = z2 + PP(0.591413, 51)
        z3 = z2 + PP(2.08603, 42)
        c5 = z3 + PP(0.579628, -148)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_erSWRCRne(cls, ta=None, **kwargs):
        #M 146.056,370.996 C 150.9,376.191 145.79408,392.02753 141.51937,391.642 139.86072,391.49241 142.617,389.402 145.514,387.448

        #z0 = P(0, -0)
        #c0 = P(1.70886, -1.83268)
        #c1 = P(-0.0923996, -7.41946)
        #z1 = P(-1.60042, -7.28345)
        #c2 = P(-2.18556, -7.23068)
        #c3 = P(-1.2132, -6.49323)
        z2 = P(-0.191206, -5.8039)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.70886, -1.83268)
        #z1 = z0 + P(-1.60042, -7.28345)
        #c1 = z1 + P(1.50802, -0.136006)
        #c2 = z1 + P(-0.585135, 0.052772)
        #z2 = z1 + P(1.40922, 1.47955)
        #c3 = z2 + P(-1.022, -0.689328)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50577, -47)
        #z1 = z0 + PP(7.45721, -102)
        z1 = z2 - PP(2.04327, ta + 372)
        c1 = z1 + PP(1.51414, -5)
        #c2 = z1 + PP(0.58751, 174)
        #z2 = z1 + PP(2.04327, 46)
        #c3 = z2 + PP(1.23274, -146)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_erSWRCRnel(cls, ta=None, **kwargs):
        #M 499.977,318.14 C 504.77174,323.66135 493.97,335.585 489.244,334.667 484.535,333.666 491.86718,332.95372 494.78775,332.35718

        #z0 = P(0, -0)
        #c0 = P(1.69148, -1.94781)
        #c1 = P(-2.11914, -6.15421)
        #z1 = P(-3.78636, -5.83036)
        #c2 = P(-5.44759, -5.47723)
        #c3 = P(-2.86096, -5.22595)
        z2 = P(-1.83065, -5.01551)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.69148, -1.94781)
        #z1 = z0 + P(-3.78636, -5.83036)
        #c1 = z1 + P(1.66723, -0.32385)
        #c2 = z1 + P(-1.66123, 0.353131)
        #z2 = z1 + P(1.95571, 0.814853)
        #c3 = z2 + P(-1.03031, -0.210446)

        z0 = P(0, -0)
        c0 = z0 + PP(2.57974, -49)
        #z1 = z0 + PP(6.95195, -123)
        z1 = z2 - PP(2.11868, ta + 370)
        c1 = z1 + PP(1.69839, -10)
        #c2 = z1 + PP(1.69835, 167)
        #z2 = z1 + PP(2.11868, 22)
        #c3 = z2 + PP(1.05158, -168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_erSWRCRsw(cls, ta=None, **kwargs):
        #M 420.063,318.14 C 424.898,323.903 414.056,335.585 409.33,334.667 406.9755,334.1665 410.19739,331.36663 411.31349,331.74285 412.22272,332.04934 411.58524,333.36707 411.15748,334.61712

        #z0 = P(0, -0)
        #c0 = P(1.70568, -2.03306)
        #c1 = P(-2.11914, -6.15421)
        #z1 = P(-3.78636, -5.83036)
        #c2 = P(-4.61698, -5.65379)
        #c3 = P(-3.48037, -4.66606)
        #z2 = P(-3.08663, -4.79878)
        #c4 = P(-2.76588, -4.90691)
        #c5 = P(-2.99077, -5.37177)
        z3 = P(-3.14167, -5.81276)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.70568, -2.03306)
        #z1 = z0 + P(-3.78636, -5.83036)
        #c1 = z1 + P(1.66723, -0.32385)
        #c2 = z1 + P(-0.830615, 0.176565)
        #z2 = z1 + P(0.699731, 1.03158)
        #c3 = z2 + P(-0.393735, 0.132722)
        #c4 = z2 + P(0.320756, -0.108123)
        #z3 = z2 + P(-0.0550369, -1.01398)
        #c5 = z3 + P(0.150904, 0.44099)

        z0 = P(0, -0)
        c0 = z0 + PP(2.6538, -50)
        z1 = z0 + PP(6.95195, -123)
        c1 = z1 + PP(1.69839, -10)
        c2 = z1 + PP(0.849174, 167)
        #z2 = z1 + PP(1.2465, 55)
        z2 = z3 - PP(1.01547, ta + 16)
        c3 = z2 + PP(0.415503, 161)
        #c4 = z2 + PP(0.338489, -18)
        #z3 = z2 + PP(1.01547, -93)
        #c5 = z3 + PP(0.466095, 71)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSWRCRer(cls, ta=None, **kwargs):
        #M 167.104,1050.03 C 170.60936,1052.8994 160.33566,1072.1953 157.5671,1070.3748 156.8701,1069.9165 160.66497,1067.0709 162.26243,1066.2238

        #z0 = P(0, -0)
        #c0 = P(1.23661, -1.01226)
        #c1 = P(-2.38772, -7.81943)
        #z1 = P(-3.36441, -7.17719)
        #c2 = P(-3.61029, -7.01552)
        #c3 = P(-2.27155, -6.01165)
        z2 = P(-1.708, -5.71281)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.23661, -1.01226)
        #z1 = z0 + P(-3.36441, -7.17719)
        #c1 = z1 + P(0.976686, -0.642232)
        #c2 = z1 + P(-0.245886, 0.161678)
        #z2 = z1 + P(1.65641, 1.46438)
        #c3 = z2 + P(-0.563548, -0.298838)

        z0 = P(0, -0)
        c0 = z0 + PP(1.59809, -39)
        z1 = z0 + PP(7.92662, -115)
        #z1 = z2 - PP(2.2109, ta + 373)
        c1 = z1 + PP(1.16892, -33)
        #c2 = z1 + PP(0.294278, 146)
        #z2 = z1 + PP(2.2109, 41)
        #c3 = z2 + PP(0.63788, -152)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_nerSWRCRe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_nerSWRCRner(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_nerSWRCRne(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_nerSWRCRnel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_nerSWRCRsw(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_erSWRCRsr(cls, ta=None, **kwargs):
        #M 337.238,318.14 C 341.66338,323.3754 332.842,337.779 325.9,337.779 323.292,337.779 324.18315,335.96779 324.813,335.338 325.81522,334.33587 327.8693,335.82736 328.697,337.068

        #z0 = P(0, -0)
        #c0 = P(1.56118, -1.84693)
        #c1 = P(-1.55081, -6.9282)
        #z1 = P(-3.99979, -6.9282)
        #c2 = P(-4.91984, -6.9282)
        #c3 = P(-4.60546, -6.28925)
        #z2 = P(-4.38326, -6.06707)
        #c4 = P(-4.0297, -5.71354)
        #c5 = P(-3.30507, -6.23971)
        z3 = P(-3.01307, -6.67738)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.56118, -1.84693)
        #z1 = z0 + P(-3.99979, -6.9282)
        #c1 = z1 + P(2.44898, 0)
        #c2 = z1 + P(-0.920044, 0)
        #z2 = z1 + P(-0.383469, 0.861131)
        #c3 = z2 + P(-0.222197, -0.222176)
        #c4 = z2 + P(0.353561, 0.353529)
        #z3 = z2 + P(1.37019, -0.610306)
        #c5 = z3 + P(-0.291994, 0.43767)

        z0 = P(0, -0)
        c0 = z0 + PP(2.41835, -49)
        z1 = z0 + PP(7.9999, -119)
        c1 = z1 + PP(2.44898, 0)
        c2 = z1 + PP(0.920044, 180)
        #z2 = z1 + PP(0.942653, 114)
        z2 = z3 - PP(1.49996, ta + 33)
        c3 = z2 + PP(0.314219, -135)
        #c4 = z2 + PP(0.499988, 44)
        #z3 = z2 + PP(1.49996, -24)
        #c5 = z3 + PP(0.526133, 123)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_erSWRCR(cls, ta=None, **kwargs):
        #M 123.332,318.14 C 128.09747,323.96031 117.15843,335.51006 112.439,334.561 107.71957,333.61194 113.47147,331.66915 115.59134,333.63197

        #z0 = P(0, -0)
        #c0 = P(1.68115, -2.05328)
        #c1 = P(-2.1779, -6.12777)
        #z1 = P(-3.84281, -5.79296)
        #c2 = P(-5.50772, -5.45816)
        #c3 = P(-3.47858, -4.77278)
        z2 = P(-2.73073, -5.46522)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.68115, -2.05328)
        #z1 = z0 + P(-3.84281, -5.79296)
        #c1 = z1 + P(1.66491, -0.334807)
        #c2 = z1 + P(-1.66491, 0.334807)
        #z2 = z1 + P(1.11208, 0.327741)
        #c3 = z2 + P(-0.747843, 0.692439)

        z0 = P(0, -0)
        c0 = z0 + PP(2.65372, -50)
        z1 = z0 + PP(6.95166, -123)
        #z1 = z2 - PP(1.15936, ta + 59)
        c1 = z1 + PP(1.69824, -11)
        c2 = z1 + PP(1.69824, 168)
        z2 = z1 + PP(1.15936, 16)
        c3 = z2 + PP(1.01919, 137)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            #curve(),
            endknot(*z2)])

    @classmethod
    def path_nerSWRCR(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_erSWRCRel(cls, ta=None, **kwargs):
        #M 165.453,318.14 C 169.78301,323.89751 158.8905,337.779 154.115,337.779 149.3395,337.779 151.7238,334.86393 153.028,335.338 154.3322,335.81207 155.637,336.446 156.912,337.068

        #z0 = P(0, -0)
        #c0 = P(1.52753, -2.03112)
        #c1 = P(-2.3151, -6.9282)
        #z1 = P(-3.99979, -6.9282)
        #c2 = P(-5.68448, -6.9282)
        #c3 = P(-4.84336, -5.89983)
        #z2 = P(-4.38326, -6.06707)
        #c4 = P(-3.92317, -6.23431)
        #c5 = P(-3.46287, -6.45795)
        z3 = P(-3.01307, -6.67738)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.52753, -2.03112)
        #z1 = z0 + P(-3.99979, -6.9282)
        #c1 = z1 + P(1.68469, 0)
        #c2 = z1 + P(-1.68469, 0)
        #z2 = z1 + P(-0.383469, 0.861131)
        #c3 = z2 + P(-0.460093, 0.167241)
        #c4 = z2 + P(0.460093, -0.167241)
        #z3 = z2 + P(1.37019, -0.610306)
        #c5 = z3 + P(-0.449792, 0.219428)

        z0 = P(0, -0)
        c0 = z0 + PP(2.54142, -53)
        z1 = z0 + PP(7.9999, -119)
        c1 = z1 + PP(1.68469, 0)
        c2 = z1 + PP(1.68469, 180)
        #z2 = z1 + PP(0.942653, 114)
        z2 = z3 - PP(1.49996, ta + 3)
        c3 = z2 + PP(0.489546, 160)
        #c4 = z2 + PP(0.489546, -19)
        #z3 = z2 + PP(1.49996, -24)
        #c5 = z3 + PP(0.500461, 153)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRer(cls, ta=30, **kwargs):
        #M 189.155,435.45 C 189.155,443.421 184.776,455.015 177.859,455.015 175.42287,454.55066 180.35545,451.88497 181.294,451.335
        #z0 = P(0, -0)
        #c0 = P(0, -2.80149)
        #c1 = P(-1.53904, -6.87631)
        #z1 = P(-3.97009, -6.87631)
        #c2 = P(-4.82629, -6.71312)
        #c3 = P(-3.09269, -5.77623)
        z2 = P(-2.76283, -5.58294)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.80149)
        #z1 = z0 + P(-3.97009, -6.87631)
        #c1 = z1 + P(2.43105, 0)
        #c2 = z1 + P(-0.856202, 0.163197)
        #z2 = z1 + P(1.20726, 1.29337)
        #c3 = z2 + P(-0.329863, -0.193292)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.80149, -90)
        #z1 = z0 + PP(7.94011, -120)
        z1 = z2 - PP(1.1, ta+11)
        c1 = z1 + PP(2.43105, 0)
        #c2 = z1 + PP(0.871616, 169)
        #z2 = z1 + PP(1.76927, 46)
        #c3 = z2 + PP(0.382324, -149)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_SWRCRel(cls, ta=None, **kwargs):
        #M 135.181,429.356 C 135.181,437.357 130.785,448.995 123.843,448.995 121.235,448.995 122.27606,446.12539 123.05931,446.59733 124.09642,447.22223 125.365,447.661 126.64,448.283
        #
        #moveto(135.181, 429.356), 
        #curveto(135.181, 437.357, 130.785, 448.995, 123.843, 448.995), 
        #curveto(121.235, 448.995, 122.27606, 446.12539, 123.05931, 446.59733), 
        #curveto(124.09642, 447.22223, 125.365, 447.661, 126.64, 448.283)
        #z0 = P(0, -0)
        #c0 = P(0, -2.81203)
        #c1 = P(-1.54502, -6.90232)
        #z1 = P(-3.98485, -6.90232)
        #c2 = P(-4.90146, -6.90232)
        #c3 = P(-4.53557, -5.89377)
        #z2 = P(-4.26029, -6.05964)
        #c4 = P(-3.89579, -6.27926)
        #c5 = P(-3.44993, -6.43347)
        z3 = P(-3.00182, -6.65208)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81203)
        #z1 = z0 + P(-3.98485, -6.90232)
        #c1 = z1 + P(2.43983, 0)
        #c2 = z1 + P(-0.916607, 0)
        #z2 = z1 + P(-0.275436, 0.842685)
        #c3 = z2 + P(-0.275281, 0.165868)
        #c4 = z2 + P(0.364503, -0.219627)
        #z3 = z2 + P(1.25847, -0.592445)
        #c5 = z3 + P(-0.448111, 0.218608)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81203, -90)
        z1 = z0 + PP(7.97001, -119)
        c1 = z1 + PP(2.43983, 0)
        c2 = z1 + PP(0.916607, 180)
        #z2 = z1 + PP(0.886557, 108)
        z2 = z3 - PP(1.39095, ta-2)
        c3 = z2 + PP(0.32139, 148)
        #c4 = z2 + PP(0.425556, -31)
        #z3 = z2 + PP(1.39095, -25)
        #c5 = z3 + PP(0.498591, 153)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRe(cls, ta=None, **kwargs):
        #M 70.0186,429.356 C 70.0186,437.357 65.6228,448.995 58.68,448.995 56.0723,448.995 56.70292,446.75722 57.5931,446.72732 58.42639,446.69933 60.072608,446.75105 61.564162,446.76642
        #
        #moveto(70.0186, 429.356), 
        #curveto(70.0186, 437.357, 65.6228, 448.995, 58.68, 448.995), 
        #curveto(56.0723, 448.995, 56.70292, 446.75722, 57.5931, 446.72732), 
        #curveto(58.42639, 446.69933, 60.072608, 446.75105, 61.564162, 446.76642)
        #z0 = P(0, -0)
        #c0 = P(0, -2.81203)
        #c1 = P(-1.54495, -6.90232)
        #z1 = P(-3.98506, -6.90232)
        #c2 = P(-4.90156, -6.90232)
        #c3 = P(-4.67993, -6.11583)
        #z2 = P(-4.36706, -6.10532)
        #c4 = P(-4.0742, -6.09548)
        #c5 = P(-3.49562, -6.11366)
        z3 = P(-2.9714, -6.11906)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81203)
        #z1 = z0 + P(-3.98506, -6.90232)
        #c1 = z1 + P(2.44012, 0)
        #c2 = z1 + P(-0.916502, 0)
        #z2 = z1 + P(-0.382002, 0.796999)
        #c3 = z2 + P(-0.312863, -0.0105087)
        #c4 = z2 + P(0.292868, 0.00983736)
        #z3 = z2 + P(1.39567, -0.0137421)
        #c5 = z3 + P(-0.524221, 0.00540194)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81203, -90)
        z1 = z0 + PP(7.97012, -120)
        c1 = z1 + PP(2.44012, 0)
        c2 = z1 + PP(0.916502, 180)
        #z2 = z1 + PP(0.883817, 115)
        z2 = z3 - PP(1.39574, ta)
        c3 = z2 + PP(0.313039, -178)
        #c4 = z2 + PP(0.293033, 1)
        #z3 = z2 + PP(1.39574, 0)
        #c5 = z3 + PP(0.524249, 179)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRner(cls, ta=None, **kwargs):
        #M 172.835,504.976 C 172.835,512.977 170.02541,524.615 165.58796,524.615 163.92112,524.615 163.25757,524.36401 164.00993,523.88726 164.77229,523.40418 164.60213,523.34326 165.95877,522.52062
        
        #z0 = P(0, -0)
        #c0 = P(0, -2.81203)
        #c1 = P(-0.987458, -6.90232)
        #z1 = P(-2.54704, -6.90232)
        #c2 = P(-3.13287, -6.90232)
        #c3 = P(-3.36608, -6.81411)
        #z2 = P(-3.10166, -6.64655)
        #c4 = P(-2.83372, -6.47677)
        #c5 = P(-2.89352, -6.45535)
        z3 = P(-2.41672, -6.16623)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81203)
        #z1 = z0 + P(-2.54704, -6.90232)
        #c1 = z1 + P(1.55959, 0)
        #c2 = z1 + P(-0.585827, 0)
        #z2 = z1 + P(-0.554614, 0.255771)
        #c3 = z2 + P(-0.264424, -0.167558)
        #c4 = z2 + P(0.267939, 0.169783)
        #z3 = z2 + P(0.684939, 0.480319)
        #c5 = z3 + P(-0.476805, -0.289125)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81203, -90)
        z1 = z0 + PP(7.35727, -110)
        c1 = z1 + PP(1.55959, 0)
        c2 = z1 + PP(0.585827, 180)
        #z2 = z1 + PP(0.61075, 155)
        z2 = z3 - PP(0.836569, ta+3)
        c3 = z2 + PP(0.313043, -147)
        #c4 = z2 + PP(0.317203, 32)
        #z3 = z2 + PP(0.836569, 35)
        #c5 = z3 + PP(0.557616, -148)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRne(cls, ta=None, **kwargs):
        #M 247.151,208.864 C 248.124,216.787 245.70182,228.05296 240.98103,229.21193 238.30494,229.86892 242.23206,226.09608 245.196,224.097

        #z0 = P(0, -0)
        #c0 = P(0.343253, -2.79506)
        #c1 = P(-0.511239, -6.76944)
        #z1 = P(-2.17663, -7.1783)
        #c2 = P(-3.12069, -7.41007)
        #c3 = P(-1.73529, -6.07909)
        z2 = P(-0.689681, -5.37386)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.343253, -2.79506)
        #z1 = z0 + P(-2.17663, -7.1783)
        #c1 = z1 + P(1.66539, 0.408859)
        #c2 = z1 + P(-0.944065, -0.231771)
        #z2 = z1 + P(1.48695, 1.80443)
        #c3 = z2 + P(-1.04561, -0.705231)

        z0 = P(0, -0)
        c0 = z0 + PP(2.81606, -82)
        #z1 = z0 + PP(7.50104, -106)
        z1 = z2 - PP(2.33816, ta + 376)
        c1 = z1 + PP(1.71484, 13)
        #c2 = z1 + PP(0.972099, -166)
        #z2 = z1 + PP(2.33816, 50)
        #c3 = z2 + PP(1.26121, -146)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_SWRCRnel(cls, ta=None, **kwargs):
        #M 19400.1,0.652492 C 19400.1,8.6236 19394.6,20.1452 19390.2,20.1452 19387.6,20.1452 19387.979,19.138962 19388.842,18.920453 19390.055,18.613105 19392.419,18.206755 19394.19,17.364286

        #z0 = P(0, -0)
        #c0 = P(0, -2.81203)
        #c1 = P(-1.94028, -6.87659)
        #z1 = P(-3.4925, -6.87659)
        #c2 = P(-4.40972, -6.87659)
        #c3 = P(-4.27602, -6.52162)
        #z2 = P(-3.97157, -6.44453)
        #c4 = P(-3.54365, -6.33611)
        #c5 = P(-2.70969, -6.19275)
        z3 = P(-2.08492, -5.89555)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81203)
        #z1 = z0 + P(-3.4925, -6.87659)
        #c1 = z1 + P(1.55222, 0)
        #c2 = z1 + P(-0.917222, 0)
        #z2 = z1 + P(-0.479072, 0.432064)
        #c3 = z2 + P(-0.304447, -0.0770851)
        #c4 = z2 + P(0.427919, 0.108426)
        #z3 = z2 + P(1.88666, 0.548981)
        #c5 = z3 + P(-0.624769, -0.297204)

        z0 = P(0, -0)
        c0 = z0 + PP(2.81203, -90)
        z1 = z0 + PP(7.71266, -116)
        c1 = z1 + PP(1.55222, 0)
        c2 = z1 + PP(0.917222, 180)
        #z2 = z1 + PP(0.645127, 137)
        z2 = z3 - PP(1.9649, ta + 350)
        c3 = z2 + PP(0.314054, -165)
        #c4 = z2 + PP(0.441442, 14)
        #z3 = z2 + PP(1.9649, 16)
        #c5 = z3 + PP(0.691858, -154)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRsw(cls, ta=None, **kwargs):
        #M 275.987,233.2512 C 275.987,241.2232 271.608,252.8172 264.691,252.8172 262.093,252.8172 265.77533,249.19112 267.0986,249.5148 267.91971,249.71564 268.022,250.5262 267.478,252.0222

        #z0 = P(0, -0)
        #c0 = P(0, -2.81234)
        #c1 = P(-1.54481, -6.90245)
        #z1 = P(-3.98498, -6.90245)
        #c2 = P(-4.90149, -6.90245)
        #c3 = P(-3.60245, -5.62325)
        #z2 = P(-3.13563, -5.73744)
        #c4 = P(-2.84596, -5.80829)
        #c5 = P(-2.80988, -6.09424)
        z3 = P(-3.00179, -6.62199)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81234)
        #z1 = z0 + P(-3.98498, -6.90245)
        #c1 = z1 + P(2.44016, 0)
        #c2 = z1 + P(-0.916517, 0)
        #z2 = z1 + P(0.849348, 1.16501)
        #c3 = z2 + P(-0.46682, 0.114187)
        #c4 = z2 + P(0.289669, -0.0708519)
        #z3 = z2 + P(0.133844, -0.884555)
        #c5 = z3 + P(0.191911, 0.527756)

        z0 = P(0, -0)
        c0 = z0 + PP(2.81234, -90)
        z1 = z0 + PP(7.97019, -119)
        c1 = z1 + PP(2.44016, 0)
        c2 = z1 + PP(0.916517, 180)
        #z2 = z1 + PP(1.44175, 53)
        z2 = z3 - PP(0.894624, ta + 29)
        c3 = z2 + PP(0.480583, 166)
        #c4 = z2 + PP(0.298209, -13)
        #z3 = z2 + PP(0.894624, -81)
        #c5 = z3 + PP(0.561565, 70)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])
        
    @classmethod
    def path_SWRCRswr(cls, ta=None, **kwargs):
        #M 122.799,756.887 C 122.799,764.889 118.403,776.526 111.461,776.526 108.853,776.526 111.44005,774.03046 112.36721,773.82502 113.26055,773.62706 114.02294,774.23972 114.258,775.815
        
        #z0 = P(0, -0)
        #c0 = P(0, -2.81238)
        #c1 = P(-1.54502, -6.90232)
        #z1 = P(-3.98485, -6.90232)
        #c2 = P(-4.90146, -6.90232)
        #c3 = P(-3.99222, -6.02524)
        #z2 = P(-3.66636, -5.95303)
        #c4 = P(-3.35238, -5.88346)
        #c5 = P(-3.08443, -6.09878)
        z3 = P(-3.00182, -6.65243)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81238)
        #z1 = z0 + P(-3.98485, -6.90232)
        #c1 = z1 + P(2.43983, 0)
        #c2 = z1 + P(-0.916607, 0)
        #z2 = z1 + P(0.318496, 0.949286)
        #c3 = z2 + P(-0.32586, -0.0722039)
        #c4 = z2 + P(0.313973, 0.069575)
        #z3 = z2 + P(0.664537, -0.699398)
        #c5 = z3 + P(-0.0826142, 0.553648)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81238, -90)
        z1 = z0 + PP(7.97001, -119)
        c1 = z1 + PP(2.43983, 0)
        c2 = z1 + PP(0.916607, 180)
        #z2 = z1 + PP(1.00129, 71)
        z2 = z3 - PP(0.964763, ta+36)
        c3 = z2 + PP(0.333763, -167)
        #c4 = z2 + PP(0.32159, 12)
        #z3 = z2 + PP(0.964763, -46)
        #c5 = z3 + PP(0.559778, 98)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])
    
    @classmethod
    def path_SWRCRswl(cls, ta=None, **kwargs):
        #M 365.557,232.892 C 365.557,240.893 361.161,252.531 354.218,252.531 351.611,252.531 356.02834,248.93834 357.29921,249.57775 357.97189,249.91619 358.47415,251.10377 357.016,251.819

        #z0 = P(0, -0)
        #c0 = P(0, -2.82258)
        #c1 = P(-1.55081, -6.9282)
        #z1 = P(-4.00015, -6.9282)
        #c2 = P(-4.91984, -6.9282)
        #c3 = P(-3.3615, -5.66079)
        #z2 = P(-2.91316, -5.88636)
        #c4 = P(-2.67586, -6.00576)
        #c5 = P(-2.49867, -6.42471)
        z3 = P(-3.01307, -6.67702)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.82258)
        #z1 = z0 + P(-4.00015, -6.9282)
        #c1 = z1 + P(2.44934, 0)
        #c2 = z1 + P(-0.919692, 0)
        #z2 = z1 + P(1.08698, 1.04184)
        #c3 = z2 + P(-0.448335, 0.22557)
        #c4 = z2 + P(0.237307, -0.119394)
        #z3 = z2 + P(-0.0999102, -0.790663)
        #c5 = z3 + P(0.514403, 0.252317)

        z0 = P(0, -0)
        c0 = z0 + PP(2.82258, -90)
        z1 = z0 + PP(8.00007, -120)
        c1 = z1 + PP(2.44934, 0)
        c2 = z1 + PP(0.919692, 180)
        #z2 = z1 + PP(1.50564, 43)
        z2 = z3 - PP(0.796951, ta + 57)
        c3 = z2 + PP(0.501882, 153)
        #c4 = z2 + PP(0.265649, -26)
        #z3 = z2 + PP(0.796951, -97)
        #c5 = z3 + PP(0.572952, 26)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRse(cls, ta=None, **kwargs):
        #M 70.0186,664.317 C 70.0186,672.318 63.606965,687.42222 58.112059,683.17858 56.048185,681.58468 58.875257,678.75417 59.611064,679.75823 60.204023,680.56735 60.999121,682.23016 61.627961,683.5017
        #z0 = P(0, -0)
        #c0 = P(0, -2.81203)
        #c1 = P(-2.25343, -8.12056)
        #z1 = P(-4.18467, -6.62909)
        #c2 = P(-4.91004, -6.0689)
        #c3 = P(-3.91644, -5.07409)
        #z2 = P(-3.65783, -5.42697)
        #c4 = P(-3.44943, -5.71135)
        #c5 = P(-3.16998, -6.29576)
        z3 = P(-2.94897, -6.74265)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81203)
        #z1 = z0 + P(-4.18467, -6.62909)
        #c1 = z1 + P(1.93124, -1.49147)
        #c2 = z1 + P(-0.725369, 0.560192)
        #z2 = z1 + P(0.52684, 1.20212)
        #c3 = z2 + P(-0.258607, 0.352887)
        #c4 = z2 + P(0.208401, -0.284373)
        #z3 = z2 + P(0.708858, -1.31568)
        #c5 = z3 + P(-0.221012, 0.446895)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81203, -90)
        z1 = z0 + PP(7.83941, -122)
        c1 = z1 + PP(2.44012, -37)
        c2 = z1 + PP(0.916502, 142)
        #z2 = z1 + PP(1.31249, 66)
        z2 = z3 - PP(1.49449, ta-3)
        c3 = z2 + PP(0.4375, 126)
        #c4 = z2 + PP(0.352561, -53)
        #z3 = z2 + PP(1.49449, -61)
        #c5 = z3 + PP(0.49856, 116)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRser(cls, ta=None, **kwargs):
        #M118.173 664.317C118.173 672.318 113.777 683.956 106.835 683.956C104.227 683.956 104.481 681.028 105.748 681.514C107.089 681.976 108.357 682.622 109.632 683.244
        #
        #z0 = P(0, -0)
        #c0 = P(0, -2.81203)
        #c1 = P(-1.54502, -6.90232)
        #z1 = P(-3.98485, -6.90232)
        #c2 = P(-4.90146, -6.90232)
        #c3 = P(-4.81219, -5.87325)
        #z2 = P(-4.36689, -6.04406)
        #c4 = P(-3.89558, -6.20643)
        #c5 = P(-3.44993, -6.43347)
        z3 = P(-3.00182, -6.65208)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81203)
        #z1 = z0 + P(-3.98485, -6.90232)
        #c1 = z1 + P(2.43983, 0)
        #c2 = z1 + P(-0.916607, 0)
        #z2 = z1 + P(-0.382037, 0.858265)
        #c3 = z2 + P(-0.4453, 0.170809)
        #c4 = z2 + P(0.471308, -0.162374)
        #z3 = z2 + P(1.36507, -0.608026)
        #c5 = z3 + P(-0.448111, 0.218608)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81203, -90)
        z1 = z0 + PP(7.97001, -119)
        c1 = z1 + PP(2.43983, 0)
        c2 = z1 + PP(0.916607, 180)
        #z2 = z1 + PP(0.939453, 113)
        z2 = z3 - PP(1.49436, ta+3)
        c3 = z2 + PP(0.476936, 159)
        #c4 = z2 + PP(0.498494, -19)
        #z3 = z2 + PP(1.49436, -24)
        #c5 = z3 + PP(0.498591, 153)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRsel(cls, ta=None, **kwargs):
        #M 171.997,664.317 C 171.997,672.318 167.601,683.956 160.659,683.956 158.051,683.956 161.54044,679.03852 163.22945,679.43235 164.48591,679.72532 163.43572,681.87771 163.45602,683.2962
        #
        #z0 = P(0, -0)
        #c0 = P(0, -2.81203)
        #c1 = P(-1.54502, -6.90232)
        #z1 = P(-3.98485, -6.90232)
        #c2 = P(-4.90146, -6.90232)
        #c3 = P(-3.67506, -5.17402)
        #z2 = P(-3.08144, -5.31244)
        #c4 = P(-2.63985, -5.41541)
        #c5 = P(-3.00895, -6.17188)
        z3 = P(-3.00181, -6.67043)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81203)
        #z1 = z0 + P(-3.98485, -6.90232)
        #c1 = z1 + P(2.43983, 0)
        #c2 = z1 + P(-0.916607, 0)
        #z2 = z1 + P(0.90341, 1.58988)
        #c3 = z2 + P(-0.593619, 0.138415)
        #c4 = z2 + P(0.441595, -0.102967)
        #z3 = z2 + P(0.0796303, -1.35799)
        #c5 = z3 + P(-0.00713464, 0.498542)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81203, -90)
        z1 = z0 + PP(7.97001, -119)
        c1 = z1 + PP(2.43983, 0)
        c2 = z1 + PP(0.916607, 180)
        #z2 = z1 + PP(1.82863, 60)
        z2 = z3 - PP(1.36032, ta+4)
        c3 = z2 + PP(0.609543, 166)
        #c4 = z2 + PP(0.453441, -13)
        #z3 = z2 + PP(1.36032, -86)
        #c5 = z3 + PP(0.498593, 90)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRsl(cls, ta=None, **kwargs):
        #M 126.709,569.012 C 126.709,576.984 124.55,588.474 117.634,588.474 115.035,588.474 118.693,584.066 120.021,584.714 121.728,585.547 118.58262,587.04048 117.85562,588.29948
        #z0 = P(0, -0)
        #c0 = P(0, -2.80184)
        #c1 = P(-0.758802, -6.84011)
        #z1 = P(-3.1895, -6.84011)
        #c2 = P(-4.10294, -6.84011)
        #c3 = P(-2.8173, -5.29088)
        #z2 = P(-2.35056, -5.51862)
        #c4 = P(-1.75062, -5.81139)
        #c5 = P(-2.8561, -6.33629)
        z3 = P(-3.11161, -6.77878)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.80184)
        #z1 = z0 + P(-3.1895, -6.84011)
        #c1 = z1 + P(2.4307, 0)
        #c2 = z1 + P(-0.913444, 0)
        #z2 = z1 + P(0.838935, 1.32149)
        #c3 = z2 + P(-0.466739, 0.227746)
        #c4 = z2 + P(0.599942, -0.292766)
        #z3 = z2 + P(-0.761044, -1.26015)
        #c5 = z3 + P(0.255511, 0.442488)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.80184, -90)
        z1 = z0 + PP(7.54719, -114)
        c1 = z1 + PP(2.4307, 0)
        c2 = z1 + PP(0.913444, 180)
        z2 = z1 + PP(1.56529, 57)
        c3 = z2 + PP(0.519339, 153)
        c4 = z2 + PP(0.667565, -26)
        z3 = z2 + PP(1.47213, -121)
        c5 = z3 + PP(0.510962, 59)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3 ,angle=ta)])
    
    @classmethod
    def path_SWRCRsr(cls,ta=None, **kwargs):
        #M 183.336,566.019 C 183.336,574.021 178.94,585.658 171.997,585.658 169.389,585.658 170.0211,583.27353 170.91,583.217 172.09795,583.14145 174.04669,583.76407 174.795,584.947
        #z0 = P(0, -0)
        #c0 = P(0, -2.81238)
        #c1 = P(-1.54502, -6.90232)
        #z1 = P(-3.9852, -6.90232)
        #c2 = P(-4.90181, -6.90232)
        #c3 = P(-4.67965, -6.06427)
        #z2 = P(-4.36724, -6.04441)
        #c4 = P(-3.94972, -6.01785)
        #c5 = P(-3.26482, -6.23668)
        z3 = P(-3.00182, -6.65243)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81238)
        #z1 = z0 + P(-3.9852, -6.90232)
        #c1 = z1 + P(2.44019, 0)
        #c2 = z1 + P(-0.916607, 0)
        #z2 = z1 + P(-0.382037, 0.857914)
        #c3 = z2 + P(-0.312413, -0.019868)
        #c4 = z2 + P(0.417517, 0.0265528)
        #z3 = z2 + P(1.36542, -0.608026)
        #c5 = z3 + P(-0.263001, 0.415752)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81238, -90)
        z1 = z0 + PP(7.97019, -120)
        c1 = z1 + PP(2.44019, 0)
        c2 = z1 + PP(0.916607, 180)
        z2 = z1 + PP(0.939131, 114)
        c3 = z2 + PP(0.313044, -176)
        #c4 = z2 + PP(0.41836, 3)
        #z3 = z2 + PP(1.49468, -24)
        #c5 = z3 + PP(0.491955, 122)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCRs(cls, ta=None, **kwargs):
        #M 70.0186,566.019 C 70.0186,574.021 65.6228,585.658 58.68,585.658 56.505608,585.658 58.641065,582.11474 59.850912,582.21052 60.930792,582.29601 60.423865,583.66517 60.398843,585.41377
        #
        #moveto(70.0186, 566.019), 
        #curveto(70.0186, 574.021, 65.6228, 585.658, 58.68, 585.658), 
        #curveto(56.505608, 585.658, 58.641065, 582.11474, 59.850912, 582.21052), 
        #curveto(60.930792, 582.29601, 60.423865, 583.66517, 60.398843, 585.41377)
        #z0 = P(0, -0)
        #c0 = P(0, -2.81238)
        #c1 = P(-1.54495, -6.90232)
        #z1 = P(-3.98506, -6.90232)
        #c2 = P(-4.74927, -6.90232)
        #c3 = P(-3.99875, -5.65701)
        #z2 = P(-3.57353, -5.69067)
        #c4 = P(-3.194, -5.72072)
        #c5 = P(-3.37216, -6.20192)
        z3 = P(-3.38096, -6.81648)
        #
        #z0 = P(0, -0)
        #c0 = z0 + P(0, -2.81238)
        #z1 = z0 + P(-3.98506, -6.90232)
        #c1 = z1 + P(2.44012, 0)
        #c2 = z1 + P(-0.764212, 0)
        #z2 = z1 + P(0.411529, 1.21165)
        #c3 = z2 + P(-0.425213, 0.0336628)
        #c4 = z2 + P(0.379534, -0.0300463)
        #z3 = z2 + P(0.192576, -1.12581)
        #c5 = z3 + P(0.00879423, 0.614563)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.81238, -90)
        z1 = z0 + PP(7.97012, -120)
        c1 = z1 + PP(2.44012, 0)
        c2 = z1 + PP(0.764212, 180)
        z2 = z1 + PP(1.27963, 71)
        #z2 = z3 - PP(1.14217, -80)
        c3 = z2 + PP(0.426543, 175)
        #c4 = z2 + PP(0.380722, -4)
        #z3 = z2 + PP(1.14217, -80)
        #c5 = z3 + PP(0.614626, 89)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWRCR(cls, ta=None, **kwargs):
        # M 82.6328 -25.0517C 82.6328 -17.0204 78.2205 -5.3391 71.2517 -5.3391C 68.6342 -5.3391 68.8539 -8.24277 70.1332 -7.77714C 71.4717 -7.28999 72.7216 -6.59757 74.0013 -5.97345
        z0 = P(0, -0)
        c0 = z0 + PP(2.82268, -90)
        z1 = z0 + PP(7.99999, -120)
        c1 = z1 + PP(2.44925, 0)
        c2 = z1 + PP(0.919946, 180)
        z2 = z1 + PP(0.942744, 114)
        c3 = z2 + PP(0.478479, 159)
        c4 = z2 + PP(0.500617, -19)
        z3 = z2 + PP(1.50002, -24)
        c5 = z3 + PP(0.500403, 154)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            endknot(*z3)])

    @classmethod
    def path_selNELCL(cls, ta=None, **kwargs):
        #M 63.3542,923.606 C 69.953936,923.606 79.6131,915.997 79.6131,909.473 79.6131,906.481 76.037,907.021 76.8733,908.529 77.7058,909.971 78.4475,911.108 79.0632,912.174

        #z0 = P(0, -0)
        #c0 = P(2.32824, -0)
        #c1 = P(5.73578, 2.68429)
        #z1 = P(5.73578, 4.98581)
        #c2 = P(5.73578, 6.04132)
        #c3 = P(4.47421, 5.85082)
        #z2 = P(4.76924, 5.31883)
        #c4 = P(5.06293, 4.81012)
        #c5 = P(5.32458, 4.40902)
        z3 = P(5.54179, 4.03296)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.32824, 0)
        #z1 = z0 + P(5.73578, 4.98581)
        #c1 = z1 + P(0, -2.30152)
        #c2 = z1 + P(0, 1.05551)
        #z2 = z1 + P(-0.966541, 0.333022)
        #c3 = z2 + P(-0.295028, 0.531989)
        #c4 = z2 + P(0.293687, -0.508706)
        #z3 = z2 + P(0.772548, -1.28587)
        #c5 = z3 + P(-0.217205, 0.376061)

        z0 = P(0, -0)
        c0 = z0 + PP(2.32824, 0)
        z1 = z0 + PP(7.59983, 40)
        c1 = z1 + PP(2.30152, -90)
        c2 = z1 + PP(1.05551, 90)
        z2 = z1 + PP(1.0223, 160)
        #z2 = z3 - PP(1.5001, ta + 1)
        c3 = z2 + PP(0.60832, 119)
        c4 = z2 + PP(0.587396, -60)
        #z3 = z2 + PP(1.5001, -59)
        c5 = z3 + PP(0.434281, 120)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_NELCLNE(cls, ta=None, **kwargs):
        #M 269.117,103.938 C 274.868,100.75 285.558,96.6416 285.558,90.1419 285.558,89.049487 285.03933,88.375992 284.31433,88.356603 283.11568,88.324547 281.4267,90.204204 282.10332,91.194145 282.78267,92.18807 284.45436,90.938239 285.56397,90.160477 287.22902,88.993386 287.80732,88.475277 289.44777,87.346099

        #z0 = P(0, -0)
        #c0 = P(2.02882, 1.12466)
        #c1 = P(5.80002, 2.57401)
        #z1 = P(5.80002, 4.86696)
        #c2 = P(5.80002, 5.25234)
        #c3 = P(5.61704, 5.48993)
        #z2 = P(5.36128, 5.49677)
        #c4 = P(4.93842, 5.50808)
        #c5 = P(4.34259, 4.84498)
        #z3 = P(4.58129, 4.49575)
        #c6 = P(4.82094, 4.14511)
        #c7 = P(5.41068, 4.58603)
        #z4 = P(5.80213, 4.8604)
        #c8 = P(6.38952, 5.27213)
        #c9 = P(6.59353, 5.45491)
        z5 = P(7.17224, 5.85325)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.02882, 1.12466)
        #z1 = z0 + P(5.80002, 4.86696)
        #c1 = z1 + P(0, -2.29295)
        #c2 = z1 + P(0, 0.385379)
        #z2 = z1 + P(-0.438739, 0.629813)
        #c3 = z2 + P(0.255764, -0.00684001)
        #c4 = z2 + P(-0.422857, 0.0113086)
        #z3 = z2 + P(-0.779995, -1.00102)
        #c5 = z3 + P(-0.238697, 0.349229)
        #c6 = z3 + P(0.23966, -0.350635)
        #z4 = z3 + P(1.22084, 0.364655)
        #c7 = z4 + P(-0.391446, -0.274377)
        #c8 = z4 + P(0.587393, 0.411724)
        #z5 = z4 + P(1.37012, 0.99285)
        #c9 = z5 + P(-0.578714, -0.398349)

        z0 = P(0, -0)
        c0 = z0 + PP(2.31969, 29)
        z1 = z0 + PP(7.57149, 40)
        c1 = z1 + PP(2.29295, -90)
        c2 = z1 + PP(0.385379, 90)
        z2 = z1 + PP(0.767565, 124)
        c3 = z2 + PP(0.255855, -1)
        c4 = z2 + PP(0.423008, 178)
        z3 = z2 + PP(1.26903, -127)
        c5 = z3 + PP(0.42301, 124)
        c6 = z3 + PP(0.424713, -55)
        z4 = z3 + PP(1.27414, 16)
        #z4 = z5 - PP(1.69203, ta + 360)
        c7 = z4 + PP(0.47803, -144)
        c8 = z4 + PP(0.717319, 35)
        #z5 = z4 + PP(1.69203, 35)
        c9 = z5 + PP(0.702561, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_SWRCRNE(cls, ta=None, **kwargs):
        #M 70.0186,233.056 C 70.9913,240.978 69.608276,252.625 63.93478,252.625 61.561775,252.625 65.596523,250.38114 68.495642,248.37555 70.628188,246.90027 71.930063,246.03083 73.369677,245.16138

        #z0 = P(0, -0)
        #c0 = P(0.343147, -2.79471)
        #c1 = P(-0.144753, -6.90351)
        #z1 = P(-2.14624, -6.90351)
        #c2 = P(-2.98338, -6.90351)
        #c3 = P(-1.56001, -6.11192)
        #z2 = P(-0.537266, -5.4044)
        #c4 = P(0.215049, -4.88395)
        #c5 = P(0.674322, -4.57723)
        z3 = P(1.18219, -4.27051)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.343147, -2.79471)
        #z1 = z0 + P(-2.14624, -6.90351)
        #c1 = z1 + P(2.00148, 0)
        #c2 = z1 + P(-0.837143, 0)
        #z2 = z1 + P(1.60897, 1.49911)
        #c3 = z2 + P(-1.02274, -0.707528)
        #c4 = z2 + P(0.752315, 0.520446)
        #z3 = z2 + P(1.71945, 1.13389)
        #c5 = z3 + P(-0.507864, -0.306723)

        z0 = P(0, -0)
        c0 = z0 + PP(2.81569, -82)
        z1 = z0 + PP(7.22944, -107)
        c1 = z1 + PP(2.00148, 0)
        c2 = z1 + PP(0.837143, 180)
        z2 = z1 + PP(2.19912, 42)
        #z2 = z3 - PP(2.05966, ta + 361)
        c3 = z2 + PP(1.24362, -145)
        c4 = z2 + PP(0.91479, 34)
        #z3 = z2 + PP(2.05966, 33)
        c5 = z3 + PP(0.5933, -148)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])
    
    @classmethod
    def path_erSWRCRs(cls, ta=None, **kwargs):
        #M 378.65,318.14 C 382.93429,323.52409 374.255,337.779 367.312,337.779 364.704,337.779 366.75474,334.57708 367.85342,334.52379 368.86264,334.47484 368.62934,335.92509 368.6378,337.45176

        #z0 = P(0, -0)
        #c0 = P(1.5114, -1.89939)
        #c1 = P(-1.55046, -6.9282)
        #z1 = P(-3.99979, -6.9282)
        #c2 = P(-4.91984, -6.9282)
        #c3 = P(-4.19638, -5.79864)
        #z2 = P(-3.80879, -5.77984)
        #c4 = P(-3.45276, -5.76257)
        #c5 = P(-3.53507, -6.27418)
        z3 = P(-3.53208, -6.81276)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.5114, -1.89939)
        #z1 = z0 + P(-3.99979, -6.9282)
        #c1 = z1 + P(2.44934, 0)
        #c2 = z1 + P(-0.920044, 0)
        #z2 = z1 + P(0.191001, 1.14837)
        #c3 = z2 + P(-0.38759, -0.0187995)
        #c4 = z2 + P(0.35603, 0.0172685)
        #z3 = z2 + P(0.276712, -1.03292)
        #c5 = z3 + P(-0.0029845, 0.538575)

        z0 = P(0, -0)
        c0 = z0 + PP(2.42735, -51)
        z1 = z0 + PP(7.9999, -119)
        c1 = z1 + PP(2.44934, 0)
        c2 = z1 + PP(0.920044, 180)
        #z2 = z1 + PP(1.16414, 80)
        z2 = z3 - PP(1.06935, ta + 15)
        c3 = z2 + PP(0.388046, -177)
        #c4 = z2 + PP(0.356449, 2)
        #z3 = z2 + PP(1.06935, -75)
        #c5 = z3 + PP(0.538584, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_erSWRCRsl(cls, ta=None, **kwargs):
        #M 458.564,318.14 C 463.36247,323.97161 454.169,337.779 447.226,337.779 444.618,337.779 447.63755,334.68502 448.64115,334.97899 449.49448,335.22894 450.12967,334.94869 448.36974,337.6327

        #z0 = P(0, -0)
        #c0 = P(1.69279, -2.05726)
        #c1 = P(-1.55046, -6.9282)
        #z1 = P(-3.99979, -6.9282)
        #c2 = P(-4.91984, -6.9282)
        #c3 = P(-3.85461, -5.83672)
        #z2 = P(-3.50056, -5.94042)
        #c4 = P(-3.19953, -6.0286)
        #c5 = P(-2.97544, -5.92973)
        z3 = P(-3.59631, -6.87659)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.69279, -2.05726)
        #z1 = z0 + P(-3.99979, -6.9282)
        #c1 = z1 + P(2.44934, 0)
        #c2 = z1 + P(-0.920044, 0)
        #z2 = z1 + P(0.499233, 0.987781)
        #c3 = z2 + P(-0.354048, 0.103706)
        #c4 = z2 + P(0.301036, -0.0881768)
        #z3 = z2 + P(-0.0957474, -0.93617)
        #c5 = z3 + P(0.620864, 0.946859)

        z0 = P(0, -0)
        c0 = z0 + PP(2.66418, -50)
        z1 = z0 + PP(7.9999, -119)
        c1 = z1 + PP(2.44934, 0)
        c2 = z1 + PP(0.920044, 180)
        #z2 = z1 + PP(1.10677, 63)
        z2 = z3 - PP(0.941053, ta + 29)
        c3 = z2 + PP(0.368924, 163)
        #c4 = z2 + PP(0.313684, -16)
        #z3 = z2 + PP(0.941053, -95)
        #c5 = z3 + PP(1.13226, 56)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

class CharShin(CharShi):
    def __init__(self, name='shin', kana='„Åó„Çì',
                 model='NEL8CL1|SWR8CR1', head_type='NEL|SWR',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        if self.to_reverse():
            self.head_type = 'SWR'
            self.tail_type = 'NEF' 

            return [self.path_SWRCRNE()]

        else:
            self.head_type = 'NEL'
            self.tail_type = 'NEF'

            return [self.path_NELCLNE()]
