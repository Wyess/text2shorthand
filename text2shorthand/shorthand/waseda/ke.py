from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import math
import pyx
from pyx.metapost.path import (
    beginknot,
    endknot,
    knot,
    smoothknot,
    tensioncurve, 
    controlcurve,
    curve,
    path as mpath)


class CharKe(WasedaChar):
    def __init__(self, name='ke', kana='„Åë',
                 model='E16CL1', head_type='E', tail_type='ECL1'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_ECL(cls, ta=None, **kwargs):
        # M 0 0C 14.2166 -0.745062 28.4625 -0.745062 42.6791 0C 43.4471 0.0402461 44.0599 -0.615998 44.0875 -1.40834C 44.1237 -2.44848 43.1222 -3.05931 42.5053 -2.54169C 41.6318 -1.80873 40.824 -1.0009 40.091 -0.127392
        #
        #moveto(0, 0), 
        #curveto(14.2166, -0.745062, 28.4625, -0.745062, 42.6791, 0), 
        #curveto(43.4471, 0.0402461, 44.0599, -0.615998, 44.0875, -1.40834), 
        #curveto(44.1237, -2.44848, 43.1222, -3.05931, 42.5053, -2.54169), 
        #curveto(41.6318, -1.80873, 40.824, -1.0009, 40.091, -0.127392)
        z0 = P(0, 0)
        c0 = P(4.99656, 0.261859)
        c1 = P(10.0034, 0.261859)
        z1 = P(15, 0)
        c2 = P(15.2699, -0.0141449)
        c3 = P(15.4853, 0.216499)
        z2 = P(15.495, 0.494975)
        c4 = P(15.5077, 0.860542)
        c5 = P(15.1557, 1.07522)
        z3 = P(14.9389, 0.893302)
        c6 = P(14.6319, 0.635696)
        c7 = P(14.348, 0.351776)
        z4 = P(14.0904, 0.0447732)
        #
        #z0 = P(0, 0)
        #c0 = z0 + P(4.99656, 0.261859)
        #z1 = z0 + P(15, 0)
        #c1 = z1 + P(-4.99656, 0.261859)
        #c2 = z1 + P(0.269921, -0.0141449)
        #z2 = z1 + P(0.494996, 0.494975)
        #c3 = z2 + P(-0.00970029, -0.278476)
        #c4 = z2 + P(0.0127228, 0.365567)
        #z3 = z2 + P(-0.55608, 0.398327)
        #c5 = z3 + P(0.216816, 0.181923)
        #c6 = z3 + P(-0.307, -0.257606)
        #z4 = z3 + P(-0.84853, -0.848529)
        #c7 = z4 + P(0.25762, 0.307003)
        #
        #z0 = P(0, 0)
        #c0 = z0 + PP(5.00342, 3)
        #z1 = z0 + PP(15, 0)
        #c1 = z1 + PP(5.00342, 176)
        #c2 = z1 + PP(0.270292, -2)
        #z2 = z1 + PP(0.700015, 44)
        #c3 = z2 + PP(0.278645, -91)
        #c4 = z2 + PP(0.365789, 88)
        #z3 = z2 + PP(0.684024, 144)
        #c5 = z3 + PP(0.283028, 39)
        #c6 = z3 + PP(0.400762, -139)
        #z4 = z3 + PP(1.2, -135)
        #c7 = z4 + PP(0.400773, 49)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            endknot(*z4)])

    @classmethod
    def path_ECLsw(cls, ta=None, **kwargs):
        #M 47.070032,189.99693 C 61.232932,189.25493 75.441032,189.00793 89.589732,189.99693 90.333932,190.03593 90.91057,189.37492 90.992632,188.59393 91.05967,187.95592 90.337489,187.46308 89.669096,187.69439 88.808889,187.99208 88.402471,188.98332 88.091571,189.83732

        #z0 = P(0, -0)
        #c0 = P(4.99636, 0.261761)
        #c1 = P(10.0087, 0.348897)
        #z1 = P(15, -0)
        #c2 = P(15.2625, -0.0137583)
        #c3 = P(15.466, 0.219431)
        #z2 = P(15.4949, 0.494947)
        #c4 = P(15.5186, 0.720023)
        #c5 = P(15.2638, 0.893886)
        #z3 = P(15.028, 0.812285)
        #c6 = P(14.7245, 0.707267)
        #c7 = P(14.5812, 0.357579)
        z4 = P(14.4715, 0.0563069)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.99636, 0.261761)
        #z1 = z0 + P(15, 0)
        #c1 = z1 + P(-4.99135, 0.348897)
        #c2 = z1 + P(0.262537, -0.0137583)
        #z2 = z1 + P(0.494912, 0.494947)
        #c3 = z2 + P(-0.0289496, -0.275516)
        #c4 = z2 + P(0.0236495, 0.225076)
        #z3 = z2 + P(-0.466914, 0.317338)
        #c5 = z3 + P(0.235794, 0.081601)
        #c6 = z3 + P(-0.303462, -0.105018)
        #z4 = z3 + P(-0.556516, -0.755978)
        #c7 = z4 + P(0.109679, 0.301272)

        z0 = P(0, -0)
        c0 = z0 + PP(5.00321, 2)
        z1 = z0 + PP(15, 0)
        c1 = z1 + PP(5.00353, 176)
        c2 = z1 + PP(0.262897, -2)
        z2 = z1 + PP(0.699936, 45)
        c3 = z2 + PP(0.277033, -95)
        c4 = z2 + PP(0.226315, 84)
        #z3 = z2 + PP(0.564546, 145)
        z3 = z4 - PP(0.938729, ta + -15)
        c5 = z3 + PP(0.249515, 19)
        #c6 = z3 + PP(0.32112, -160)
        #z4 = z3 + PP(0.938729, -126)
        #c7 = z4 + PP(0.320616, 69)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLswr(cls, ta=None, **kwargs):
        # M 618.445 100.041C 632.662 99.296 646.908 99.296 661.124 100.041C 661.881 100.081 662.469 99.4206 662.533 98.6327C 662.744 96.0036 659.477 96.6209 660.01 98.0863C 660.238 98.7113 660.41 99.3551 660.526 100.01
        #
        #moveto(618.445, 100.041), 
        #curveto(632.662, 99.296, 646.908, 99.296, 661.124, 100.041), 
        #curveto(661.881, 100.081, 662.469, 99.4206, 662.533, 98.6327), 
        #curveto(662.744, 96.0036, 659.477, 96.6209, 660.01, 98.0863), 
        #curveto(660.238, 98.7113, 660.41, 99.3551, 660.526, 100.01)
        #z0 = P(0, -0)
        #c0 = P(4.99671, 0.261838)
        #c1 = P(10.0036, 0.261838)
        #z1 = P(15, -0)
        #c2 = P(15.266, -0.0140584)
        #c3 = P(15.4727, 0.218046)
        #z2 = P(15.4952, 0.494961)
        #c4 = P(15.5693, 1.41898)
        #c5 = P(14.4211, 1.20203)
        #z3 = P(14.6084, 0.686999)
        #c6 = P(14.6886, 0.467336)
        #c7 = P(14.749, 0.241066)
        z4 = P(14.7898, 0.0108953)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(4.99671, 0.261838)
        #z1 = z0 + P(15, 0)
        #c1 = z1 + P(-4.99635, 0.261838)
        #c2 = z1 + P(0.266055, -0.0140584)
        #z2 = z1 + P(0.495207, 0.494961)
        #c3 = z2 + P(-0.0224934, -0.276915)
        #c4 = z2 + P(0.074158, 0.924023)
        #z3 = z2 + P(-0.886733, 0.192038)
        #c5 = z3 + P(-0.187328, 0.515029)
        #c6 = z3 + P(0.0801329, -0.219662)
        #z4 = z3 + P(0.181353, -0.676103)
        #c7 = z4 + P(-0.0407693, 0.230171)
        
        z0 = P(0, -0)
        c0 = z0 + PP(5.00356, 2)
        z1 = z0 + PP(15, 0)
        c1 = z1 + PP(5.00321, 177)
        c2 = z1 + PP(0.266426, -3)
        z2 = z1 + PP(0.700154, 44)
        c3 = z2 + PP(0.277827, -94)
        c4 = z2 + PP(0.926994, 85)
        #z3 = z2 + PP(0.90729, 167)
        z3 = z4 - PP(0.700003, ta+6)
        c5 = z3 + PP(0.548039, 109)
        #c6 = z3 + PP(0.233822, -69)
        #z4 = z3 + PP(0.700003, -74)
        #c7 = z4 + PP(0.233754, 100)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLsel(cls, ta=None, **kwargs):
        # M 527.116 76.4203C 541.333 75.6752 555.578 75.6752 569.795 76.4203C 570.525 76.4586 571.029 75.7708 571.203 75.012C 571.654 73.0504 569.585 72.5908 569.308 73.5574C 569.045 74.4735 568.912 75.4219 568.912 76.375
        #
        #moveto(527.116, 76.4203), 
        #curveto(541.333, 75.6752, 555.578, 75.6752, 569.795, 76.4203), 
        #curveto(570.525, 76.4586, 571.029, 75.7708, 571.203, 75.012), 
        #curveto(571.654, 73.0504, 569.585, 72.5908, 569.308, 73.5574), 
        #curveto(569.045, 74.4735, 568.912, 75.4219, 568.912, 76.375)
        #z0 = P(0, -0)
        #c0 = P(4.99671, 0.261873)
        #c1 = P(10.0033, 0.261873)
        #z1 = P(15, -0)
        #c2 = P(15.2565, -0.0134609)
        #c3 = P(15.4337, 0.228273)
        #z2 = P(15.4948, 0.494961)
        #c4 = P(15.6533, 1.18438)
        #c5 = P(14.9261, 1.34592)
        #z3 = P(14.8288, 1.00619)
        #c6 = P(14.7364, 0.684222)
        #c7 = P(14.6896, 0.350898)
        z4 = P(14.6896, 0.0159211)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(4.99671, 0.261873)
        #z1 = z0 + P(15, 0)
        #c1 = z1 + P(-4.99671, 0.261873)
        #c2 = z1 + P(0.256566, -0.0134609)
        #z2 = z1 + P(0.494856, 0.494961)
        #c3 = z2 + P(-0.061154, -0.266688)
        #c4 = z2 + P(0.158508, 0.689424)
        #z3 = z2 + P(-0.666016, 0.511234)
        #c5 = z3 + P(0.0973544, 0.339721)
        #c6 = z3 + P(-0.0924339, -0.321972)
        #z4 = z3 + P(-0.139178, -0.990273)
        #c7 = z4 + P(0, 0.334976)
        
        z0 = P(0, -0)
        c0 = z0 + PP(5.00356, 3)
        z1 = z0 + PP(15, 0)
        c1 = z1 + PP(5.00356, 176)
        c2 = z1 + PP(0.256919, -3)
        z2 = z1 + PP(0.699906, 45)
        c3 = z2 + PP(0.27361, -102)
        c4 = z2 + PP(0.707411, 77)
        #z3 = z2 + PP(0.839606, 142)
        z3 = z4 - PP(1.00001, ta-8)
        c5 = z3 + PP(0.353395, 74)
        #c6 = z3 + PP(0.334978, -106)
        #z4 = z3 + PP(1.00001, -98)
        #c7 = z4 + PP(0.334976, 90)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLsl(cls, ta=None, **kwargs):
        # M 338.604 3.23441C 352.821 2.48935 367.067 2.48935 381.283 3.23441C 382.006 3.2723 382.467 2.56347 382.692 1.82607C 383.051 0.64682 382.166 -0.14024 381.641 0.300098C 380.692 1.09641 380.072 2.19755 379.264 3.13359
        #
        #moveto(338.604, 3.23441), 
        #curveto(352.821, 2.48935, 367.067, 2.48935, 381.283, 3.23441), 
        #curveto(382.006, 3.2723, 382.467, 2.56347, 382.692, 1.82607), 
        #curveto(383.051, 0.64682, 382.166, -0.14024, 381.641, 0.300098), 
        #curveto(380.692, 1.09641, 380.072, 2.19755, 379.264, 3.13359)
        #z0 = P(0, -0)
        #c0 = P(4.99671, 0.261859)
        #c1 = P(10.0036, 0.261859)
        #z1 = P(15, -0)
        #c2 = P(15.2541, -0.0133168)
        #c3 = P(15.4161, 0.235808)
        #z2 = P(15.4952, 0.494975)
        #c4 = P(15.6213, 0.909434)
        #c5 = P(15.3103, 1.18605)
        #z3 = P(15.1258, 1.03129)
        #c6 = P(14.7922, 0.751421)
        #c7 = P(14.5743, 0.364415)
        z4 = P(14.2904, 0.0354342)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(4.99671, 0.261859)
        #z1 = z0 + P(15, 0)
        #c1 = z1 + P(-4.99635, 0.261859)
        #c2 = z1 + P(0.254105, -0.0133168)
        #z2 = z1 + P(0.495207, 0.494975)
        #c3 = z2 + P(-0.0790785, -0.259167)
        #c4 = z2 + P(0.126174, 0.414459)
        #z3 = z2 + P(-0.369384, 0.536318)
        #c5 = z3 + P(0.184516, 0.154761)
        #c6 = z3 + P(-0.333535, -0.279872)
        #z4 = z3 + P(-0.83542, -0.995859)
        #c7 = z4 + P(0.28398, 0.328981)
        #
        z0 = P(0, -0)
        c0 = z0 + PP(5.00356, 2)
        z1 = z0 + PP(15, 0)
        c1 = z1 + PP(5.00321, 176)
        c2 = z1 + PP(0.254454, -2)
        z2 = z1 + PP(0.700164, 44)
        c3 = z2 + PP(0.270963, -106)
        c4 = z2 + PP(0.433239, 73)
        z3 = z4 - PP(1.29987, ta-2)
        #z3 = z2 + PP(0.651216, 124)
        c5 = z3 + PP(0.240826, 39)
        #c6 = z3 + PP(0.435401, -139)
        #z4 = z3 + PP(1.29987, -129)
        #c7 = z4 + PP(0.434595, 49)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLswl(cls, ta=None, **kwargs):
        #M 747.902,115.821 C 762.076,115.326 776.24076,115.57238 790.421,115.821 792.63869,115.85988 792.04259,113.74682 790.046,114.29386 788.94266,114.59616 787.6323,115.25932 786.77233,115.66039

        #z0 = P(0, -0)
        #c0 = P(5.00027, 0.174625)
        #c1 = P(9.99728, 0.0877076)
        #z1 = P(14.9998, -0)
        #c2 = P(15.7821, -0.013716)
        #c3 = P(15.5718, 0.731725)
        #z2 = P(14.8675, 0.538741)
        #c4 = P(14.4782, 0.432096)
        #c5 = P(14.016, 0.198148)
        z3 = P(13.7126, 0.0566596)

        #z0 = P(0, -0)
        #c0 = z0 + P(5.00027, 0.174625)
        #z1 = z0 + P(14.9998, 0)
        #c1 = z1 + P(-5.00247, 0.0877076)
        #c2 = z1 + P(0.782352, -0.013716)
        #z2 = z1 + P(-0.132292, 0.538741)
        #c3 = z2 + P(0.704353, 0.192984)
        #c4 = z2 + P(-0.389234, -0.106645)
        #z3 = z2 + P(-1.15488, -0.482081)
        #c5 = z3 + P(0.303378, 0.141489)

        z0 = P(0, -0)
        c0 = z0 + PP(5.00332, 2)
        z1 = z0 + PP(14.9998, 0)
        c1 = z1 + PP(5.00324, 178)
        c2 = z1 + PP(0.782472, -1)
        #z2 = z1 + PP(0.554746, 103)
        z2 = z3 - PP(1.25146, ta + -2)
        c3 = z2 + PP(0.730312, 15)
        #c4 = z2 + PP(0.403579, -164)
        #z3 = z2 + PP(1.25146, -157)
        #c5 = z3 + PP(0.33475, 25)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])


    @classmethod
    def path_ECLne(cls, ta=None, **kwargs):
        #M 586.621,115.821 C 600.796,115.326 614.993,114.832 629.141,115.821 630.064,115.87 630.83635,115.04805 630.569,114.443 629.75331,112.597 628.17886,114.73272 627.37246,115.64306

        #z0 = P(0, -0)
        #c0 = P(5.00063, 0.174625)
        #c1 = P(10.009, 0.348897)
        #z1 = P(15.0001, -0)
        #c2 = P(15.3257, -0.0172861)
        #c3 = P(15.5982, 0.27268)
        #z2 = P(15.5039, 0.486128)
        #c4 = P(15.2161, 1.13736)
        #c5 = P(14.6607, 0.383921)
        z3 = P(14.3762, 0.0627733)

        #z0 = P(0, -0)
        #c0 = z0 + P(5.00063, 0.174625)
        #z1 = z0 + P(15.0001, 0)
        #c1 = z1 + P(-4.9911, 0.348897)
        #c2 = z1 + P(0.325614, -0.0172861)
        #z2 = z1 + P(0.503767, 0.486128)
        #c3 = z2 + P(0.0943151, -0.213448)
        #c4 = z2 + P(-0.287757, 0.651228)
        #z3 = z2 + P(-1.12767, -0.423355)
        #c5 = z3 + P(0.28448, 0.321148)

        z0 = P(0, -0)
        c0 = z0 + PP(5.00367, 1)
        z1 = z0 + PP(15.0001, 0)
        c1 = z1 + PP(5.00328, 176)
        c2 = z1 + PP(0.326072, -3)
        z2 = z1 + PP(0.700072, 43)
        #z2 = z3 - PP(1.20452, ta + -27)
        c3 = z2 + PP(0.233357, -66)
        c4 = z2 + PP(0.71197, 113)
        z3 = z2 + PP(1.20452, -159)
        #c5 = z3 + PP(0.429028, 48)
        c5 = z3 + PP(0.429028, ta)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_ECLs(cls, ta=None, **kwargs):
        #M 370.06992,115.58564 C 384.23292,114.84364 398.42592,114.84364 412.58992,115.58564 413.33592,115.61164 413.90125,114.96256 413.99292,114.18264 414.22226,112.23148 411.01738,112.19809 411.23538,113.22309 411.46038,114.19709 411.31838,114.84764 411.23538,115.52464

        #z0 = P(0, -0)
        #c0 = P(4.99639, 0.261761)
        #c1 = P(10.0034, 0.261761)
        #z1 = P(15.0001, -0)
        #c2 = P(15.2633, -0.00917222)
        #c3 = P(15.4627, 0.219809)
        #z2 = P(15.4951, 0.494947)
        #c4 = P(15.576, 1.18327)
        #c5 = P(14.4454, 1.19505)
        #z3 = P(14.5223, 0.833455)
        #c6 = P(14.6016, 0.48985)
        #c7 = P(14.5515, 0.26035)
        z4 = P(14.5223, 0.0215194)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.99639, 0.261761)
        #z1 = z0 + P(15.0001, 0)
        #c1 = z1 + P(-4.99674, 0.261761)
        #c2 = z1 + P(0.263172, -0.00917222)
        #z2 = z1 + P(0.494947, 0.494947)
        #c3 = z2 + P(-0.0323391, -0.275138)
        #c4 = z2 + P(0.0809061, 0.688326)
        #z3 = z2 + P(-0.972799, 0.338508)
        #c5 = z3 + P(-0.0769056, 0.361597)
        #c6 = z3 + P(0.079375, -0.343606)
        #z4 = z3 + P(0, -0.811936)
        #c7 = z4 + P(0.0292806, 0.238831)

        z0 = P(0, -0)
        c0 = z0 + PP(5.00324, 2)
        z1 = z0 + PP(15.0001, 0)
        c1 = z1 + PP(5.0036, 177)
        c2 = z1 + PP(0.263332, -1)
        z2 = z1 + PP(0.699961, 44)
        c3 = z2 + PP(0.277032, -96)
        c4 = z2 + PP(0.693064, 83)
        #z3 = z2 + PP(1.03001, 160)
        z3 = z4 - PP(0.811936, ta + 7)
        c5 = z3 + PP(0.369685, 102)
        #c6 = z3 + PP(0.352654, -76)
        #z4 = z3 + PP(0.811936, -90)
        #c7 = z4 + PP(0.240619, 83)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLse(cls, ta=None, **kwargs):
        # M 424.179,46.8722 C 438.396,46.1271 452.642,46.1271 466.858,46.8722 467.587,46.9103 468.081,46.2185 468.267,45.4638 469.023,42.3853 464.62,42.5452 465.689,44.3977 466.38979,45.219067 466.70553,46.040433 467.112,46.8618
        #
        #moveto(424.179, 46.8722), 
        #curveto(438.396, 46.1271, 452.642, 46.1271, 466.858, 46.8722), 
        #curveto(467.587, 46.9103, 468.081, 46.2185, 468.267, 45.4638), 
        #curveto(469.023, 42.3853, 464.62, 42.5452, 465.689, 44.3977), 
        #curveto(466.38979, 45.219067, 466.70553, 46.040433, 467.112, 46.8618)
        #z0 = P(0, -0)
        #c0 = P(4.99671, 0.261873)
        #c1 = P(10.0036, 0.261873)
        #z1 = P(15, -0)
        #c2 = P(15.2562, -0.0133906)
        #c3 = P(15.4298, 0.229749)
        #z2 = P(15.4952, 0.494996)
        #c4 = P(15.7609, 1.57697)
        #c5 = P(14.2134, 1.52077)
        #z3 = P(14.5891, 0.869687)
        #c6 = P(14.8354, 0.58101)
        #c7 = P(14.9464, 0.292333)
        z4 = P(15.0892, 0.00365518)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(4.99671, 0.261873)
        #z1 = z0 + P(15, 0)
        #c1 = z1 + P(-4.99635, 0.261873)
        #c2 = z1 + P(0.256214, -0.0133906)
        #z2 = z1 + P(0.495207, 0.494996)
        #c3 = z2 + P(-0.0653715, -0.265247)
        #c4 = z2 + P(0.265704, 1.08197)
        #z3 = z2 + P(-0.906064, 0.374691)
        #c5 = z3 + P(-0.375711, 0.651079)
        #c6 = z3 + P(0.2463, -0.288678)
        #z4 = z3 + P(0.500127, -0.866032)
        #c7 = z4 + P(-0.142858, 0.288678)
        
        z0 = P(0, -0)
        c0 = z0 + PP(5.00356, 3)
        z1 = z0 + PP(15, 0)
        c1 = z1 + PP(5.00321, 176)
        c2 = z1 + PP(0.256564, -2)
        z2 = z1 + PP(0.700179, 44)
        c3 = z2 + PP(0.273184, -103)
        c4 = z2 + PP(1.11412, 76)
        #z3 = z2 + PP(0.980482, 157)
        z3 = z4 - PP(1.00007, ta+6)
        c5 = z3 + PP(0.751707, 119)
        #c6 = z3 + PP(0.379471, -49)
        #z4 = z3 + PP(1.00007, -59)
        #c7 = z4 + PP(0.322092, 116)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLser(cls, ta=None, **kwargs):
        #M 265.053,387.285 C 279.217,386.543 293.425,386.296 307.573,387.285 308.312,387.311 308.99096,386.56841 309.001,385.907 309.01294,385.12042 308.10241,384.45754 307.35328,384.21742 305.95054,383.76779 303.71949,384.60754 304.94961,385.35725 305.75609,385.84877 307.04,386.745 307.826,387.275

        #z0 = P(0, -0)
        #c0 = P(4.99674, 0.261761)
        #c1 = P(10.009, 0.348897)
        #z1 = P(15.0001, -0)
        #c2 = P(15.2608, -0.00917222)
        #c3 = P(15.5003, 0.252797)
        #z2 = P(15.5039, 0.486128)
        #c4 = P(15.5081, 0.763616)
        #c5 = P(15.1869, 0.997465)
        #z3 = P(14.9226, 1.08217)
        #c6 = P(14.4277, 1.24079)
        #c7 = P(13.6407, 0.944548)
        #z4 = P(14.0746, 0.680067)
        #c8 = P(14.3591, 0.50667)
        #c9 = P(14.8121, 0.1905)
        z5 = P(15.0894, 0.00352778)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.99674, 0.261761)
        #z1 = z0 + P(15.0001, 0)
        #c1 = z1 + P(-4.9911, 0.348897)
        #c2 = z1 + P(0.260703, -0.00917222)
        #z2 = z1 + P(0.503767, 0.486128)
        #c3 = z2 + P(-0.00354189, -0.233331)
        #c4 = z2 + P(0.00421217, 0.277488)
        #z3 = z2 + P(-0.581279, 0.596046)
        #c5 = z3 + P(0.264276, -0.084709)
        #c6 = z3 + P(-0.494855, 0.158619)
        #z4 = z3 + P(-0.847961, -0.402107)
        #c7 = z4 + P(-0.433959, 0.264481)
        #c8 = z4 + P(0.284508, -0.173397)
        #z5 = z4 + P(1.01473, -0.67654)
        #c9 = z5 + P(-0.277283, 0.186972)

        z0 = P(0, -0)
        c0 = z0 + PP(5.0036, 2)
        z1 = z0 + PP(15.0001, 0)
        c1 = z1 + PP(5.00328, 176)
        c2 = z1 + PP(0.260864, -2)
        z2 = z1 + PP(0.700072, 43)
        c3 = z2 + PP(0.233358, -90)
        c4 = z2 + PP(0.27752, 89)
        z3 = z2 + PP(0.83256, 134)
        c5 = z3 + PP(0.277521, -17)
        c6 = z3 + PP(0.519656, 162)
        #z4 = z3 + PP(0.938471, -154)
        z4 = z5 - PP(1.21958, ta + 1)
        c7 = z4 + PP(0.508203, 148)
        #c8 = z4 + PP(0.333184, -31)
        #z5 = z4 + PP(1.21958, -33)
        #c9 = z5 + PP(0.334432, 146)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_ECLsr(cls, ta=None, **kwargs):
        # M 380.971 24.1886C 395.187 23.4436 409.433 23.4436 423.65 24.1886C 424.374 24.2266 424.843 23.5223 425.058 22.7803C 426.055 19.3393 419.946 19.3337 422.209 21.6777C 422.936 22.4296 423.595 23.2434 424.179 24.11
        #
        #moveto(380.971, 24.1886), 
        #curveto(395.187, 23.4436, 409.433, 23.4436, 423.65, 24.1886), 
        #curveto(424.374, 24.2266, 424.843, 23.5223, 425.058, 22.7803), 
        #curveto(426.055, 19.3393, 419.946, 19.3337, 422.209, 21.6777), 
        #curveto(422.936, 22.4296, 423.595, 23.2434, 424.179, 24.11)
        #z0 = P(0, -0)
        #c0 = P(4.99635, 0.261838)
        #c1 = P(10.0033, 0.261838)
        #z1 = P(15, -0)
        #c2 = P(15.2544, -0.0133555)
        #c3 = P(15.4192, 0.234178)
        #z2 = P(15.4948, 0.494961)
        #c4 = P(15.8452, 1.70433)
        #c5 = P(13.6981, 1.7063)
        #z3 = P(14.4935, 0.882481)
        #c6 = P(14.749, 0.618218)
        #c7 = P(14.9806, 0.3322)
        z4 = P(15.1859, 0.0276247)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(4.99635, 0.261838)
        #z1 = z0 + P(15, 0)
        #c1 = z1 + P(-4.99671, 0.261838)
        #c2 = z1 + P(0.254457, -0.0133555)
        #z2 = z1 + P(0.494856, 0.494961)
        #c3 = z2 + P(-0.0755639, -0.260783)
        #c4 = z2 + P(0.350405, 1.20937)
        #z3 = z2 + P(-1.00131, 0.38752)
        #c5 = z3 + P(-0.795354, 0.823822)
        #c6 = z3 + P(0.255511, -0.264263)
        #z4 = z3 + P(0.692376, -0.854856)
        #c7 = z4 + P(-0.205253, 0.304575)
        
        z0 = P(0, -0)
        c0 = z0 + PP(5.00321, 2)
        z1 = z0 + PP(15, 0)
        c1 = z1 + PP(5.00356, 177)
        c2 = z1 + PP(0.254807, -3)
        z2 = z1 + PP(0.699906, 45)
        c3 = z2 + PP(0.27151, -106)
        c4 = z2 + PP(1.25911, 73)
        z3 = z4 - PP(1.10007, ta+7)
        #z3 = z2 + PP(1.07368, 158)
        c5 = z3 + PP(1.14511, 133)
        #c6 = z3 + PP(0.367588, -45)
        #z4 = z3 + PP(1.10007, -50)
        #c7 = z4 + PP(0.36728, 123)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLner(cls, ta=None, **kwargs):
        return cls.path_ECL()

    @classmethod
    def path_ECLel(cls, ta=None, **kwargs):
        # M 135.422 -0.213926C 149.638 -0.958988 163.884 -0.958988 178.101 -0.213926C 178.834 -0.175509 179.35 -0.857863 179.509 -1.62227C 180.179 -4.85167 175.153 -4.24715 176.865 -2.34559C 177.505 -1.63537 178.264 -1.04253 179.108 -0.59386
        #
        #moveto(135.422, -0.213926), 
        #curveto(149.638, -0.958988, 163.884, -0.958988, 178.101, -0.213926), 
        #curveto(178.834, -0.175509, 179.35, -0.857863, 179.509, -1.62227), 
        #curveto(180.179, -4.85167, 175.153, -4.24715, 176.865, -2.34559), 
        #curveto(177.505, -1.63537, 178.264, -1.04253, 179.108, -0.59386)
        #z0 = P(0, -0)
        #c0 = P(4.99635, 0.261859)
        #c1 = P(10.0033, 0.261859)
        #z1 = P(15, -0)
        #c2 = P(15.2576, -0.013502)
        #c3 = P(15.4389, 0.226318)
        #z2 = P(15.4948, 0.494976)
        #c4 = P(15.7303, 1.62998)
        #c5 = P(13.9639, 1.41752)
        #z3 = P(14.5656, 0.749194)
        #c6 = P(14.7905, 0.499581)
        #c7 = P(15.0572, 0.291221)
        z4 = P(15.3539, 0.133532)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(4.99635, 0.261859)
        #z1 = z0 + P(15, 0)
        #c1 = z1 + P(-4.99671, 0.261859)
        #c2 = z1 + P(0.25762, -0.013502)
        #z2 = z1 + P(0.494856, 0.494976)
        #c3 = z2 + P(-0.0558821, -0.268658)
        #c4 = z2 + P(0.235478, 1.135)
        #z3 = z2 + P(-0.92926, 0.254218)
        #c5 = z3 + P(-0.601699, 0.668322)
        #c6 = z3 + P(0.224934, -0.249614)
        #z4 = z3 + P(0.788325, -0.615663)
        #c7 = z4 + P(-0.296632, 0.15769)
        
        z0 = P(0, -0)
        c0 = z0 + PP(5.00321, 3)
        z1 = z0 + PP(15, 0)
        c1 = z1 + PP(5.00356, 177)
        c2 = z1 + PP(0.257974, -3)
        z2 = z1 + PP(0.699917, 45)
        c3 = z2 + PP(0.274409, -101)
        c4 = z2 + PP(1.15917, 78)
        #z3 = z2 + PP(0.963406, 164)
        z3 = z4 - PP(1.00025, ta-11)
        c5 = z3 + PP(0.899275, 131)
        #c6 = z3 + PP(0.33601, -47)
        #z4 = z3 + PP(1.00025, -37)
        #c7 = z4 + PP(0.335941, 152)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLe(cls, ta=None, **kwargs):
        # M 68.5438,-0.127392 C 84.002309,-0.69494388 99.066073,-0.47300478 114.068,-0.127392 115.07773,-0.1041299 114.96,-2.27649 112.763,-2.27649 110.69,-2.27649 110.191,-0.31456516 111.223,-0.35060516 112.171,-0.38371516 113.12,-0.445029 114.068,-0.411919
        #
        #moveto(68.5438, -0.127392), 
        #curveto(84.002309, -0.69494388, 99.066073, -0.47300478, 114.068, -0.127392), 
        #curveto(115.07773, -0.1041299, 114.96, -2.27649, 112.763, -2.27649), 
        #curveto(110.69, -2.27649, 110.191, -0.31456516, 111.223, -0.35060516), 
        #curveto(112.171, -0.38371516, 113.12, -0.445029, 114.068, -0.411919)
        #z0 = P(0, -0)
        #c0 = P(5.43305, 0.199472)
        #c1 = P(10.7274, 0.121469)
        #z1 = P(15.9999, -0)
        #c2 = P(16.3548, -0.00817569)
        #c3 = P(16.3134, 0.755322)
        #z2 = P(15.5413, 0.755322)
        #c4 = P(14.8127, 0.755322)
        #c5 = P(14.6373, 0.0657839)
        #z3 = P(15, 0.0784505)
        #c6 = P(15.3332, 0.0900873)
        #c7 = P(15.6667, 0.111637)
        z4 = P(15.9999, 0.0999998)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(5.43305, 0.199472)
        #z1 = z0 + P(15.9999, 0)
        #c1 = z1 + P(-5.27258, 0.121469)
        #c2 = z1 + P(0.35488, -0.00817569)
        #z2 = z1 + P(-0.458655, 0.755322)
        #c3 = z2 + P(0.772157, 0)
        #c4 = z2 + P(-0.728576, 0)
        #z3 = z2 + P(-0.541248, -0.676871)
        #c5 = z3 + P(-0.362707, -0.0126666)
        #c6 = z3 + P(0.333184, 0.0116368)
        #z4 = z3 + P(0.999903, 0.0215494)
        #c7 = z4 + P(-0.333184, 0.0116368)
        
        z0 = P(0, 0)
        c0 = z0 + PP(5.43671, 2)
        z1 = z0 + PP(15.9999, 0)
        c1 = z1 + PP(5.27397, 178)
        c2 = z1 + PP(0.354974, -1)
        z2 = z1 + PP(0.883672, 121)
        c3 = z2 + PP(0.772157, 0)
        c4 = z2 + PP(0.728576, 180)
        #z3 = z2 + PP(0.866663, -128)
        z3 = z4 - PP(1.00014, 1)
        c5 = z3 + PP(0.362928, -177)
        #c6 = z3 + PP(0.333387, 2)
        #z4 = z3 + PP(1.00014, 1)
        #c7 = z4 + PP(0.333387, 177)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])
        pass

    @classmethod
    def path_ECLer(cls, ta=None, **kwargs):
        z0 = P(0, 0)
        c0 = P(4.99656, 0.261859)
        c1 = P(10.0034, 0.261859)
        z1 = P(15, 0)
        z2 = PP(1, PP(z1 - c1).a + 45) + z1
        z3 = z2 + PP(0.1, 135)
        z4 = z1 - PP(0.1, ta) + P(0, 0.1)
        #z4 = z2 - PP(0.7, ta)
        #z4 = z2
        
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            knot(*z2),
            curve(),
            knot(*z3),
            curve(),
            endknot(*z4 ,angle=ta)])


    @classmethod
    def path_ECLnel(cls, ta=None, **kwargs):
        return cls.path_ECLe(ta)

    @classmethod
    def path_ECLE(cls, ta=None):
        #M 212.514,115.243 C 227.916,114.705 242.928,114.721 257.868,115.243 258.874,115.261 258.767,113.096 256.578,113.096 254.513,113.096 254.006,115.063 255.034,115.009 255.978,114.96 256.92307,114.97154 257.868,114.96 259.20348,114.94369 260.50785,114.92737 262.09469,114.91106

        #z0 = P(0, -0)
        #c0 = P(5.43348, 0.189794)
        #c1 = P(10.7294, 0.18415)
        #z1 = P(15.9999, -0)
        #c2 = P(16.3548, -0.00635)
        #c3 = P(16.317, 0.757414)
        #z2 = P(15.5448, 0.757414)
        #c4 = P(14.8163, 0.757414)
        #c5 = P(14.6375, 0.0635)
        #z3 = P(15.0001, 0.08255)
        #c6 = P(15.3331, 0.0998361)
        #c7 = P(15.6665, 0.0957651)
        #z4 = P(15.9999, 0.0998361)
        #c8 = P(16.471, 0.10559)
        #c9 = P(16.9312, 0.111347)
        z5 = P(17.491, 0.117101)

        #z0 = P(0, -0)
        #c0 = z0 + P(5.43348, 0.189794)
        #z1 = z0 + P(15.9999, 0)
        #c1 = z1 + P(-5.2705, 0.18415)
        #c2 = z1 + P(0.354894, -0.00635)
        #z2 = z1 + P(-0.455083, 0.757414)
        #c3 = z2 + P(0.772231, 0)
        #c4 = z2 + P(-0.728486, 0)
        #z3 = z2 + P(-0.544689, -0.674864)
        #c5 = z3 + P(-0.362656, -0.01905)
        #c6 = z3 + P(0.333022, 0.0172861)
        #z4 = z3 + P(0.999772, 0.0172861)
        #c7 = z4 + P(-0.33335, -0.00407106)
        #c8 = z4 + P(0.471128, 0.00575381)
        #z5 = z4 + P(1.49108, 0.0172649)
        #c9 = z5 + P(-0.559802, -0.00575381)

        z0 = P(0, -0)
        c0 = z0 + PP(5.4368, 2)
        z1 = z0 + PP(15.9999, 0)
        c1 = z1 + PP(5.27372, 177)
        c2 = z1 + PP(0.354951, -1)
        z2 = z1 + PP(0.883616, 120)
        c3 = z2 + PP(0.772231, 0)
        c4 = z2 + PP(0.728486, 180)
        z3 = z2 + PP(0.867253, -128)
        c5 = z3 + PP(0.363156, -176)
        c6 = z3 + PP(0.333471, 2)
        z4 = z3 + PP(0.999922, 0)
        #z4 = z5 - PP(1.49118, ta + 359)
        c7 = z4 + PP(0.333375, -179)
        c8 = z4 + PP(0.471163, 0)
        z5 = z4 + PP(1.49118, 0)
        c9 = z5 + PP(0.559831, -179)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

class CharKen(CharKe):
    def __init__(self, name='ken', kana='„Åë„Çì',
                 model='E16CL1E1F', head_type='E', tail_type='F'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_ECLE()]

class CharKeku(CharKe):
    def __init__(self, name='keku', kana='„Åë„Åè',
                 model='BE16CL1', head_type='BE', tail_type='ECL1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        if self.before and self.before.tail_type in {'', 'P', 'E'}:
            return self.barb(super().get_paths())
        else:
            return super().get_paths()
        
#
#    def set_next_head(self):
#        if self.before and self.before.tail_type not in {'', 'P', 'E'}:
#            self.head = self.before.tail - self.get_pos_xku()
#
#        super().set_next_head()

class CharKeke(CharKe):
    def __init__(self, name='keke', kana='„Åë„Åë',
                 model='E16CL1SE3', head_type='E', tail_type='SE'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature = {'SE', 'SR'}

    @classmethod
    def path_ECLSE(cls, ta=None, **kwargs):
        #M 237.149,157.233 C 251.312,156.49 265.52,156.243 279.668,157.233 280.395,157.258 280.922,156.608 281.096,155.854 281.86,152.79 277.44342,152.89898 278.4762,154.7631 278.93542,155.59198 279.42466,156.41431 279.921,157.222 281.42964,159.677 282.80947,162.132 284.17275,164.587

        #z0 = P(0, -0)
        #c0 = P(4.99639, 0.262114)
        #c1 = P(10.0087, 0.34925)
        #z1 = P(14.9998, -0)
        #c2 = P(15.2562, -0.00881944)
        #c3 = P(15.4421, 0.220486)
        #z2 = P(15.5035, 0.486481)
        #c4 = P(15.773, 1.56739)
        #c5 = P(14.215, 1.52895)
        #z3 = P(14.5793, 0.871326)
        #c6 = P(14.7413, 0.578915)
        #c7 = P(14.9139, 0.288816)
        #z4 = P(15.089, 0.00388056)
        #c8 = P(15.6212, -0.862189)
        #c9 = P(16.108, -1.72826)
        z5 = P(16.5889, -2.59433)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.99639, 0.262114)
        #z1 = z0 + P(14.9998, 0)
        #c1 = z1 + P(-4.9911, 0.34925)
        #c2 = z1 + P(0.256469, -0.00881944)
        #z2 = z1 + P(0.503767, 0.486481)
        #c3 = z2 + P(-0.0613833, -0.265994)
        #c4 = z2 + P(0.269522, 1.08091)
        #z3 = z2 + P(-0.924207, 0.384845)
        #c5 = z3 + P(-0.364342, 0.65762)
        #c6 = z3 + P(0.162003, -0.29241)
        #z4 = z3 + P(0.509693, -0.867445)
        #c7 = z4 + P(-0.175098, 0.284935)
        #c8 = z4 + P(0.532215, -0.866069)
        #z5 = z4 + P(1.49992, -2.59821)
        #c9 = z5 + P(-0.480935, 0.866069)

        z0 = P(0, -0)
        c0 = z0 + PP(5.00326, 3)
        z1 = z0 + PP(14.9998, 0)
        c1 = z1 + PP(5.0033, 175)
        c2 = z1 + PP(0.256621, -1)
        z2 = z1 + PP(0.700317, 43)
        c3 = z2 + PP(0.272985, -102)
        c4 = z2 + PP(1.11401, 75)
        z3 = z2 + PP(1.00113, 157)
        c5 = z3 + PP(0.751804, 118)
        c6 = z3 + PP(0.334288, -61)
        z4 = z3 + PP(1.00611, -59)
        #z4 = z5 - PP(3.00008, ta + 1)
        c7 = z4 + PP(0.334436, 121)
        c8 = z4 + PP(1.01653, -58)
        z5 = z4 + PP(3.00008, -60)
        c9 = z5 + PP(0.990644, 119)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_ECLSEe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEer(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEne(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEner(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEnel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEs(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEsl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEsr(cls, ta=None, **kwargs):
        return cls.jog(cls.path_ECLSE())

    @classmethod
    def path_ECLSEse(cls, ta=None, **kwargs):
        return cls.jog(cls.path_ECLSE())

    @classmethod
    def path_ECLSEser(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEsel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEsw(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEswr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLSEswl(cls, ta=None, **kwargs):
        pass

