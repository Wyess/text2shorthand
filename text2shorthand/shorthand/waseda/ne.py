import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharNe(WasedaChar):
    def __init__(self, name='ne', kana='„Å≠',
                 model='EL16CL1', head_type='EL',
                 tail_type='EL16CL1'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_ELCL(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 55.5093,60.4133 92.5262,66.4893 92.5262,58.6772 92.5262,58.0774 92.3373,57.5033 91.9808,57.0932 91.6316,56.677 91.1405,56.4036 90.567,56.4036 88.3916,56.4036 90.396387,59.113401 91.331487,60.733001

        #z0 = P(0, -0)
        #c0 = P(2.87069, -0.610169)
        #c1 = P(15.8806, -2.74564)
        #z1 = P(15.8806, -0)
        #c2 = P(15.8806, 0.210806)
        #c3 = P(15.8143, 0.412579)
        #z2 = P(15.689, 0.556712)
        #c4 = P(15.5662, 0.70299)
        #c5 = P(15.3936, 0.799079)
        #z3 = P(15.1921, 0.799079)
        #c6 = P(14.4275, 0.799079)
        #c7 = P(15.1321, -0.153307)
        z4 = P(15.4608, -0.722532)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87069, -0.610169)
        #z1 = z0 + P(15.8806, 0)
        #c1 = z1 + P(0, -2.74564)
        #c2 = z1 + P(0, 0.210806)
        #z2 = z1 + P(-0.191686, 0.556712)
        #c3 = z2 + P(0.125295, -0.144134)
        #c4 = z2 + P(-0.12273, 0.146278)
        #z3 = z2 + P(-0.496894, 0.242367)
        #c5 = z3 + P(0.201562, 0)
        #c6 = z3 + P(-0.764566, 0)
        #z4 = z3 + P(0.268687, -1.52161)
        #c7 = z4 + P(-0.32865, 0.569224)

        z0 = P(0, -0)
        c0 = z0 + PP(2.93482, -11)
        z1 = z0 + PP(15.8806, 0)
        c1 = z1 + PP(2.74564, -90)
        c2 = z1 + PP(0.210806, 90)
        z2 = z1 + PP(0.588789, 108)
        c3 = z2 + PP(0.19098, -48)
        c4 = z2 + PP(0.190944, 129)
        z3 = z2 + PP(0.552852, 153)
        #z3 = z4 - PP(1.54515, ta + -19)
        c5 = z3 + PP(0.201562, 0)
        c6 = z3 + PP(0.764566, 180)
        #z4 = z3 + PP(1.54515, -79)
        c7 = z4 + PP(0.657288, 120)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_ELCLe(cls, ta=None, **kwargs):
        #M 47.3414,117.418 C 55.5077,119.006 92.3573,125.201 92.3573,117.418 92.3573,116.44296 91.267068,116.34706 90.618427,116.40918 89.75396,116.49197 87.485156,117.17119 87.643251,118.34347 87.808021,119.56525 89.612999,119.466 91.1673,119.466

        #z0 = P(0, -0)
        #c0 = P(2.87013, -0.558118)
        #c1 = P(15.8213, -2.73541)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 0.342687)
        #c3 = P(15.4381, 0.376392)
        #z2 = P(15.2101, 0.35456)
        #c4 = P(14.9063, 0.325462)
        #c5 = P(14.1089, 0.0867438)
        #z3 = P(14.1645, -0.325266)
        #c6 = P(14.2224, -0.754672)
        #c7 = P(14.8568, -0.71979)
        z4 = P(15.403, -0.71979)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87013, -0.558118)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 0.342687)
        #z2 = z1 + P(-0.611144, 0.35456)
        #c3 = z2 + P(0.227971, 0.0218327)
        #c4 = z2 + P(-0.303825, -0.0290974)
        #z3 = z2 + P(-1.04565, -0.679825)
        #c5 = z3 + P(-0.055564, 0.412009)
        #c6 = z3 + P(0.05791, -0.429407)
        #z4 = z3 + P(1.23856, -0.394524)
        #c7 = z4 + P(-0.546274, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92389, -11)
        z1 = z0 + PP(15.8213, 0)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(0.342687, 90)
        z2 = z1 + PP(0.706548, 149)
        c3 = z2 + PP(0.229014, 5)
        c4 = z2 + PP(0.305216, -174)
        #z3 = z2 + PP(1.24722, -146)
        z3 = z4 - PP(1.29988, ta + -17)
        c5 = z3 + PP(0.415739, 97)
        #c6 = z3 + PP(0.433294, -82)
        #z4 = z3 + PP(1.29988, -17)
        #c7 = z4 + PP(0.546274, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLer(cls, ta=None, **kwargs):
        #M 225.708,117.418 C 233.874,119.006 270.723,125.201 270.723,117.418 270.723,116.40867 269.4055,116.29734 268.66176,116.4495 267.47012,116.69328 265.59064,118.1413 266.23394,119.17358 267.04467,120.47454 268.32408,119.24692 270.66387,117.93925

        #z0 = P(0, -0)
        #c0 = P(2.87002, -0.558118)
        #c1 = P(15.821, -2.73541)
        #z1 = P(15.821, -0)
        #c2 = P(15.821, 0.354739)
        #c3 = P(15.3579, 0.393867)
        #z2 = P(15.0965, 0.340389)
        #c4 = P(14.6777, 0.25471)
        #c5 = P(14.0171, -0.254211)
        #z3 = P(14.2432, -0.617016)
        #c6 = P(14.5282, -1.07425)
        #c7 = P(14.9778, -0.642792)
        z4 = P(15.8002, -0.183198)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87002, -0.558118)
        #z1 = z0 + P(15.821, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 0.354739)
        #z2 = z1 + P(-0.724443, 0.340389)
        #c3 = z2 + P(0.261395, 0.0534781)
        #c4 = z2 + P(-0.418814, -0.0856789)
        #z3 = z2 + P(-0.853281, -0.957405)
        #c5 = z3 + P(-0.226094, 0.362805)
        #c6 = z3 + P(0.284939, -0.457235)
        #z4 = z3 + P(1.55694, 0.433817)
        #c7 = z4 + P(-0.822342, -0.459594)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92378, -11)
        z1 = z0 + PP(15.821, 0)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(0.354739, 90)
        z2 = z1 + PP(0.800426, 154)
        c3 = z2 + PP(0.266809, 11)
        c4 = z2 + PP(0.427488, -168)
        #z3 = z2 + PP(1.28246, -131)
        z3 = z4 - PP(1.61625, ta + 345)
        c5 = z3 + PP(0.427488, 121)
        #c6 = z3 + PP(0.538753, -58)
        #z4 = z3 + PP(1.61625, 15)
        #c7 = z4 + PP(0.942058, -150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLel(cls, ta=None, **kwargs):
        #M 348.622,83.9824 C 356.758,85.5638 393.47,91.7363 393.47,83.9824 393.47,82.9768 392.26905,82.804908 391.506,82.80641 390.62823,82.808138 389.25448,83.290324 389.25206,84.1681 389.24879,85.352822 391.157,85.7624 392.284,86.0227

        #z0 = P(0, -0)
        #c0 = P(2.8702, -0.557883)
        #c1 = P(15.8214, -2.7354)
        #z1 = P(15.8214, -0)
        #c2 = P(15.8214, 0.354753)
        #c3 = P(15.3977, 0.415393)
        #z2 = P(15.1285, 0.414863)
        #c4 = P(14.8189, 0.414254)
        #c5 = P(14.3342, 0.244149)
        #z3 = P(14.3334, -0.0655108)
        #c6 = P(14.3322, -0.483454)
        #c7 = P(15.0054, -0.627944)
        z4 = P(15.403, -0.719773)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.8702, -0.557883)
        #z1 = z0 + P(15.8214, 0)
        #c1 = z1 + P(0, -2.7354)
        #c2 = z1 + P(0, 0.354753)
        #z2 = z1 + P(-0.692856, 0.414863)
        #c3 = z2 + P(0.269187, 0.000529872)
        #c4 = z2 + P(-0.309658, -0.0006096)
        #z3 = z2 + P(-0.79514, -0.480374)
        #c5 = z3 + P(0.000853722, 0.30966)
        #c6 = z3 + P(-0.00115358, -0.417944)
        #z4 = z3 + P(1.0696, -0.654262)
        #c7 = z4 + P(-0.397581, 0.0918281)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92392, -10)
        z1 = z0 + PP(15.8214, 0)
        c1 = z1 + PP(2.7354, -90)
        c2 = z1 + PP(0.354753, 90)
        z2 = z1 + PP(0.807564, 149)
        c3 = z2 + PP(0.269188, 0)
        c4 = z2 + PP(0.309658, -179)
        #z3 = z2 + PP(0.928982, -148)
        z3 = z4 - PP(1.25384, ta + -17)
        c5 = z3 + PP(0.309661, 89)
        #c6 = z3 + PP(0.417945, -90)
        #z4 = z3 + PP(1.25384, -31)
        #c7 = z4 + PP(0.408047, 166)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLne(cls, ta=None, **kwargs):
        #M 404.724,159.774 C 412.89,161.361 449.74,167.557 449.74,159.774 449.74,159.176 449.48658,158.38354 448.93448,158.31008 447.81757,158.16146 446.60484,159.61583 446.5872,160.74244 446.57613,161.44992 446.76205,163.07402 448.55,161.822

        #z0 = P(0, -0)
        #c0 = P(2.88078, -0.559858)
        #c1 = P(15.8806, -2.74567)
        #z1 = P(15.8806, -0)
        #c2 = P(15.8806, 0.210961)
        #c3 = P(15.7912, 0.490523)
        #z2 = P(15.5965, 0.516438)
        #c4 = P(15.2025, 0.568868)
        #c5 = P(14.7746, 0.0557989)
        #z3 = P(14.7684, -0.341644)
        #c6 = P(14.7645, -0.591227)
        #c7 = P(14.8301, -1.16417)
        z4 = P(15.4608, -0.722489)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.88078, -0.559858)
        #z1 = z0 + P(15.8806, 0)
        #c1 = z1 + P(0, -2.74567)
        #c2 = z1 + P(0, 0.210961)
        #z2 = z1 + P(-0.28417, 0.516438)
        #c3 = z2 + P(0.194769, -0.0259151)
        #c4 = z2 + P(-0.394021, 0.0524298)
        #z3 = z2 + P(-0.828068, -0.858083)
        #c5 = z3 + P(0.006223, 0.397443)
        #c6 = z3 + P(-0.00390525, -0.249583)
        #z4 = z3 + P(0.692432, -0.380845)
        #c7 = z4 + P(-0.630749, -0.441685)

        z0 = P(0, -0)
        c0 = z0 + PP(2.93468, -10)
        z1 = z0 + PP(15.8806, 0)
        c1 = z1 + PP(2.74567, -90)
        c2 = z1 + PP(0.210961, 90)
        z2 = z1 + PP(0.589458, 118)
        c3 = z2 + PP(0.196485, -7)
        c4 = z2 + PP(0.397494, 172)
        #z3 = z2 + PP(1.19248, -133)
        z3 = z4 - PP(0.790256, ta + 296)
        c5 = z3 + PP(0.397492, 89)
        #c6 = z3 + PP(0.249614, -90)
        #z4 = z3 + PP(0.790256, -28)
        #c7 = z4 + PP(0.770019, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLner(cls, ta=None, **kwargs):
        #M 209.537,176.159 C 217.703,177.747 254.54772,183.942 254.553,176.159 254.55606,171.64493 251.17377,178.39342 250.759,179.2741

        #z0 = P(0, -0)
        #c0 = P(2.87002, -0.558118)
        #c1 = P(15.8195, -2.73541)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8224, 1.58651)
        #c3 = P(14.6337, -0.785309)
        z2 = P(14.4879, -1.09483)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87002, -0.558118)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(-0.00185571, -2.73541)
        #c2 = z1 + P(0.00107547, 1.58651)
        #z2 = z1 + P(-1.33344, -1.09483)
        #c3 = z2 + P(0.145775, 0.309524)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92378, -11)
        z1 = z0 + PP(15.8213, 0)
        #z1 = z2 - PP(1.72532, ta + -24)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(1.58651, 89)
        #z2 = z1 + PP(1.72532, -140)
        c3 = z2 + PP(0.342133, 64)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            #curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_ELCLnel(cls, ta=None, **kwargs):
        #M 128.805,176.159 C 136.971,177.747 173.82,183.942 173.82,176.159 173.82,175.18445 173.46817,174.69724 172.86453,174.44615 171.95533,174.06796 170.46033,174.90187 170.02026,175.24435 168.31011,176.57524 171.19256,177.69952 173.63476,176.9843

        #z0 = P(0, -0)
        #c0 = P(2.87002, -0.558118)
        #c1 = P(15.821, -2.73541)
        #z1 = P(15.821, -0)
        #c2 = P(15.821, 0.342515)
        #c3 = P(15.6973, 0.51375)
        #z2 = P(15.4852, 0.601998)
        #c4 = P(15.1656, 0.734917)
        #c5 = P(14.6402, 0.441831)
        #z3 = P(14.4855, 0.321463)
        #c6 = P(13.8845, -0.146292)
        #c7 = P(14.8975, -0.541431)
        z4 = P(15.7559, -0.29006)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87002, -0.558118)
        #z1 = z0 + P(15.821, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 0.342515)
        #z2 = z1 + P(-0.335809, 0.601998)
        #c3 = z2 + P(0.212155, -0.0882481)
        #c4 = z2 + P(-0.319547, 0.132919)
        #z3 = z2 + P(-0.999647, -0.280535)
        #c5 = z3 + P(0.154667, 0.120368)
        #c6 = z3 + P(-0.601049, -0.467754)
        #z4 = z3 + P(1.27035, -0.611523)
        #c7 = z4 + P(-0.858335, -0.251371)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92378, -11)
        z1 = z0 + PP(15.821, 0)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(0.342515, 90)
        z2 = z1 + PP(0.689325, 119)
        c3 = z2 + PP(0.229777, -22)
        c4 = z2 + PP(0.346089, 157)
        #z3 = z2 + PP(1.03826, -164)
        z3 = z4 - PP(1.40988, ta + 318)
        c5 = z3 + PP(0.195985, 37)
        #c6 = z3 + PP(0.761613, -142)
        #z4 = z3 + PP(1.40988, -25)
        #c7 = z4 + PP(0.894386, -163)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLs(cls, ta=None, **kwargs):
        #M 47.3414,220.324 C 55.5077,221.911 92.3573,228.107 92.3573,220.324 92.3573,219.726 92.324743,219.09248 91.8415,218.736 91.362116,218.38237 89.936143,218.15179 89.936143,219.12349 89.936143,219.69422 90.050756,221.37505 90.050756,222.96226

        #z0 = P(0, -0)
        #c0 = P(2.87013, -0.557767)
        #c1 = P(15.8213, -2.73541)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 0.210173)
        #c3 = P(15.8098, 0.43283)
        #z2 = P(15.64, 0.558118)
        #c4 = P(15.4715, 0.682405)
        #c5 = P(14.9703, 0.763445)
        #z3 = P(14.9703, 0.421931)
        #c6 = P(14.9703, 0.221342)
        #c7 = P(15.0106, -0.369402)
        z4 = P(15.0106, -0.927243)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87013, -0.557767)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 0.210173)
        #z2 = z1 + P(-0.181283, 0.558118)
        #c3 = z2 + P(0.169841, -0.125288)
        #c4 = z2 + P(-0.168484, 0.124287)
        #z3 = z2 + P(-0.669657, -0.136187)
        #c5 = z3 + P(0, 0.341514)
        #c6 = z3 + P(0, -0.200589)
        #z4 = z3 + P(0.0402819, -1.34917)
        #c7 = z4 + P(0, 0.557841)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92382, -10)
        z1 = z0 + PP(15.8213, 0)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(0.210173, 90)
        z2 = z1 + PP(0.586822, 107)
        c3 = z2 + PP(0.211052, -36)
        c4 = z2 + PP(0.209366, 143)
        #z3 = z2 + PP(0.683364, -168)
        z3 = z4 - PP(1.34977, ta + 2)
        c5 = z3 + PP(0.341514, 90)
        #c6 = z3 + PP(0.200589, -90)
        #z4 = z3 + PP(1.34977, -88)
        #c7 = z4 + PP(0.557841, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLsl(cls, ta=None, **kwargs):
        #M 133.69,220.324 C 141.856,221.911 178.706,228.107 178.706,220.324 178.706,216.34287 175.03455,222.68987 174.73372,223.48288

        #z0 = P(0, -0)
        #c0 = P(2.87002, -0.557767)
        #c1 = P(15.8213, -2.73541)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 1.39921)
        #c3 = P(14.531, -0.831508)
        z2 = P(14.4252, -1.11022)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87002, -0.557767)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 1.39921)
        #z2 = z1 + P(-1.3961, -1.11022)
        #c3 = z2 + P(0.10573, 0.278711)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92372, -10)
        #z1 = z0 + PP(15.8213, 0)
        z1 = z2 - PP(1.78372, ta + -30)
        c1 = z1 + PP(2.73541, -90)
        #c2 = z1 + PP(1.39921, 90)
        #z2 = z1 + PP(1.78372, -141)
        #c3 = z2 + PP(0.298092, 69)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_ELCLsr(cls, ta=None, **kwargs):
        #M 220.038,220.324 C 228.205,221.911 265.054,228.107 265.054,220.324 265.054,219.726 264.67785,219.18921 264.19093,218.96091 263.60408,218.68576 262.55331,218.6326 262.26277,219.21198 261.67811,220.37788 263.40375,221.05176 264.17863,222.6237

        #z0 = P(0, -0)
        #c0 = P(2.87037, -0.557767)
        #c1 = P(15.8213, -2.73541)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 0.210173)
        #c3 = P(15.6891, 0.398833)
        #z2 = P(15.518, 0.479071)
        #c4 = P(15.3117, 0.575776)
        #c5 = P(14.9424, 0.594459)
        #z3 = P(14.8403, 0.39083)
        #c6 = P(14.6348, -0.0189367)
        #c7 = P(15.2413, -0.255778)
        z4 = P(15.5137, -0.808252)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87037, -0.557767)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 0.210173)
        #z2 = z1 + P(-0.303334, 0.479071)
        #c3 = z2 + P(0.171133, -0.0802383)
        #c4 = z2 + P(-0.206254, 0.0967042)
        #z3 = z2 + P(-0.677671, -0.088241)
        #c5 = z3 + P(0.102113, 0.203629)
        #c6 = z3 + P(-0.205485, -0.409767)
        #z4 = z3 + P(0.673348, -1.19908)
        #c7 = z4 + P(-0.272339, 0.552474)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92406, -10)
        z1 = z0 + PP(15.8213, 0)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(0.210173, 90)
        z2 = z1 + PP(0.567028, 122)
        c3 = z2 + PP(0.18901, -25)
        c4 = z2 + PP(0.227799, 154)
        #z3 = z2 + PP(0.683392, -172)
        z3 = z4 - PP(1.37521, ta + 4)
        c5 = z3 + PP(0.227798, 63)
        #c6 = z3 + PP(0.458403, -116)
        #z4 = z3 + PP(1.37521, -60)
        #c7 = z4 + PP(0.615951, 116)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLse(cls, ta=None, **kwargs):
        #M 47.3414,301.742 C 55.5077,303.329 92.3573,309.525 92.3573,301.742 92.3573,301.144 92.276778,300.52609 91.8415,300.155 91.158485,299.57271 89.34211,299.79087 89.407884,300.68599 89.454933,301.32629 90.2357,302.176 91.1673,303.79

        #z0 = P(0, -0)
        #c0 = P(2.87013, -0.557767)
        #c1 = P(15.8213, -2.73541)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 0.210173)
        #c3 = P(15.793, 0.427344)
        #z2 = P(15.64, 0.557767)
        #c4 = P(15.3999, 0.762418)
        #c5 = P(14.7616, 0.685744)
        #z3 = P(14.7847, 0.371145)
        #c6 = P(14.8012, 0.146105)
        #c7 = P(15.0756, -0.152534)
        z4 = P(15.403, -0.71979)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87013, -0.557767)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 0.210173)
        #z2 = z1 + P(-0.181283, 0.557767)
        #c3 = z2 + P(0.152983, -0.130423)
        #c4 = z2 + P(-0.240052, 0.204652)
        #z3 = z2 + P(-0.855318, -0.186622)
        #c5 = z3 + P(-0.0231169, 0.314599)
        #c6 = z3 + P(0.0165358, -0.22504)
        #z4 = z3 + P(0.618364, -1.09093)
        #c7 = z4 + P(-0.32742, 0.567256)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92382, -10)
        z1 = z0 + PP(15.8213, 0)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(0.210173, 90)
        z2 = z1 + PP(0.586487, 108)
        c3 = z2 + PP(0.201032, -40)
        c4 = z2 + PP(0.315448, 139)
        #z3 = z2 + PP(0.875441, -167)
        z3 = z4 - PP(1.254, ta + 1)
        c5 = z3 + PP(0.315447, 94)
        #c6 = z3 + PP(0.225646, -85)
        #z4 = z3 + PP(1.254, -60)
        #c7 = z4 + PP(0.654968, 119)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLser(cls, ta=None, **kwargs):
        #M 125.186,301.742 C 133.352,303.329 170.202,309.525 170.202,301.742 170.202,301.01254 169.8621,300.37062 169.29163,300.155 168.1971,299.74131 166.17801,300.13234 165.96763,301.28337 165.73128,302.57646 167.60175,302.7086 169.012,303.79

        #z0 = P(0, -0)
        #c0 = P(2.87002, -0.557767)
        #c1 = P(15.8213, -2.73541)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 0.256376)
        #c3 = P(15.7019, 0.481985)
        #z2 = P(15.5014, 0.557767)
        #c4 = P(15.1167, 0.703162)
        #c5 = P(14.407, 0.565731)
        #z3 = P(14.3331, 0.16119)
        #c6 = P(14.25, -0.293279)
        #c7 = P(14.9074, -0.339721)
        z4 = P(15.4031, -0.71979)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87002, -0.557767)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 0.256376)
        #z2 = z1 + P(-0.319959, 0.557767)
        #c3 = z2 + P(0.200497, -0.0757818)
        #c4 = z2 + P(-0.384683, 0.145395)
        #z3 = z2 + P(-1.16825, -0.396577)
        #c5 = z3 + P(0.0739401, 0.404541)
        #c6 = z3 + P(-0.0830675, -0.454469)
        #z4 = z3 + P(1.06997, -0.88098)
        #c7 = z4 + P(-0.495646, 0.380069)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92372, -10)
        z1 = z0 + PP(15.8213, 0)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(0.256376, 90)
        z2 = z1 + PP(0.643022, 119)
        c3 = z2 + PP(0.214341, -20)
        c4 = z2 + PP(0.411243, 159)
        #z3 = z2 + PP(1.23373, -161)
        z3 = z4 - PP(1.38599, ta + -1)
        c5 = z3 + PP(0.411243, 79)
        #c6 = z3 + PP(0.461998, -100)
        #z4 = z3 + PP(1.38599, -39)
        #c7 = z4 + PP(0.624594, 142)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLsel(cls, ta=None, **kwargs):
        #M 208.7,301.742 C 216.866,303.329 253.716,309.525 253.716,301.742 253.716,301.144 253.4096,300.43011 252.84945,300.06736 251.47995,299.18048 251.3469,302.76655 251.38187,304.39155

        #z0 = P(0, -0)
        #c0 = P(2.87002, -0.557767)
        #c1 = P(15.8213, -2.73541)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 0.210173)
        #c3 = P(15.7136, 0.461077)
        #z2 = P(15.5168, 0.588569)
        #c4 = P(15.0354, 0.900272)
        #c5 = P(14.9887, -0.360088)
        z3 = P(15.001, -0.931211)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87002, -0.557767)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73541)
        #c2 = z1 + P(0, 0.210173)
        #z2 = z1 + P(-0.304558, 0.588569)
        #c3 = z2 + P(0.19687, -0.127492)
        #c4 = z2 + P(-0.481324, 0.311703)
        #z3 = z2 + P(-0.515795, -1.51978)
        #c5 = z3 + P(-0.0122906, 0.571122)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92372, -10)
        z1 = z0 + PP(15.8213, 0)
        c1 = z1 + PP(2.73541, -90)
        c2 = z1 + PP(0.210173, 90)
        #z2 = z1 + PP(0.662698, 117)
        z2 = z3 - PP(1.60492, ta + -19)
        c3 = z2 + PP(0.234547, -32)
        #c4 = z2 + PP(0.573438, 147)
        #z3 = z2 + PP(1.60492, -108)
        #c5 = z3 + PP(0.571255, 91)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLsw(cls, ta=None, **kwargs):
        #M 47.3414,377.434 C 55.5077,379.021 92.3573,385.216 92.3573,377.434 92.3573,375.43381 91.07089,375.98767 90.524172,377.05454 89.957237,378.16086 89.29406,379.35074 88.92263,380.45423

        #z0 = P(0, -0)
        #c0 = P(2.87013, -0.557767)
        #c1 = P(15.8213, -2.73506)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 0.702987)
        #c3 = P(15.3692, 0.508327)
        #z2 = P(15.177, 0.133365)
        #c4 = P(14.9778, -0.255462)
        #c5 = P(14.7447, -0.673657)
        z3 = P(14.6141, -1.06149)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87013, -0.557767)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73506)
        #c2 = z1 + P(0, 0.702987)
        #z2 = z1 + P(-0.644271, 0.133365)
        #c3 = z2 + P(0.192149, 0.374962)
        #c4 = z2 + P(-0.199255, -0.388827)
        #z3 = z2 + P(-0.562878, -1.19485)
        #c5 = z3 + P(0.130543, 0.387832)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92382, -10)
        z1 = z0 + PP(15.8213, 0)
        c1 = z1 + PP(2.73506, -90)
        c2 = z1 + PP(0.702987, 90)
        #z2 = z1 + PP(0.65793, 168)
        z2 = z3 - PP(1.3208, ta + -6)
        c3 = z2 + PP(0.421329, 62)
        #c4 = z2 + PP(0.436908, -117)
        #z3 = z2 + PP(1.3208, -115)
        #c5 = z3 + PP(0.409213, 71)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])
    
    @classmethod
    def path_ELCLswr(cls, ta=None, **kwargs):
        #M 129.812,377.434 C 137.978,379.021 174.828,385.216 174.828,377.434 174.828,376.836 174.75148,376.17026 174.312,375.846 173.87667,375.5248 172.6506,374.90717 172.39018,375.83609 172.10185,376.86457 173.27564,377.78036 173.638,379.482

        #z0 = P(0, -0)
        #c0 = P(2.87002, -0.557767)
        #c1 = P(15.8213, -2.73506)
        #z1 = P(15.8213, -0)
        #c2 = P(15.8213, 0.210173)
        #c3 = P(15.7944, 0.444154)
        #z2 = P(15.64, 0.558118)
        #c4 = P(15.487, 0.671007)
        #c5 = P(15.056, 0.888079)
        #z3 = P(14.9645, 0.561601)
        #c6 = P(14.8632, 0.200132)
        #c7 = P(15.2757, -0.121732)
        z4 = P(15.4031, -0.71979)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.87002, -0.557767)
        #z1 = z0 + P(15.8213, 0)
        #c1 = z1 + P(0, -2.73506)
        #c2 = z1 + P(0, 0.210173)
        #z2 = z1 + P(-0.181353, 0.558118)
        #c3 = z2 + P(0.15446, -0.113964)
        #c4 = z2 + P(-0.153001, 0.112889)
        #z3 = z2 + P(-0.675443, 0.00348297)
        #c5 = z3 + P(0.0915272, 0.326478)
        #c6 = z3 + P(-0.101336, -0.361469)
        #z4 = z3 + P(0.438559, -1.28139)
        #c7 = z4 + P(-0.127355, 0.598058)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92372, -10)
        z1 = z0 + PP(15.8213, 0)
        c1 = z1 + PP(2.73506, -90)
        c2 = z1 + PP(0.210173, 90)
        z2 = z1 + PP(0.586843, 108)
        c3 = z2 + PP(0.191952, -36)
        c4 = z2 + PP(0.19014, 143)
        #z3 = z2 + PP(0.675452, 179)
        z3 = z4 - PP(1.35436, ta + 7)
        c5 = z3 + PP(0.339065, 74)
        #c6 = z3 + PP(0.375405, -105)
        #z4 = z3 + PP(1.35436, -71)
        #c7 = z4 + PP(0.611468, 102)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLswl(cls, ta=None, **kwargs):
        #M 398.031,670.367 C 406.186,671.659 443.604,679.966 443.604,672.242 443.604,670.264 440.7216,672.6948 438.7806,675.2708

        #z0 = P(0, -0)
        #c0 = P(2.8769, -0.455789)
        #c1 = P(16.0771, -3.38631)
        #z1 = P(16.0771, -0.661458)
        #c2 = P(16.0771, 0.0363361)
        #c3 = P(15.0603, -0.821196)
        #z2 = P(14.3756, -1.72995)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.8769, -0.455789)
        #z1 = z0 + P(16.0771, -0.661458)
        #c1 = z1 + P(0, -2.72486)
        #c2 = z1 + P(0, 0.697794)
        #z2 = z1 + P(-1.70159, -1.06849)
        #c3 = z2 + P(0.684742, 0.908756)

        z0 = P(0, -0)
        c0 = z0 + PP(2.91278, -9)
        z1 = z0 + PP(16.0907, -2)
        #z1 = z2 - PP(2.00925, ta + -20)
        c1 = z1 + PP(2.72486, -90)
        c2 = z1 + PP(0.697794, 90)
        z2 = z1 + PP(2.00925, -147)
        c3 = z2 + PP(1.13785, 53)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_ELCLE(cls, ta=None, **kwargs):
        #M 287.493,117.418 C 295.629,119 332.34,124.12461 332.34,116.37061 332.34,115.39961 331.29112,115.32404 330.624,115.33961 329.42553,115.36758 327.45729,116.14746 327.631,117.33361 327.809,118.54904 329.633,118.41161 331.155,118.41161 332.57751,118.41161 334.01364,118.41161 335.37175,118.41161

        #z0 = P(0, -0)
        #c0 = P(2.8702, -0.558094)
        #c1 = P(15.821, -2.36594)
        #z1 = P(15.821, 0.369496)
        #c2 = P(15.821, 0.712043)
        #c3 = P(15.451, 0.738703)
        #z2 = P(15.2157, 0.73321)
        #c4 = P(14.7929, 0.723343)
        #c5 = P(14.0985, 0.448218)
        #z3 = P(14.1598, 0.0297709)
        #c6 = P(14.2226, -0.399006)
        #c7 = P(14.8661, -0.350524)
        #z4 = P(15.403, -0.350524)
        #c8 = P(15.9048, -0.350524)
        #c9 = P(16.4114, -0.350524)
        z5 = P(16.8906, -0.350524)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.8702, -0.558094)
        #z1 = z0 + P(15.821, 0.369496)
        #c1 = z1 + P(0, -2.73544)
        #c2 = z1 + P(0, 0.342547)
        #z2 = z1 + P(-0.605367, 0.363714)
        #c3 = z2 + P(0.235345, 0.00549275)
        #c4 = z2 + P(-0.422794, -0.00986719)
        #z3 = z2 + P(-1.05586, -0.703439)
        #c5 = z3 + P(-0.061281, 0.418447)
        #c6 = z3 + P(0.0627944, -0.428777)
        #z4 = z3 + P(1.24319, -0.380294)
        #c7 = z4 + P(-0.536928, 0)
        #c8 = z4 + P(0.50183, 0)
        #z5 = z4 + P(1.48758, 0)
        #c9 = z5 + P(-0.479111, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.92396, -11)
        z1 = z0 + PP(15.8253, 1)
        c1 = z1 + PP(2.73544, -90)
        c2 = z1 + PP(0.342547, 90)
        z2 = z1 + PP(0.706227, 149)
        c3 = z2 + PP(0.235409, 1)
        c4 = z2 + PP(0.422909, -178)
        z3 = z2 + PP(1.26873, -146)
        c5 = z3 + PP(0.422911, 98)
        c6 = z3 + PP(0.43335, -81)
        z4 = z3 + PP(1.30005, -17)
        #z4 = z5 - PP(1.48758, ta + 0)
        c7 = z4 + PP(0.536928, 180)
        c8 = z4 + PP(0.50183, 0)
        z5 = z4 + PP(1.48758, 0)
        c9 = z5 + PP(0.479111, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

class CharNoba(CharNe):
    def __init__(self, name='noba', kana='„ÅÆ„Å∞'):
        super().__init__(name=name, kana=kana)
        
class CharNobi(CharNe):
    def __init__(self, name='nobi', kana='„ÅÆ„Å≥'):
        super().__init__(name=name, kana=kana)
        
class CharNobu(CharNe):
    def __init__(self, name='nobi', kana='„ÅÆ„Å∂'):
        super().__init__(name=name, kana=kana)

class CharNobe(CharNe):
    def __init__(self, name='nobe', kana='„ÅÆ„Åπ'):
        super().__init__(name=name, kana=kana)

class CharNetsu(CharNe):
    def __init__(self, name='netsu', kana='„Å≠„Å§'):
        super().__init__(name=name, kana=kana)

class CharNen(CharNe):
    def __init__(self, name='nen', kana='„Å≠„Çì',
                 model='EL16CL1E1F', head_type='EL',
                 tail_type='EL16CL1E1F'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_ELCLE()]

class CharNeku(CharNe):
    def __init__(self, name='neku', kana='„Å≠„Åè',
                 model='BEL16CL1', head_type='BEL',
                 tail_type='EL16CL1'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharNetsu(CharNe):
    def __init__(self, name='netsu', kana='„Å≠„Å§',
                 model='CL1EL16CL1', head_type='CL1EL',
                 tail_type='EL16CL1'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.head_circles = {'', 'P'}

    def get_paths(self):
        if getattr(self.before, 'tail_type', '') in self.head_circles:
            return super(WasedaChar, self).get_paths()
        else:
            return super(WasedaChar, self).get_paths(me='ELCL')

    @classmethod
    def path_CLELCL(cls, ta=None, **kwargs):
        #M 51.802319,59.330436 C 51.965768,57.78249 50.350475,56.633148 49.162181,56.849015 48.432692,56.981535 46.151455,58.446425 48.180747,58.845069 56.343862,60.44867 92.3573,66.4601 92.3573,58.6772 92.3573,58.0796 92.2038,57.4922 91.8415,57.0898 91.5009,56.6692 91.0166,56.3784 90.4452,56.3784 88.2779,56.3784 90.2357,59.1117 91.1673,60.7253

        #z0 = P(0, -0)
        #c0 = P(0.0576612, 0.546081)
        #c1 = P(-0.512178, 0.951543)
        #z1 = P(-0.931382, 0.87539)
        #c2 = P(-1.18873, 0.82864)
        #c3 = P(-1.9935, 0.311859)
        #z2 = P(-1.27761, 0.171227)
        #c4 = P(1.60216, -0.394488)
        #c5 = P(14.3069, -2.51519)
        #z3 = P(14.3069, 0.230447)
        #c6 = P(14.3069, 0.441267)
        #c7 = P(14.2527, 0.648489)
        #z4 = P(14.1249, 0.790447)
        #c8 = P(14.0048, 0.938825)
        #c9 = P(13.8339, 1.04141)
        #z5 = P(13.6323, 1.04141)
        #c10 = P(12.8678, 1.04141)
        #c11 = P(13.5584, 0.0771652)
        z6 = P(13.8871, -0.492077)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0576612, 0.546081)
        #z1 = z0 + P(-0.931382, 0.87539)
        #c1 = z1 + P(0.419204, 0.0761531)
        #c2 = z1 + P(-0.257348, -0.0467501)
        #z2 = z1 + P(-0.346228, -0.704163)
        #c3 = z2 + P(-0.715889, 0.140633)
        #c4 = z2 + P(2.87977, -0.565715)
        #z3 = z2 + P(15.5845, 0.0592205)
        #c5 = z3 + P(0, -2.74563)
        #c6 = z3 + P(0, 0.21082)
        #z4 = z3 + P(-0.181963, 0.559999)
        #c7 = z4 + P(0.127811, -0.141958)
        #c8 = z4 + P(-0.120156, 0.148378)
        #z5 = z4 + P(-0.492584, 0.250966)
        #c9 = z5 + P(0.201577, 0)
        #c10 = z5 + P(-0.764575, 0)
        #z6 = z5 + P(0.254741, -1.53349)
        #c11 = z6 + P(-0.328648, 0.569242)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549117, 83)
        z1 = z0 + PP(1.27819, 136)
        c1 = z1 + PP(0.426065, 10)
        c2 = z1 + PP(0.261559, -169)
        z2 = z1 + PP(0.784678, -116)
        c3 = z2 + PP(0.729572, 168)
        c4 = z2 + PP(2.93481, -11)
        z3 = z2 + PP(15.5846, 0)
        c5 = z3 + PP(2.74563, -90)
        c6 = z3 + PP(0.21082, 90)
        z4 = z3 + PP(0.588821, 108)
        c7 = z4 + PP(0.191018, -48)
        c8 = z4 + PP(0.190928, 129)
        z5 = z4 + PP(0.552831, 153)
        #z5 = z6 - PP(1.5545, ta + -19)
        c9 = z5 + PP(0.201577, 0)
        c10 = z5 + PP(0.764575, 180)
        z6 = z5 + PP(1.5545, -80)
        c11 = z6 + PP(0.657302, 119)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            #curve(),
            endknot(*z6)])

    @classmethod
    def path_CLELCLe(cls, ta=None, **kwargs):
        #M 126.478,116.893 C 126.668,115.348 125.061,114.166 123.872,114.376 123.144,114.518 120.874,115.945 122.896,116.375 131.063,117.963 167.073,124.158 167.073,116.375 167.01301,114.98097 166.09089,115.21918 165.43389,115.2699 164.20465,115.3648 162.37154,116.90252 162.72079,117.78377 163.07004,118.66502 164.99429,118.416 165.926,118.416

        #z0 = P(0, -0)
        #c0 = P(0.0670278, 0.545042)
        #c1 = P(-0.499886, 0.962025)
        #z1 = P(-0.919339, 0.887942)
        #c2 = P(-1.17616, 0.837847)
        #c3 = P(-1.97697, 0.334433)
        #z2 = P(-1.26365, 0.182739)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.321, -2.56293)
        #z3 = P(14.321, 0.182739)
        #c6 = P(14.2999, 0.674522)
        #c7 = P(13.9745, 0.590487)
        #z4 = P(13.7428, 0.572594)
        #c8 = P(13.3091, 0.539115)
        #c9 = P(12.6624, -0.00335844)
        #z5 = P(12.7857, -0.314244)
        #c10 = P(12.9089, -0.625129)
        #c11 = P(13.5877, -0.537281)
        z6 = P(13.9164, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0670278, 0.545042)
        #z1 = z0 + P(-0.919339, 0.887942)
        #c1 = z1 + P(0.419453, 0.0740833)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.344311, -0.705203)
        #c3 = z2 + P(-0.713317, 0.151694)
        #c4 = z2 + P(2.88114, -0.560211)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74567)
        #c6 = z3 + P(-0.0211631, 0.491783)
        #z4 = z3 + P(-0.578242, 0.389855)
        #c7 = z4 + P(0.231775, 0.0178929)
        #c8 = z4 + P(-0.433649, -0.0334786)
        #z5 = z4 + P(-0.957121, -0.886837)
        #c9 = z5 + P(-0.123208, 0.310885)
        #c10 = z5 + P(0.123208, -0.310885)
        #z6 = z5 + P(1.13073, -0.223037)
        #c11 = z6 + P(-0.328687, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549148, 82)
        z1 = z0 + PP(1.27813, 135)
        c1 = z1 + PP(0.425945, 10)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784768, -116)
        c3 = z2 + PP(0.729268, 167)
        c4 = z2 + PP(2.93509, -11)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74567, -90)
        c6 = z3 + PP(0.492238, 92)
        z4 = z3 + PP(0.697388, 146)
        c7 = z4 + PP(0.232465, 4)
        c8 = z4 + PP(0.434939, -175)
        #z5 = z4 + PP(1.30482, -137)
        z5 = z6 - PP(1.15251, ta + -11)
        c9 = z5 + PP(0.33441, 111)
        #c10 = z5 + PP(0.33441, -68)
        #z6 = z5 + PP(1.15251, -11)
        #c11 = z6 + PP(0.328687, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLer(cls, ta=None, **kwargs):
        #M 216.953,116.893 C 217.143,115.348 215.536,114.166 214.347,114.376 213.619,114.518 211.349,115.945 213.371,116.375 221.538,117.963 257.548,124.158 257.548,116.375 257.548,115.778 257.0846,115.16212 256.55444,115.12911 255.36629,115.05515 254.11645,116.7428 253.99865,117.62359 253.89025,118.43406 254.02082,119.65547 256.401,118.416

        #z0 = P(0, -0)
        #c0 = P(0.0670278, 0.545042)
        #c1 = P(-0.499886, 0.962025)
        #z1 = P(-0.919339, 0.887942)
        #c2 = P(-1.17616, 0.837847)
        #c3 = P(-1.97697, 0.334433)
        #z2 = P(-1.26365, 0.182739)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.321, -2.56293)
        #z3 = P(14.321, 0.182739)
        #c6 = P(14.321, 0.393347)
        #c7 = P(14.1575, 0.610616)
        #z4 = P(13.9705, 0.622261)
        #c8 = P(13.5514, 0.648353)
        #c9 = P(13.1104, 0.0529872)
        #z5 = P(13.0689, -0.257736)
        #c10 = P(13.0306, -0.543652)
        #c11 = P(13.0767, -0.974538)
        z6 = P(13.9164, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0670278, 0.545042)
        #z1 = z0 + P(-0.919339, 0.887942)
        #c1 = z1 + P(0.419453, 0.0740833)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.344311, -0.705203)
        #c3 = z2 + P(-0.713317, 0.151694)
        #c4 = z2 + P(2.88114, -0.560211)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74567)
        #c6 = z3 + P(0, 0.210608)
        #z4 = z3 + P(-0.350506, 0.439522)
        #c7 = z4 + P(0.187029, -0.0116452)
        #c8 = z4 + P(-0.419153, 0.0260914)
        #z5 = z4 + P(-0.901626, -0.879997)
        #c9 = z5 + P(0.0415572, 0.310723)
        #c10 = z5 + P(-0.0382411, -0.285916)
        #z6 = z5 + P(0.847496, -0.279545)
        #c11 = z6 + P(-0.839675, -0.437257)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549148, 82)
        z1 = z0 + PP(1.27813, 135)
        c1 = z1 + PP(0.425945, 10)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784768, -116)
        c3 = z2 + PP(0.729268, 167)
        c4 = z2 + PP(2.93509, -11)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74567, -90)
        c6 = z3 + PP(0.210608, 90)
        z4 = z3 + PP(0.562169, 128)
        c7 = z4 + PP(0.187391, -3)
        c8 = z4 + PP(0.419964, 176)
        #z5 = z4 + PP(1.25989, -135)
        z5 = z6 - PP(0.892409, ta + 314)
        c9 = z5 + PP(0.31349, 82)
        #c10 = z5 + PP(0.288462, -97)
        #z6 = z5 + PP(0.892409, -18)
        #c11 = z6 + PP(0.946704, -152)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLel(cls, ta=None, **kwargs):
        #M 47.3414,116.893 C 47.5311,115.348 45.9245,114.166 44.7351,114.376 44.0073,114.518 41.7371,115.945 43.76,116.375 51.9263,117.963 87.9369,124.158 87.9369,116.375 87.9369,115.778 87.7834,115.19 87.4211,114.788 87.0805,114.367 86.050418,113.93955 85.479018,113.93955 83.311718,113.93955 85.190215,117.49642 86.79,118.416

        #z0 = P(0, -0)
        #c0 = P(0.0669219, 0.545042)
        #c1 = P(-0.499851, 0.962025)
        #z1 = P(-0.919445, 0.887942)
        #c2 = P(-1.1762, 0.837847)
        #c3 = P(-1.97707, 0.334433)
        #z2 = P(-1.26344, 0.182739)
        #c4 = P(1.61745, -0.377472)
        #c5 = P(14.3212, -2.56293)
        #z3 = P(14.3212, 0.182739)
        #c6 = P(14.3212, 0.393347)
        #c7 = P(14.267, 0.600781)
        #z4 = P(14.1392, 0.742597)
        #c8 = P(14.0191, 0.891117)
        #c9 = P(13.6557, 1.04191)
        #z5 = P(13.4541, 1.04191)
        #c10 = P(12.6895, 1.04191)
        #c11 = P(13.3522, -0.212873)
        z6 = P(13.9166, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0669219, 0.545042)
        #z1 = z0 + P(-0.919445, 0.887942)
        #c1 = z1 + P(0.419594, 0.0740833)
        #c2 = z1 + P(-0.256752, -0.0500944)
        #z2 = z1 + P(-0.343994, -0.705203)
        #c3 = z2 + P(-0.713634, 0.151694)
        #c4 = z2 + P(2.88089, -0.560211)
        #z3 = z2 + P(15.5846, 0)
        #c5 = z3 + P(0, -2.74567)
        #c6 = z3 + P(0, 0.210608)
        #z4 = z3 + P(-0.181963, 0.559858)
        #c7 = z4 + P(0.127811, -0.141817)
        #c8 = z4 + P(-0.120156, 0.148519)
        #z5 = z4 + P(-0.685123, 0.299314)
        #c9 = z5 + P(0.201577, 0)
        #c10 = z5 + P(-0.764575, 0)
        #z6 = z5 + P(0.462485, -1.57919)
        #c11 = z6 + P(-0.564369, 0.324407)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549135, 83)
        z1 = z0 + PP(1.27821, 135)
        c1 = z1 + PP(0.426084, 10)
        c2 = z1 + PP(0.261593, -168)
        z2 = z1 + PP(0.784629, -116)
        c3 = z2 + PP(0.729579, 167)
        c4 = z2 + PP(2.93485, -11)
        z3 = z2 + PP(15.5846, 0)
        c5 = z3 + PP(2.74567, -90)
        c6 = z3 + PP(0.210608, 90)
        z4 = z3 + PP(0.588687, 108)
        c7 = z4 + PP(0.190913, -47)
        c8 = z4 + PP(0.191038, 128)
        #z5 = z4 + PP(0.747652, 156)
        z5 = z6 - PP(1.64552, ta + -43)
        c9 = z5 + PP(0.201577, 0)
        #c10 = z5 + PP(0.764575, 180)
        #z6 = z5 + PP(1.64552, -73)
        #c11 = z6 + PP(0.650962, 150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLne(cls, ta=None, **kwargs):
        #M 632.793,116.893 C 632.982,115.348 631.376,114.166 630.186,114.376 629.459,114.518 627.189,115.945 629.211,116.375 637.378,117.963 673.388,124.158 673.388,116.375 673.388,115.778 672.76779,115.17637 672.21799,115.20843 671.32014,115.26079 670.60737,116.4257 670.5417,117.32268 670.49007,118.02792 670.40666,119.70051 672.241,118.416

        #z0 = P(0, -0)
        #c0 = P(0.066675, 0.545042)
        #c1 = P(-0.499886, 0.962025)
        #z1 = P(-0.919692, 0.887942)
        #c2 = P(-1.17616, 0.837847)
        #c3 = P(-1.97697, 0.334433)
        #z2 = P(-1.26365, 0.182739)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.321, -2.56293)
        #z3 = P(14.321, 0.182739)
        #c6 = P(14.321, 0.393347)
        #c7 = P(14.1022, 0.605589)
        #z4 = P(13.9083, 0.594279)
        #c8 = P(13.5915, 0.575807)
        #c9 = P(13.3401, 0.164853)
        #z5 = P(13.3169, -0.151582)
        #c10 = P(13.2987, -0.400375)
        #c11 = P(13.2693, -0.990427)
        z6 = P(13.9164, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.066675, 0.545042)
        #z1 = z0 + P(-0.919692, 0.887942)
        #c1 = z1 + P(0.419806, 0.0740833)
        #c2 = z1 + P(-0.256469, -0.0500944)
        #z2 = z1 + P(-0.343958, -0.705203)
        #c3 = z2 + P(-0.713317, 0.151694)
        #c4 = z2 + P(2.88114, -0.560211)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74567)
        #c6 = z3 + P(0, 0.210608)
        #z4 = z3 + P(-0.412754, 0.41154)
        #c7 = z4 + P(0.193957, 0.0113101)
        #c8 = z4 + P(-0.316742, -0.0184714)
        #z5 = z4 + P(-0.591358, -0.74586)
        #c9 = z5 + P(0.0231669, 0.316435)
        #c10 = z5 + P(-0.0182139, -0.248793)
        #z6 = z5 + P(0.599475, -0.385699)
        #c11 = z6 + P(-0.647114, -0.453147)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549105, 83)
        z1 = z0 + PP(1.27839, 136)
        c1 = z1 + PP(0.426292, 10)
        c2 = z1 + PP(0.261316, -168)
        z2 = z1 + PP(0.784613, -116)
        c3 = z2 + PP(0.729268, 167)
        c4 = z2 + PP(2.93509, -11)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74567, -90)
        c6 = z3 + PP(0.210608, 90)
        z4 = z3 + PP(0.582864, 135)
        c7 = z4 + PP(0.194287, 3)
        c8 = z4 + PP(0.31728, -176)
        #z5 = z4 + PP(0.951847, -128)
        z5 = z6 - PP(0.712835, ta + 292)
        c9 = z5 + PP(0.317282, 85)
        #c10 = z5 + PP(0.249459, -94)
        #z6 = z5 + PP(0.712835, -32)
        #c11 = z6 + PP(0.789999, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLner(cls, ta=None, **kwargs):
        #M 501.4598,241.54792 C 500.7048,239.67892 500.2628,239.09592 498.9308,238.73892 498.1018,238.50092 495.5668,240.50892 497.2348,240.83292 505.3708,242.41392 542.0828,248.58692 542.0828,240.83292 542.1608,236.33592 538.7278,243.06492 538.3028,243.93592

        #z0 = P(0, -0)
        #c0 = P(-0.266347, 0.659342)
        #c1 = P(-0.422275, 0.865011)
        #z1 = P(-0.892175, 0.990953)
        #c2 = P(-1.18463, 1.07491)
        #c3 = P(-2.07892, 0.366536)
        #z2 = P(-1.49049, 0.252236)
        #c4 = P(1.37971, -0.305506)
        #c5 = P(14.3309, -2.4832)
        #z3 = P(14.3309, 0.252236)
        #c6 = P(14.3584, 1.83868)
        #c7 = P(13.1473, -0.535164)
        z4 = P(12.9974, -0.842433)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.266347, 0.659342)
        #z1 = z0 + P(-0.892175, 0.990953)
        #c1 = z1 + P(0.4699, -0.125942)
        #c2 = z1 + P(-0.292453, 0.0839611)
        #z2 = z1 + P(-0.598311, -0.738717)
        #c3 = z2 + P(-0.588433, 0.1143)
        #c4 = z2 + P(2.8702, -0.557742)
        #z3 = z2 + P(15.8214, 0)
        #c5 = z3 + P(0, -2.73544)
        #c6 = z3 + P(0.0275167, 1.58644)
        #z4 = z3 + P(-1.3335, -1.09467)
        #c7 = z4 + P(0.149931, 0.307269)

        z0 = P(0, -0)
        c0 = z0 + PP(0.711106, 111)
        z1 = z0 + PP(1.3334, 131)
        c1 = z1 + PP(0.486485, -15)
        c2 = z1 + PP(0.304266, 163)
        z2 = z1 + PP(0.95062, -129)
        c3 = z2 + PP(0.599432, 169)
        c4 = z2 + PP(2.92389, -10)
        z3 = z2 + PP(15.8214, 0)
        #z3 = z4 - PP(1.72526, ta + -23)
        c5 = z3 + PP(2.73544, -90)
        c6 = z3 + PP(1.58668, 89)
        z4 = z3 + PP(1.72526, -140)
        c7 = z4 + PP(0.341897, 63)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_CLELCLnel(cls, ta=None, **kwargs):
        #M 556.438,116.893 C 556.627,115.348 555.021,114.166 553.831,114.376 553.103,114.518 550.833,115.945 552.856,116.375 561.023,117.963 597.033,124.158 597.033,116.375 597.033,115.778 596.7853,115.41652 596.38488,115.333 595.23631,115.09344 593.47511,116.43167 593.48601,117.32947 593.49667,118.20757 594.48928,118.71009 595.886,118.416

        #z0 = P(0, -0)
        #c0 = P(0.066675, 0.545042)
        #c1 = P(-0.499886, 0.962025)
        #z1 = P(-0.919692, 0.887942)
        #c2 = P(-1.17651, 0.837847)
        #c3 = P(-1.97732, 0.334433)
        #z2 = P(-1.26365, 0.182739)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.321, -2.56293)
        #z3 = P(14.321, 0.182739)
        #c6 = P(14.321, 0.393347)
        #c7 = P(14.2336, 0.520869)
        #z4 = P(14.0924, 0.550333)
        #c8 = P(13.6872, 0.634845)
        #c9 = P(13.0659, 0.162747)
        #z5 = P(13.0697, -0.153977)
        #c10 = P(13.0735, -0.463751)
        #c11 = P(13.4236, -0.641029)
        z6 = P(13.9164, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.066675, 0.545042)
        #z1 = z0 + P(-0.919692, 0.887942)
        #c1 = z1 + P(0.419806, 0.0740833)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.343958, -0.705203)
        #c3 = z2 + P(-0.713669, 0.151694)
        #c4 = z2 + P(2.88114, -0.560211)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74567)
        #c6 = z3 + P(0, 0.210608)
        #z4 = z3 + P(-0.228642, 0.367594)
        #c7 = z4 + P(0.141259, -0.029464)
        #c8 = z4 + P(-0.40519, 0.0845114)
        #z5 = z4 + P(-1.02266, -0.70431)
        #c9 = z5 + P(-0.00384528, 0.316724)
        #c10 = z5 + P(0.00376061, -0.309774)
        #z6 = z5 + P(0.846663, -0.383304)
        #c11 = z6 + P(-0.492732, -0.103748)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549105, 83)
        z1 = z0 + PP(1.27839, 136)
        c1 = z1 + PP(0.426292, 10)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784613, -116)
        c3 = z2 + PP(0.729613, 168)
        c4 = z2 + PP(2.93509, -11)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74567, -90)
        c6 = z3 + PP(0.210608, 90)
        z4 = z3 + PP(0.432901, 121)
        c7 = z4 + PP(0.144299, -11)
        c8 = z4 + PP(0.41391, 168)
        #z5 = z4 + PP(1.24172, -145)
        z5 = z6 - PP(0.929387, ta + 324)
        c9 = z5 + PP(0.316747, 90)
        #c10 = z5 + PP(0.309797, -89)
        #z6 = z5 + PP(0.929387, -24)
        #c11 = z6 + PP(0.503536, -168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLs(cls, ta=None, **kwargs):
        #M 363.887,116.893 C 364.077,115.348 362.47,114.166 361.281,114.376 360.553,114.518 358.283,115.945 360.306,116.375 368.472,117.963 404.483,124.158 404.483,116.375 404.46748,115.11893 403.74479,114.08975 403.00417,113.97952 400.86078,113.66052 402.08174,117.08275 402.08174,118.94665

        #z0 = P(0, -0)
        #c0 = P(0.0670278, 0.545042)
        #c1 = P(-0.499886, 0.962025)
        #z1 = P(-0.919339, 0.887942)
        #c2 = P(-1.17616, 0.837847)
        #c3 = P(-1.97697, 0.334433)
        #z2 = P(-1.2633, 0.182739)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.3214, -2.56293)
        #z3 = P(14.3214, 0.182739)
        #c6 = P(14.3159, 0.625852)
        #c7 = P(14.0609, 0.988924)
        #z4 = P(13.7997, 1.02781)
        #c8 = P(13.0435, 1.14035)
        #c9 = P(13.4743, -0.0669396)
        z5 = P(13.4743, -0.724482)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0670278, 0.545042)
        #z1 = z0 + P(-0.919339, 0.887942)
        #c1 = z1 + P(0.419453, 0.0740833)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.343958, -0.705203)
        #c3 = z2 + P(-0.713669, 0.151694)
        #c4 = z2 + P(2.88078, -0.560211)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74567)
        #c6 = z3 + P(-0.00547511, 0.443114)
        #z4 = z3 + P(-0.521698, 0.845072)
        #c7 = z4 + P(0.261274, -0.0388867)
        #c8 = z4 + P(-0.75614, 0.112536)
        #z5 = z4 + P(-0.325413, -1.75229)
        #c9 = z5 + P(0, 0.657543)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549148, 82)
        z1 = z0 + PP(1.27813, 135)
        c1 = z1 + PP(0.425945, 10)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784613, -116)
        c3 = z2 + PP(0.729613, 168)
        c4 = z2 + PP(2.93475, -11)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74567, -90)
        c6 = z3 + PP(0.443147, 90)
        #z4 = z3 + PP(0.993134, 121)
        z4 = z5 - PP(1.78225, ta + -10)
        c7 = z4 + PP(0.264152, -8)
        #c8 = z4 + PP(0.764469, 171)
        #z5 = z4 + PP(1.78225, -100)
        #c9 = z5 + PP(0.657543, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_CLELCLsl(cls, ta=None, **kwargs):
        #M 608.76967,326.7781 C 608.01279,324.90928 607.56153,324.34842 606.23388,323.97466 605.40402,323.74104 602.86281,325.75476 604.5328,326.06485 612.6814,327.57789 649.488,334.257 649.488,326.503 649.488,324.39 646.814,326.079 645.109,329.031

        #z0 = P(0, -0)
        #c0 = P(-0.26701, 0.659278)
        #c1 = P(-0.426205, 0.857137)
        #z1 = P(-0.89457, 0.988991)
        #c2 = P(-1.18733, 1.07141)
        #c3 = P(-2.08381, 0.361012)
        #z2 = P(-1.49467, 0.251619)
        #c4 = P(1.37997, -0.282148)
        #c5 = P(14.3645, -2.63839)
        #z3 = P(14.3645, 0.0970492)
        #c6 = P(14.3645, 0.842469)
        #c7 = P(13.4212, 0.246627)
        z4 = P(12.8197, -0.794773)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.26701, 0.659278)
        #z1 = z0 + P(-0.89457, 0.988991)
        #c1 = z1 + P(0.468365, -0.131854)
        #c2 = z1 + P(-0.292756, 0.0824159)
        #z2 = z1 + P(-0.600103, -0.737373)
        #c3 = z2 + P(-0.589135, 0.109393)
        #c4 = z2 + P(2.87465, -0.533767)
        #z3 = z2 + P(15.8592, -0.15457)
        #c5 = z3 + P(0, -2.73544)
        #c6 = z3 + P(0, 0.745419)
        #z4 = z3 + P(-1.54481, -0.891822)
        #c7 = z4 + P(0.601486, 1.0414)

        z0 = P(0, -0)
        c0 = z0 + PP(0.711296, 112)
        z1 = z0 + PP(1.33355, 132)
        c1 = z1 + PP(0.486571, -15)
        c2 = z1 + PP(0.304136, 164)
        z2 = z1 + PP(0.950706, -129)
        c3 = z2 + PP(0.599206, 169)
        c4 = z2 + PP(2.92378, -10)
        #z3 = z2 + PP(15.8599, 0)
        z3 = z4 - PP(1.78376, ta + -29)
        c5 = z3 + PP(2.73544, -90)
        #c6 = z3 + PP(0.745419, 90)
        #z4 = z3 + PP(1.78376, -150)
        #c7 = z4 + PP(1.20262, 59)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_CLELCLsr(cls, ta=None, **kwargs):
        #M 296.089,116.893 C 296.279,115.348 294.672,114.166 293.483,114.376 292.755,114.518 290.485,115.945 292.508,116.375 300.674,117.963 336.685,124.158 336.685,116.375 336.685,115.778 336.531,115.19 336.169,114.788 335.828,114.367 335.344,114.076 334.773,114.076 332.605,114.076 334.52266,116.8535 335.538,118.416

        #z0 = P(0, -0)
        #c0 = P(0.0670278, 0.545042)
        #c1 = P(-0.499886, 0.962025)
        #z1 = P(-0.919339, 0.887942)
        #c2 = P(-1.17616, 0.837847)
        #c3 = P(-1.97697, 0.334433)
        #z2 = P(-1.2633, 0.182739)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.3214, -2.56293)
        #z3 = P(14.3214, 0.182739)
        #c6 = P(14.3214, 0.393347)
        #c7 = P(14.267, 0.600781)
        #z4 = P(14.1393, 0.742597)
        #c8 = P(14.019, 0.891117)
        #c9 = P(13.8483, 0.993775)
        #z5 = P(13.6469, 0.993775)
        #c10 = P(12.882, 0.993775)
        #c11 = P(13.5585, 0.0139347)
        z6 = P(13.9167, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0670278, 0.545042)
        #z1 = z0 + P(-0.919339, 0.887942)
        #c1 = z1 + P(0.419453, 0.0740833)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.343958, -0.705203)
        #c3 = z2 + P(-0.713669, 0.151694)
        #c4 = z2 + P(2.88078, -0.560211)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74567)
        #c6 = z3 + P(0, 0.210608)
        #z4 = z3 + P(-0.182033, 0.559858)
        #c7 = z4 + P(0.127706, -0.141817)
        #c8 = z4 + P(-0.120297, 0.148519)
        #z5 = z4 + P(-0.492478, 0.251178)
        #c9 = z5 + P(0.201436, 0)
        #c10 = z5 + P(-0.764822, 0)
        #z6 = z5 + P(0.269875, -1.53106)
        #c11 = z6 + P(-0.358189, 0.551215)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549148, 82)
        z1 = z0 + PP(1.27813, 135)
        c1 = z1 + PP(0.425945, 10)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784613, -116)
        c3 = z2 + PP(0.729613, 168)
        c4 = z2 + PP(2.93475, -11)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74567, -90)
        c6 = z3 + PP(0.210608, 90)
        z4 = z3 + PP(0.588708, 108)
        c7 = z4 + PP(0.190842, -47)
        c8 = z4 + PP(0.191127, 129)
        #z5 = z4 + PP(0.552833, 152)
        z5 = z6 - PP(1.55466, ta + -23)
        c9 = z5 + PP(0.201436, 0)
        #c10 = z5 + PP(0.764822, 180)
        #z6 = z5 + PP(1.55466, -80)
        #c11 = z6 + PP(0.657372, 123)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLse(cls, ta=None, **kwargs):
        #M237.348 160.532C237.538 158.987 235.931 157.806 234.742 158.015C234.014 158.157 231.744 159.585 233.767 160.015C241.933 161.602 277.944 167.797 277.944 160.015C277.944 159.417 277.79 158.83 277.428 158.427C277.087 158.007 276.603 157.716 276.032 157.716C273.864 157.716 275.894 160.426 276.797 162.055

        #z0 = P(0, -0)
        #c0 = P(0.0670278, 0.545042)
        #c1 = P(-0.499886, 0.961672)
        #z1 = P(-0.919339, 0.887942)
        #c2 = P(-1.17616, 0.837847)
        #c3 = P(-1.97697, 0.334081)
        #z2 = P(-1.2633, 0.182386)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.3214, -2.56293)
        #z3 = P(14.3214, 0.182386)
        #c6 = P(14.3214, 0.393347)
        #c7 = P(14.267, 0.600428)
        #z4 = P(14.1393, 0.742597)
        #c8 = P(14.019, 0.890764)
        #c9 = P(13.8483, 0.993422)
        #z5 = P(13.6469, 0.993422)
        #c10 = P(12.882, 0.993422)
        #c11 = P(13.5982, 0.0373944)
        z6 = P(13.9167, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0670278, 0.545042)
        #z1 = z0 + P(-0.919339, 0.887942)
        #c1 = z1 + P(0.419453, 0.0737306)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.343958, -0.705556)
        #c3 = z2 + P(-0.713669, 0.151694)
        #c4 = z2 + P(2.88078, -0.559858)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74532)
        #c6 = z3 + P(0, 0.210961)
        #z4 = z3 + P(-0.182033, 0.560211)
        #c7 = z4 + P(0.127706, -0.142169)
        #c8 = z4 + P(-0.120297, 0.148167)
        #z5 = z4 + P(-0.492478, 0.250825)
        #c9 = z5 + P(0.201436, 0)
        #c10 = z5 + P(-0.764822, 0)
        #z6 = z5 + P(0.269875, -1.5307)
        #c11 = z6 + P(-0.318558, 0.574675)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549148, 82)
        z1 = z0 + PP(1.27813, 135)
        c1 = z1 + PP(0.425884, 9)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784931, -115)
        c3 = z2 + PP(0.729613, 168)
        c4 = z2 + PP(2.93468, -10)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74532, -90)
        c6 = z3 + PP(0.210961, 90)
        z4 = z3 + PP(0.589044, 108)
        c7 = z4 + PP(0.191104, -48)
        c8 = z4 + PP(0.190853, 129)
        #z5 = z4 + PP(0.552673, 153)
        z5 = z6 - PP(1.55431, ta + -19)
        c9 = z5 + PP(0.201436, 0)
        #c10 = z5 + PP(0.764822, 180)
        #z6 = z5 + PP(1.55431, -80)
        #c11 = z6 + PP(0.657062, 119)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLser(cls, ta=None, **kwargs):
        #M 163.881,160.532 C 164.071,158.987 162.464,157.806 161.275,158.015 160.547,158.157 158.277,159.585 160.3,160.015 168.466,161.602 204.477,167.797 204.477,160.015 204.477,159.417 204.08311,158.79968 203.56168,158.56676 202.77957,158.21739 201.34495,158.19816 201.02763,158.99381 200.55464,160.17977 201.73354,160.96542 203.33,162.055

        #z0 = P(0, -0)
        #c0 = P(0.0670278, 0.545042)
        #c1 = P(-0.499886, 0.961672)
        #z1 = P(-0.919339, 0.887942)
        #c2 = P(-1.17616, 0.837847)
        #c3 = P(-1.97697, 0.334081)
        #z2 = P(-1.2633, 0.182386)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.3214, -2.56293)
        #z3 = P(14.3214, 0.182386)
        #c6 = P(14.3214, 0.393347)
        #c7 = P(14.1824, 0.611124)
        #z4 = P(13.9985, 0.693293)
        #c8 = P(13.7226, 0.816543)
        #c9 = P(13.2164, 0.823327)
        #z5 = P(13.1045, 0.542639)
        #c10 = P(12.9376, 0.124259)
        #c11 = P(13.3535, -0.152901)
        z6 = P(13.9167, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0670278, 0.545042)
        #z1 = z0 + P(-0.919339, 0.887942)
        #c1 = z1 + P(0.419453, 0.0737306)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.343958, -0.705556)
        #c3 = z2 + P(-0.713669, 0.151694)
        #c4 = z2 + P(2.88078, -0.559858)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74532)
        #c6 = z3 + P(0, 0.210961)
        #z4 = z3 + P(-0.322905, 0.510907)
        #c7 = z4 + P(0.183949, -0.082169)
        #c8 = z4 + P(-0.275911, 0.12325)
        #z5 = z4 + P(-0.893957, -0.150654)
        #c9 = z5 + P(0.111943, 0.280688)
        #c10 = z5 + P(-0.16686, -0.41838)
        #z6 = z5 + P(0.812225, -1.07992)
        #c11 = z6 + P(-0.563196, 0.38438)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549148, 82)
        z1 = z0 + PP(1.27813, 135)
        c1 = z1 + PP(0.425884, 9)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784931, -115)
        c3 = z2 + PP(0.729613, 168)
        c4 = z2 + PP(2.93468, -10)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74532, -90)
        c6 = z3 + PP(0.210961, 90)
        z4 = z3 + PP(0.604395, 122)
        c7 = z4 + PP(0.201467, -24)
        c8 = z4 + PP(0.302188, 155)
        #z5 = z4 + PP(0.906562, -170)
        z5 = z6 - PP(1.35127, ta + -18)
        c9 = z5 + PP(0.302187, 68)
        #c10 = z5 + PP(0.450427, -111)
        #z6 = z5 + PP(1.35127, -53)
        #c11 = z6 + PP(0.681863, 145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLsel(cls, ta=None, **kwargs):
        #M 310.816,160.532 C 311.005,158.987 309.399,157.806 308.209,158.015 307.481,158.157 305.211,159.585 307.234,160.015 315.4,161.602 351.46093,167.79684 351.411,160.015 351.40202,158.61563 350.60734,157.87165 349.499,157.716 348.60093,157.58988 348.79165,160.93371 348.79165,162.79625

        #z0 = P(0, -0)
        #c0 = P(0.066675, 0.545042)
        #c1 = P(-0.499886, 0.961672)
        #z1 = P(-0.919692, 0.887942)
        #c2 = P(-1.17651, 0.837847)
        #c3 = P(-1.97732, 0.334081)
        #z2 = P(-1.26365, 0.182386)
        #c4 = P(1.61713, -0.377472)
        #c5 = P(14.3386, -2.56287)
        #z3 = P(14.321, 0.182386)
        #c6 = P(14.3178, 0.676053)
        #c7 = P(14.0375, 0.938512)
        #z4 = P(13.6465, 0.993422)
        #c8 = P(13.3297, 1.03791)
        #c9 = P(13.397, -0.141714)
        z5 = P(13.397, -0.798777)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.066675, 0.545042)
        #z1 = z0 + P(-0.919692, 0.887942)
        #c1 = z1 + P(0.419806, 0.0737306)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.343958, -0.705556)
        #c3 = z2 + P(-0.713669, 0.151694)
        #c4 = z2 + P(2.88078, -0.559858)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0.0176142, -2.74526)
        #c6 = z3 + P(-0.00316794, 0.493667)
        #z4 = z3 + P(-0.674511, 0.811036)
        #c7 = z4 + P(0.390998, -0.0549099)
        #c8 = z4 + P(-0.316819, 0.0444923)
        #z5 = z4 + P(-0.249537, -1.7922)
        #c9 = z5 + P(0, 0.657063)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549105, 83)
        z1 = z0 + PP(1.27839, 136)
        c1 = z1 + PP(0.426231, 9)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784931, -115)
        c3 = z2 + PP(0.729613, 168)
        c4 = z2 + PP(2.93468, -10)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74532, -89)
        c6 = z3 + PP(0.493677, 90)
        z4 = z3 + PP(1.05487, 129)
        #z4 = z5 - PP(1.80949, ta + -7)
        c7 = z4 + PP(0.394835, -7)
        c8 = z4 + PP(0.319928, 172)
        z5 = z4 + PP(1.80949, -97)
        #c9 = z5 + PP(0.657063, 90)
        c9 = z5 + PP(0.657063, ta+180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_CLELCLsw(cls, ta=None, **kwargs):
        #M 553.38899,326.58514 C 552.98318,325.33674 552.54417,323.9457 551.0353,323.85621 549.73634,323.77916 547.93479,325.6563 549.15212,325.87189 557.31301,327.31717 593.658,333.659 593.658,325.906 593.658,323.913 592.438,324.495 591.878,325.55 591.291,326.653 590.664,327.74 590.236,328.915

        #z0 = P(0, -0)
        #c0 = P(-0.143161, 0.440408)
        #c1 = P(-0.298034, 0.931136)
        #z1 = P(-0.83033, 0.962706)
        #c2 = P(-1.28857, 0.989887)
        #c3 = P(-1.92412, 0.327674)
        #z2 = P(-1.49467, 0.251619)
        #c4 = P(1.38431, -0.258244)
        #c5 = P(14.206, -2.4955)
        #z3 = P(14.206, 0.239586)
        #c6 = P(14.206, 0.942672)
        #c7 = P(13.7756, 0.737355)
        #z4 = P(13.5781, 0.365174)
        #c8 = P(13.371, -0.0239395)
        #c9 = P(13.1498, -0.407409)
        z5 = P(12.9988, -0.821923)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.143161, 0.440408)
        #z1 = z0 + P(-0.83033, 0.962706)
        #c1 = z1 + P(0.532296, -0.0315701)
        #c2 = z1 + P(-0.458244, 0.0271815)
        #z2 = z1 + P(-0.664344, -0.711087)
        #c3 = z2 + P(-0.429447, 0.0760554)
        #c4 = z2 + P(2.87898, -0.509863)
        #z3 = z2 + P(15.7007, -0.0120332)
        #c5 = z3 + P(0, -2.73509)
        #c6 = z3 + P(0, 0.703086)
        #z4 = z3 + P(-0.627944, 0.125589)
        #c7 = z4 + P(0.197556, 0.372181)
        #c8 = z4 + P(-0.207081, -0.389114)
        #z5 = z4 + P(-0.579261, -1.1871)
        #c9 = z5 + P(0.150989, 0.414514)

        z0 = P(0, -0)
        c0 = z0 + PP(0.463092, 108)
        z1 = z0 + PP(1.27132, 130)
        c1 = z1 + PP(0.533231, -3)
        c2 = z1 + PP(0.45905, 176)
        z2 = z1 + PP(0.973138, -133)
        c3 = z2 + PP(0.43613, 169)
        c4 = z2 + PP(2.92378, -10)
        z3 = z2 + PP(15.7007, 0)
        c5 = z3 + PP(2.73509, -90)
        c6 = z3 + PP(0.703086, 90)
        #z4 = z3 + PP(0.64038, 168)
        z4 = z5 - PP(1.32089, ta + -5)
        c7 = z4 + PP(0.421363, 62)
        #c8 = z4 + PP(0.440786, -118)
        #z5 = z4 + PP(1.32089, -116)
        #c9 = z5 + PP(0.441157, 69)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_CLELCLswr(cls, ta=None, **kwargs):
        #M 105.984,160.532 C 106.174,158.987 104.567,157.806 103.378,158.015 102.65,158.157 100.38,159.585 102.403,160.015 110.569,161.602 146.58,167.797 146.58,160.015 146.58,159.417 146.426,158.83 146.064,158.427 145.723,158.007 145.239,157.716 144.668,157.716 142.5,157.716 144.92485,160.26262 145.433,162.055

        #z0 = P(0, -0)
        #c0 = P(0.0670278, 0.545042)
        #c1 = P(-0.499886, 0.961672)
        #z1 = P(-0.919339, 0.887942)
        #c2 = P(-1.17616, 0.837847)
        #c3 = P(-1.97697, 0.334081)
        #z2 = P(-1.2633, 0.182386)
        #c4 = P(1.61749, -0.377472)
        #c5 = P(14.3214, -2.56293)
        #z3 = P(14.3214, 0.182386)
        #c6 = P(14.3214, 0.393347)
        #c7 = P(14.267, 0.600428)
        #z4 = P(14.1393, 0.742597)
        #c8 = P(14.019, 0.890764)
        #c9 = P(13.8483, 0.993422)
        #z5 = P(13.6469, 0.993422)
        #c10 = P(12.882, 0.993422)
        #c11 = P(13.7375, 0.0950313)
        z6 = P(13.9167, -0.537281)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0670278, 0.545042)
        #z1 = z0 + P(-0.919339, 0.887942)
        #c1 = z1 + P(0.419453, 0.0737306)
        #c2 = z1 + P(-0.256822, -0.0500944)
        #z2 = z1 + P(-0.343958, -0.705556)
        #c3 = z2 + P(-0.713669, 0.151694)
        #c4 = z2 + P(2.88078, -0.559858)
        #z3 = z2 + P(15.5847, 0)
        #c5 = z3 + P(0, -2.74532)
        #c6 = z3 + P(0, 0.210961)
        #z4 = z3 + P(-0.182033, 0.560211)
        #c7 = z4 + P(0.127706, -0.142169)
        #c8 = z4 + P(-0.120297, 0.148167)
        #z5 = z4 + P(-0.492478, 0.250825)
        #c9 = z5 + P(0.201436, 0)
        #c10 = z5 + P(-0.764822, 0)
        #z6 = z5 + P(0.269875, -1.5307)
        #c11 = z6 + P(-0.179264, 0.632312)

        z0 = P(0, -0)
        c0 = z0 + PP(0.549148, 82)
        z1 = z0 + PP(1.27813, 135)
        c1 = z1 + PP(0.425884, 9)
        c2 = z1 + PP(0.261662, -168)
        z2 = z1 + PP(0.784931, -115)
        c3 = z2 + PP(0.729613, 168)
        c4 = z2 + PP(2.93468, -10)
        z3 = z2 + PP(15.5847, 0)
        c5 = z3 + PP(2.74532, -90)
        c6 = z3 + PP(0.210961, 90)
        z4 = z3 + PP(0.589044, 108)
        c7 = z4 + PP(0.191104, -48)
        c8 = z4 + PP(0.190853, 129)
        #z5 = z4 + PP(0.552673, 153)
        z5 = z6 - PP(1.55431, ta + -5)
        c9 = z5 + PP(0.201436, 0)
        #c10 = z5 + PP(0.764822, 180)
        #z6 = z5 + PP(1.55431, -80)
        #c11 = z6 + PP(0.657232, 105)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_CLELCLswl(cls, ta=None, **kwargs):
        #M 45.999252,148.57475 C 45.242372,146.70593 44.791102,146.14507 43.463462,145.77131 42.633602,145.53768 40.092392,147.55141 41.762382,147.8615 49.910982,149.37454 86.717582,156.05365 86.717582,148.29965 86.717582,146.18665 83.867102,148.56149 82.162102,151.51349

        #z0 = P(0, -0)
        #c0 = P(-0.26701, 0.659278)
        #c1 = P(-0.426208, 0.857137)
        #z1 = P(-0.89457, 0.988991)
        #c2 = P(-1.18733, 1.07141)
        #c3 = P(-2.08381, 0.361012)
        #z2 = P(-1.49467, 0.251619)
        #c4 = P(1.37997, -0.282148)
        #c5 = P(14.3645, -2.63839)
        #z3 = P(14.3645, 0.0970492)
        #c6 = P(14.3645, 0.842469)
        #c7 = P(13.3589, 0.00467783)
        z4 = P(12.7574, -1.03672)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.26701, 0.659278)
        #z1 = z0 + P(-0.89457, 0.988991)
        #c1 = z1 + P(0.468362, -0.131854)
        #c2 = z1 + P(-0.292756, 0.0824195)
        #z2 = z1 + P(-0.600103, -0.737373)
        #c3 = z2 + P(-0.589135, 0.109393)
        #c4 = z2 + P(2.87464, -0.533767)
        #z3 = z2 + P(15.8592, -0.15457)
        #c5 = z3 + P(0, -2.73544)
        #c6 = z3 + P(0, 0.745419)
        #z4 = z3 + P(-1.60707, -1.13377)
        #c7 = z4 + P(0.601486, 1.0414)

        z0 = P(0, -0)
        c0 = z0 + PP(0.711296, 112)
        z1 = z0 + PP(1.33355, 132)
        c1 = z1 + PP(0.486568, -15)
        c2 = z1 + PP(0.304137, 164)
        z2 = z1 + PP(0.950706, -129)
        c3 = z2 + PP(0.599206, 169)
        c4 = z2 + PP(2.92378, -10)
        #z3 = z2 + PP(15.8599, 0)
        z3 = z4 - PP(1.96675, ta + -23)
        c5 = z3 + PP(2.73544, -90)
        #c6 = z3 + PP(0.745419, 90)
        #z4 = z3 + PP(1.96675, -144)
        #c7 = z4 + PP(1.20262, 59)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])
