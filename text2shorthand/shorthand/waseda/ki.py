from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.path import moveto, rcurveto, curveto
from pyx.metapost.path import (
    beginknot, endknot, knot, roughknot,
    line, curve, controlcurve)


class CharKi(WasedaChar):
    def __init__(self, name='ki', kana='„Åç',
                 model='E8CL1', head_type='E', tail_type='ECL1'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_ECL(cls, ta=None, **kwargs):
        base = pyx.path.line(0, 0, 7.5, 0)
        z3 = P(*base.reversed().at(0.7))
        z2 = z3 - PP(1.2, -130)
        return pyx.metapost.path.path([
            beginknot(0, 0),
            line(True),
            knot(7.5, 0),
            curve(),
            knot(*z2),
            curve(),
            endknot(*z3, angle=-130)])

    @classmethod
    def path_ECLsw(cls, ta=None, **kwargs):
        z0 = P(0, 0)
        c0 = z0 + PP(2.49235, 3)
        z1 = z0 + PP(7.47197, 0)
        c1 = z1 + PP(2.49235, 176)
        c2 = z1 + PP(0.262126, -2)
        z2 = z1 + PP(0.697396, 45)
        c3 = z2 + PP(0.275834, -96)
        c4 = z2 + PP(0.531693, 83)
        # z3 = z2 + PP(0.700622, 148)
        z4 = P(7.06329, 0.0202441)
        z3 = z4 - PP(0.896623, ta)
        c5 = z3 + PP(0.295579, 70)
        # c6 = z3 + PP(0.299059, -109)
        # c7 = z4 + PP(0.29924, 74)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            roughknot(*z3, rangle=ta),
            curve(),
            endknot(*z4, ta)])

    @classmethod
    def path_ECLswr(cls, ta=None, **kwargs):
        z0 = P(0, 0)
        c0 = P(2.49829, 0.13093)
        c1 = P(5.00173, 0.13093)
        z1 = P(7.50001, 0)
        c2 = P(7.76772, -0.0140308)
        c3 = P(7.9787, 0.217217)
        z2 = P(7.99497, 0.494975)
        c4 = P(8.03845, 1.23603)
        c5 = P(7.15523, 1.12387)
        z3 = P(7.22855, 0.708055)
        c6 = P(7.26914, 0.477827)
        c7 = P(7.28956, 0.244497)
        z4 = P(7.28956, 0.0107186)

        z0 = P(0, 0)
        c0 = z0 + P(2.49829, 0.13093)
        z1 = z0 + P(7.50001, 0)
        c1 = z1 + P(-2.49828, 0.13093)
        c2 = z1 + P(0.267707, -0.0140308)
        z2 = z1 + P(0.494961, 0.494975)
        c3 = z2 + P(-0.0162726, -0.277758)
        c4 = z2 + P(0.0434756, 0.741057)
        z3 = z2 + P(-0.766429, 0.21308)
        c5 = z3 + P(-0.0733145, 0.415816)
        c6 = z3 + P(0.0405936, -0.230227)
        z4 = z3 + P(0.0610134, -0.697336)
        c7 = z4 + P(0, 0.233778)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.268074, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.278234, -93)
        c4 = z2 + PP(0.742331, 86)
        # z3 = z2 + PP(0.795497, 164)
        z3 = z4 - PP(0.7, ta + 16)
        c5 = z3 + PP(0.422229, 99)
        c6 = z3 + PP(0.233779, -80)
        # z4 = z3 + PP(0.7, -84)
        # c7 = z4 + PP(0.233778, 90)
        c7 = z4 + PP(0.233778, ta+180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            endknot(*z4)])

    @classmethod
    def path_ECLsel(cls, ta=None, **kwargs):
        # M 0 0C 7.10831 -0.372531 14.2313 -0.372531 21.3396 0C 22.0698 0.0382682 22.5738 -0.649432 22.7479 -1.40834C 23.1977 -3.36923 21.1297 -3.82837 20.8526 -2.86194C 20.5899 -1.9458 20.4566 -0.997417 20.4566 -0.0443545
        #moveto(0, 0), 
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0), 
        #curveto(22.0698, 0.0382682, 22.5738, -0.649432, 22.7479, -1.40834), 
        #curveto(23.1977, -3.36923, 21.1297, -3.82837, 20.8526, -2.86194), 
        #curveto(20.5899, -1.9458, 20.4566, -0.997417, 20.4566, -0.0443545)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.75665, -0.0134497)
        #c3 = P(7.93378, 0.228249)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(8.15306, 1.18415)
        #c5 = P(7.42624, 1.34552)
        #z3 = P(7.32885, 1.00586)
        #c6 = P(7.23652, 0.683871)
        #c7 = P(7.18967, 0.350552)
        z4 = P(7.18967, 0.0155888)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.49829, 0.13093)
        #z1 = z0 + P(7.50001, 0)
        #c1 = z1 + P(-2.49828, 0.13093)
        #c2 = z1 + P(0.256636, -0.0134497)
        #z2 = z1 + P(0.494961, 0.494975)
        #c3 = z2 + P(-0.0611892, -0.266726)
        #c4 = z2 + P(0.158087, 0.689174)
        #z3 = z2 + P(-0.666122, 0.510882)
        #c5 = z3 + P(0.0973895, 0.339661)
        #c6 = z3 + P(-0.0923285, -0.321986)
        #z4 = z3 + P(-0.139178, -0.990268)
        #c7 = z4 + P(0, 0.334963)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.256988, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.273654, -102)
        c4 = z2 + PP(0.707073, 77)
        #z3 = z2 + PP(0.839475, 142)
        z3 = z4 + PP(1, ta-180-8)
        c5 = z3 + PP(0.353348, 74)
        #c6 = z3 + PP(0.334962, -106)
        #z4 = z3 + PP(1, -98)
        c7 = z4 + PP(0.334963, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLsl(cls, ta=None, **kwargs):
        # M 0 0C 7.10831 -0.372531 14.2313 -0.372531 21.3396 0C 22.0625 0.0378885 22.5241 -0.670488 22.7479 -1.40834C 23.1047 -2.58445 22.2211 -3.36886 21.6972 -2.92931C 20.7482 -2.13299 20.1276 -1.03186 19.3197 -0.0958161
        #moveto(0, 0), 
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0), 
        #curveto(22.0625, 0.0378885, 22.5241, -0.670488, 22.7479, -1.40834), 
        #curveto(23.1047, -2.58445, 22.2211, -3.36886, 21.6972, -2.92931), 
        #curveto(20.7482, -2.13299, 20.1276, -1.03186, 19.3197, -0.0958161)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.75408, -0.0133163)
        #c3 = P(7.91632, 0.23565)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(8.12038, 0.90833)
        #c5 = P(7.80983, 1.18402)
        #z3 = P(7.6257, 1.02953)
        #c6 = P(7.29216, 0.74966)
        #c7 = P(7.07404, 0.362657)
        z4 = P(6.7901, 0.0336755)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.49829, 0.13093)
        #z1 = z0 + P(7.50001, 0)
        #c1 = z1 + P(-2.49828, 0.13093)
        #c2 = z1 + P(0.25407, -0.0133163)
        #z2 = z1 + P(0.494961, 0.494975)
        #c3 = z2 + P(-0.0786567, -0.259325)
        #c4 = z2 + P(0.125401, 0.413355)
        #z3 = z2 + P(-0.369279, 0.53456)
        #c5 = z3 + P(0.18413, 0.154484)
        #c6 = z3 + P(-0.333535, -0.279875)
        #z4 = z3 + P(-0.835596, -0.995859)
        #c7 = z4 + P(0.283944, 0.328982)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.254419, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.270992, -106)
        c4 = z2 + PP(0.431958, 73)
        #z4 = P(6.7901, 0.0336755)
        z3 = z4 - PP(1.29998, -129)
        #z3 = z2 + PP(0.649709, 124)
        c5 = z3 + PP(0.240352, 39)
        c6 = z3 + PP(0.435403, -139)
        #z4 = z3 + PP(1.29998, -129)
        c7 = z4 + PP(0.434573, 49)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLswl(cls, ta=None, **kwargs):
        #M 83.7913,132.742 C 90.873,132.371 98.0004,132.249 105.051,132.742 105.872,132.799 106.331,131.787 105.731,131.174 105.003,130.43 100.98696,131.92496 100.06373,132.4914

        #z0 = P(0, -0)
        #c0 = P(2.48893, 0.130392)
        #c1 = P(4.99393, 0.17327)
        #z1 = P(7.47193, -0)
        #c2 = P(7.76048, -0.0200332)
        #c3 = P(7.9218, 0.335644)
        #z2 = P(7.71092, 0.551089)
        #c4 = P(7.45506, 0.812575)
        #c5 = P(6.04358, 0.287157)
        z3 = P(5.71911, 0.0880758)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.48893, 0.130392)
        #z1 = z0 + P(7.47193, 0)
        #c1 = z1 + P(-2.478, 0.17327)
        #c2 = z1 + P(0.288549, -0.0200332)
        #z2 = z1 + P(0.238993, 0.551089)
        #c3 = z2 + P(0.210876, -0.215445)
        #c4 = z2 + P(-0.255863, 0.261486)
        #z3 = z2 + P(-1.99182, -0.463013)
        #c5 = z3 + P(0.324478, 0.199081)

        z0 = P(0, -0)
        c0 = z0 + PP(2.49235, 2)
        z1 = z0 + PP(7.47193, 0)
        c1 = z1 + PP(2.48405, 176)
        c2 = z1 + PP(0.289243, -3)
        z2 = z1 + PP(0.60068, 66)
        #z2 = z3 - PP(2.04493, ta + -17)
        c3 = z2 + PP(0.301472, -45)
        #c4 = z2 + PP(0.365843, 134)
        #z3 = z2 + PP(2.04493, -166)
        #c5 = z3 + PP(0.380683, 31)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])


    @classmethod
    def path_ECLne(cls, ta=None, **kwargs):
        # M 0,0 C 7.10831,-0.372531 14.2313,-0.372531 21.3396,0 22.2676,0.0486364 23.0159,-0.670066 22.7479,-1.40834 22.4666,-2.18325 21.3873,-2.17519 20.5644,-1.59903 19.793357,-0.96574927 19.083962,-0.45576475 18.4668,-0.130247
        #moveto(0, 0),
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0),
        #curveto(22.2676, 0.0486364, 23.0159, -0.670066, 22.7479, -1.40834),
        #curveto(22.4666, -2.18325, 21.3873, -2.17519, 20.5644, -1.59903),
        #curveto(19.793357, -0.96574927, 19.083962, -0.45576475, 18.4668, -0.130247)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.82617, -0.0170937)
        #c3 = P(8.08917, 0.235501)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(7.89611, 0.767325)
        #c5 = P(7.51678, 0.764492)
        #z3 = P(7.22756, 0.561995)
        #c6 = P(6.95657, 0.339422)
        #c7 = P(6.70725, 0.160183)
        #z4 = P(6.49034, 0.0457766)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.49829, 0.13093)
        #z1 = z0 + P(7.50001, 0)
        #c1 = z1 + P(-2.49828, 0.13093)
        #c2 = z1 + P(0.326155, -0.0170937)
        #z2 = z1 + P(0.494961, 0.494975)
        #c3 = z2 + P(0.0941912, -0.259474)
        #c4 = z2 + P(-0.0988657, 0.27235)
        #z3 = z2 + P(-0.767413, 0.0670199)
        #c5 = z3 + P(0.289216, 0.202497)
        #c6 = z3 + P(-0.270991, -0.222573)
        #z4 = z3 + P(-0.737222, -0.516218)
        #c7 = z4 + P(0.216908, 0.114406)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.326602, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.276041, -70)
        c4 = z2 + PP(0.289739, 109)
        z4 = P(6.49034, 0.0457766)
        z3 = z4 - PP(0.899988, -144)
        c5 = z3 + PP(0.35306, 34)
        c6 = z3 + PP(0.350677, -140)
        #z4 = z3 + PP(0.899988, -144)
        c7 = z4 + PP(0.24523, ta)

        return pyx.metapost.path.path([
        beginknot(*z0),
        controlcurve(c0, c1),
        knot(*z1),
        controlcurve(c2, c3),
        knot(*z2),
        controlcurve(c4, c5),
        knot(*z3),
        controlcurve(c6, c7),
        endknot(*z4)])

    @classmethod
    def path_ECLs(cls, ta=None, **kwargs):
        # M 0,0 C 7.10831,-0.372531 14.2313,-0.372531 21.3396,0 22.0875,0.0391972 22.6543,-0.626043 22.7479,-1.40834 22.9821,-3.36616 20.601744,-3.3493579 20.7408,-2.30672 20.841993,-1.5479791 20.791157,-0.78923827 20.7408,-0.0304974
        #moveto(0, 0),
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0),
        #curveto(22.0875, 0.0391972, 22.6543, -0.626043, 22.7479, -1.40834),
        #curveto(22.9821, -3.36616, 20.601744, -3.3493579, 20.7408, -2.30672),
        #curveto(20.841993, -1.5479791, 20.791157, -0.78923827, 20.7408, -0.0304974)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.76287, -0.0137762)
        #c3 = P(7.96208, 0.220029)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(8.07729, 1.18307)
        #c5 = P(7.24069, 1.17716)
        #z3 = P(7.28956, 0.81072)
        #c6 = P(7.32512, 0.544053)
        #c7 = P(7.30726, 0.277386)
        z4 = P(7.28956, 0.0107186)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.49829, 0.13093)
        #z1 = z0 + P(7.50001, 0)
        #c1 = z1 + P(-2.49828, 0.13093)
        #c2 = z1 + P(0.262857, -0.0137762)
        #z2 = z1 + P(0.494961, 0.494975)
        #c3 = z2 + P(-0.0328966, -0.274946)
        #c4 = z2 + P(0.0823119, 0.688095)
        #z3 = z2 + P(-0.705415, 0.315745)
        #c5 = z3 + P(-0.0488726, 0.366445)
        #c6 = z3 + P(0.0355653, -0.266667)
        #z4 = z3 + P(0, -0.800001)
        #c7 = z4 + P(0.0176985, 0.266667)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.263218, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.276907, -96)
        c4 = z2 + PP(0.693001, 83)
        #z4 = P(7.28956, 0.0107186)
        z3 = z4 - PP(0.800001, ta)
        #z3 = z2 + PP(0.772855, 155)
        c5 = z3 + PP(0.36969, 97)
        #c6 = z3 + PP(0.269028, -82)
        #z4 = z3 + PP(0.800001, -90)
        #c7 = z4 + PP(0.267254, ta + 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            curve(),
            #controlcurve(c6, c7),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLse(cls, ta=None, **kwargs):
        # M 0,0 C 7.10831,-0.372531 14.2313,-0.372531 21.3396,0 22.0679,0.0381694 22.5626,-0.653719 22.7479,-1.40834 23.5039,-4.48689 19.133839,-4.3455607 20.1704,-2.4745 20.683274,-1.5487283 21.240425,-0.7853688 21.593,-0.0104238
        #moveto(0, 0),
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0),
        #curveto(22.0679, 0.0381694, 22.5626, -0.653719, 22.7479, -1.40834),
        #curveto(23.5039, -4.48689, 19.133839, -4.3455607, 20.1704, -2.4745),
        #curveto(20.683274, -1.5487283, 21.240425, -0.7853688, 21.593, -0.0104238)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.75598, -0.013415)
        #c3 = P(7.92985, 0.229756)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(8.26068, 1.57696)
        #c5 = P(6.72478, 1.52729)
        #z3 = P(7.08909, 0.869687)
        #c6 = P(7.26934, 0.544316)
        #c7 = P(7.46516, 0.276026)
        z4 = P(7.58907, 0.00366355)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.49829, 0.13093)
        #z1 = z0 + P(7.50001, 0)
        #c1 = z1 + P(-2.49828, 0.13093)
        #c2 = z1 + P(0.255968, -0.013415)
        #z2 = z1 + P(0.494961, 0.494975)
        #c3 = z2 + P(-0.0651255, -0.265219)
        #c4 = z2 + P(0.265704, 1.08199)
        #z3 = z2 + P(-0.905888, 0.374712)
        #c5 = z3 + P(-0.36431, 0.657603)
        #c6 = z3 + P(0.180255, -0.325372)
        #z4 = z3 + P(0.499987, -0.866024)
        #c7 = z4 + P(-0.123916, 0.272362)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.25632, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.273098, -103)
        c4 = z2 + PP(1.11413, 76)
        #z3 = z2 + PP(0.980328, 157)
        z3 = z4 + PP(0.999992, ta-180+6)
        c5 = z3 + PP(0.751773, 118)
        #c6 = z3 + PP(0.371966, -61)
        #z4 = z3 + PP(0.999992, -60)
        #c7 = z4 + PP(0.299226, 114)

        return pyx.metapost.path.path([
        beginknot(*z0),
        controlcurve(c0, c1),
        knot(*z1),
        controlcurve(c2, c3),
        knot(*z2),
        controlcurve(c4, c5),
        knot(*z3),
        #controlcurve(c6, c7),
        curve(),
        endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLser(cls, ta=None, **kwargs):
        # M 0,0 C 7.10831,-0.372531 14.2313,-0.372531 21.3396,0 22.072,0.0383853 22.5861,-0.76862103 22.7479,-1.40834 23.675,-5.0742991 14.8472,-3.4947846 19.4131,-1.7104095 20.3604,-1.3401956 21.2674,-0.803403 22.1236,-0.203869
        #moveto(0, 0),
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0),
        #curveto(22.072, 0.0383853, 22.5861, -0.76862103, 22.7479, -1.40834),
        #curveto(23.675, -5.0742991, 14.8472, -3.4947846, 19.4131, -1.7104095),
        #curveto(20.3604, -1.3401956, 21.2674, -0.803403, 22.1236, -0.203869)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.75742, -0.0134909)
        #c3 = P(7.93811, 0.270139)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(8.32081, 1.78341)
        #c5 = P(5.2182, 1.22828)
        #z3 = P(6.82293, 0.60114)
        #c6 = P(7.15586, 0.471025)
        #c7 = P(7.47464, 0.282364)
        z4 = P(7.77556, 0.0716518)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.49829, 0.13093)
        #z1 = z0 + P(7.50001, 0)
        #c1 = z1 + P(-2.49828, 0.13093)
        #c2 = z1 + P(0.257409, -0.0134909)
        #z2 = z1 + P(0.494961, 0.494975)
        #c3 = z2 + P(-0.0568662, -0.224836)
        #c4 = z2 + P(0.325838, 1.28844)
        #z3 = z2 + P(-1.17205, 0.106165)
        #c5 = z3 + P(-1.60473, 0.627136)
        #c6 = z3 + P(0.332938, -0.130115)
        #z4 = z3 + P(0.952632, -0.529489)
        #c7 = z4 + P(-0.30092, 0.210712)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.257763, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.231915, -104)
        c4 = z2 + PP(1.329, 75)
        z3 = z4 + PP(1.08989, ta-180+7)
        #z3 = z2 + PP(1.17685, 174)
        c5 = z3 + PP(1.72292, 158)
        #c6 = z3 + PP(0.35746, -21)
        #z4 = z3 + PP(1.08989, -29)
        #c7 = z4 + PP(0.367359, 144)

        return pyx.metapost.path.path([
        beginknot(*z0),
        controlcurve(c0, c1),
        knot(*z1),
        controlcurve(c2, c3),
        knot(*z2),
        controlcurve(c4, c5),
        knot(*z3),
        #controlcurve(c6, c7),
        curve(),
        endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLsr(cls, ta=None, **kwargs):
        # M 0 0C 7.10831 -0.372531 14.2313 -0.372531 21.3396 0C 22.0636 0.0379446 22.5329 -0.666365 22.7479 -1.40834C 23.745 -4.84936 17.6355 -4.85495 19.899 -2.51097C 20.6251 -1.75907 21.2842 -0.945212 21.8687 -0.0786555
        #moveto(0, 0),
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0),
        #curveto(22.0636, 0.0379446, 22.5329, -0.666365, 22.7479, -1.40834),
        #curveto(23.745, -4.84936, 17.6355, -4.85495, 19.899, -2.51097),
        #curveto(20.6251, -1.75907, 21.2842, -0.945212, 21.8687, -0.0786555)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.75447, -0.013336)
        #c3 = P(7.91941, 0.234201)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(8.34541, 1.70436)
        #c5 = P(6.19817, 1.70632)
        #z3 = P(6.9937, 0.882505)
        #c6 = P(7.2489, 0.618243)
        #c7 = P(7.48054, 0.332204)
        z4 = P(7.68597, 0.0276443)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.49829, 0.13093)
        #z1 = z0 + P(7.50001, 0)
        #c1 = z1 + P(-2.49828, 0.13093)
        #c2 = z1 + P(0.254457, -0.013336)
        #z2 = z1 + P(0.494961, 0.494975)
        #c3 = z2 + P(-0.0755639, -0.260774)
        #c4 = z2 + P(0.350441, 1.20938)
        #z3 = z2 + P(-1.00127, 0.38753)
        #c5 = z3 + P(-0.795529, 0.823815)
        #c6 = z3 + P(0.255195, -0.264263)
        #z4 = z3 + P(0.692271, -0.854861)
        #c7 = z4 + P(-0.205428, 0.30456)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.254806, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.271502, -106)
        c4 = z2 + PP(1.25913, 73)
        #z3 = z2 + PP(1.07365, 158)
        z3 = z4 - PP(1.10001, -50)
        c5 = z3 + PP(1.14522, 133)
        c6 = z3 + PP(0.367368, -46)
        #z4 = z3 + PP(1.10001, -50)
        c7 = z4 + PP(0.367366, ta + 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            endknot(*z4)])


    @classmethod
    def path_ECLner(cls, ta=None, **kwargs):
        # M 0 0C 7.10831 -0.372531 14.2313 -0.372531 21.3396 0C 22.1278 0.0413069 22.7745 -0.613647 22.7479 -1.40834C 22.7135 -2.43407 21.6329 -2.99814 20.9516 -2.42653C 20.2125 -1.80633 19.6497 -1.00249 19.3197 -0.0958161
        #moveto(0, 0),
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0),
        #curveto(22.1278, 0.0413069, 22.7745, -0.613647, 22.7479, -1.40834),
        #curveto(22.7135, -2.43407, 21.6329, -2.99814, 20.9516, -2.42653),
        #curveto(20.2125, -1.80633, 19.6497, -1.00249, 19.3197, -0.0958161)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.77703, -0.0145177)
        #c3 = P(8.00432, 0.215672)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(7.98288, 0.855478)
        #c5 = P(7.6031, 1.05373)
        #z3 = P(7.36365, 0.852828)
        #c6 = P(7.10388, 0.634853)
        #c7 = P(6.90608, 0.352335)
        #z4 = P(6.7901, 0.0336755)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.49829, 0.13093)
        #z1 = z0 + P(7.50001, 0)
        #c1 = z1 + P(-2.49828, 0.13093)
        #c2 = z1 + P(0.277021, -0.0145177)
        #z2 = z1 + P(0.494961, 0.494975)
        #c3 = z2 + P(0.00934883, -0.279303)
        #c4 = z2 + P(-0.0120902, 0.360503)
        #z3 = z2 + P(-0.631327, 0.357853)
        #c5 = z3 + P(0.23945, 0.200898)
        #c6 = z3 + P(-0.259764, -0.217975)
        #z4 = z3 + P(-0.573547, -0.819152)
        #c7 = z4 + P(0.115982, 0.318659)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.277401, -2)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.279459, -88)
        c4 = z2 + PP(0.360706, 91)
        z4 = P(6.7901, 0.0336755)
        #z3 = z4 - PP(0.999984, -124)
        z3 = z4 - PP(0.999984, ta-180-14)
        #z3 = z2 + PP(0.725695, 150)
        c5 = z3 + PP(0.312564, 39)
        c6 = z3 + PP(0.339103, -139)
        #z4 = z3 + PP(0.999984, -124)
        c7 = z4 + PP(0.33911, ta)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            endknot(*z4)])


    @classmethod
    def path_ECLel(cls, ta=None, **kwargs):
        # M 0 0C 7.10831 -0.372531 14.2313 -0.372531 21.3396 0C 22.0726 0.038417 22.5893 -0.643937 22.7479 -1.40834C 23.418 -4.63774 18.3921 -4.03323 20.1043 -2.13166C 20.7438 -1.42145 21.5026 -0.828601 22.3464 -0.379934
 
        #moveto(0, 0),
        #curveto(7.10831, -0.372531, 14.2313, -0.372531, 21.3396, 0),
        #curveto(22.0726, 0.038417, 22.5893, -0.643937, 22.7479, -1.40834),
        #curveto(23.418, -4.63774, 18.3921, -4.03323, 20.1043, -2.13166),
        #curveto(20.7438, -1.42145, 21.5026, -0.828601, 22.3464, -0.379934)
        #z0 = P(0, 0)
        #c0 = P(2.49829, 0.13093)
        #c1 = P(5.00173, 0.13093)
        #z1 = P(7.50001, 0)
        #c2 = P(7.75763, -0.013502)
        #c3 = P(7.93923, 0.226318)
        #z2 = P(7.99497, 0.494975)
        #c4 = P(8.23049, 1.62998)
        #c5 = P(6.46409, 1.41752)
        #z3 = P(7.06585, 0.749193)
        #c6 = P(7.29061, 0.499583)
        #c7 = P(7.5573, 0.29122)
        #z4 = P(7.85386, 0.133532)

        z0 = P(0, 0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.50001, 0)
        c1 = z1 + PP(2.50171, 176)
        c2 = z1 + PP(0.257974, -3)
        z2 = z1 + PP(0.69999, 45)
        c3 = z2 + PP(0.274379, -101)
        c4 = z2 + PP(1.15918, 78)
        #z3 = z2 + PP(0.96327, 164)
        z4 = P(7.85386, 0.133532)
        z3 = z4 - PP(0.999998, ta - 9)
        c5 = z3 + PP(0.899325, 132)
        c6 = z3 + PP(0.335889, -47)
        #z4 = z3 + PP(0.999998, -38)
        c7 = z4 + PP(0.335879, 151)
        c7 = z4 + PP(0.335879, ta)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            endknot(*z4)])

    @classmethod
    def path_ECLe(cls, ta=0, **kwargs):
        z0 = P(0, 0)
        c0 = P(2.829, 0.0717266)
        c1 = P(5.33336, 0.0717266)
        z1 = P(8, 0)
        c2 = P(8.35485, -0.00954454)
        c3 = P(8.3134, 0.755322)
        z2 = P(7.54113, 0.755322)
        c4 = P(6.81256, 0.755322)
        c5 = P(6.63728, 0.0873336)
        z3 = P(6.99999, 0.1)
        c6 = P(7.33325, 0.111637)
        c7 = P(7.66678, 0.111637)
        z4 = P(8, 0.1)

        z0 = P(0, 0)
        c0 = z0 + P(2.829, 0.0717266)
        z1 = z0 + P(8, 0)
        c1 = z1 + P(-2.66664, 0.0717266)
        c2 = z1 + P(0.354846, -0.00954454)
        z2 = z1 + P(-0.458866, 0.755322)
        c3 = z2 + P(0.772263, 0)
        c4 = z2 + P(-0.728576, 0)
        z3 = z2 + P(-0.541143, -0.655322)
        c5 = z3 + P(-0.362707, -0.0126666)
        c6 = z3 + P(0.333254, 0.0116365)
        z4 = z3 + P(1.00001, 0)
        c7 = z4 + P(-0.333219, 0.0116365)

        z0 = P(0, 0)
        c0 = z0 + PP(2.82991, 3)
        z1 = z0 + PP(8, 0)
        c1 = z1 + PP(2.66761, 178)
        c2 = z1 + PP(0.354975, -1)
        z2 = z1 + PP(0.883782, 121)
        c3 = z2 + PP(0.772263, 0)
        c4 = z2 + PP(0.728576, 180)
        z3 = z2 + PP(0.849872, -129)
        c5 = z3 + PP(0.362928, -177)
        c6 = z3 + PP(0.333457, 1)
        z4 = z3 + PP(1.00001, 0)
        c7 = z4 + PP(0.333422, 177)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            curve(),
            # controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLer(cls, ta=None, **kwargs):
        #M 114.9,12.9944 C 122.46,12.8625 130.02,12.7305 137.577,12.9944 138.842,13.0165 138.84304,9.6768793 136.18904,9.6768793 135.04404,9.6768793 134.24904,10.680779 134.67304,11.549079 135.14604,12.477779 137.1463,12.446854 138.2803,11.965454

        #z0 = P(0, -0)
        #c0 = P(2.667, 0.0465314)
        #c1 = P(5.334, 0.0930981)
        #z1 = P(7.99994, -0)
        #c2 = P(8.44621, -0.00779639)
        #c3 = P(8.44657, 1.17035)
        #z2 = P(7.5103, 1.17035)
        #c4 = P(7.10637, 1.17035)
        #c5 = P(6.82591, 0.816194)
        #z3 = P(6.97549, 0.509877)
        #c6 = P(7.14235, 0.182252)
        #c7 = P(7.848, 0.193162)
        z4 = P(8.24805, 0.362989)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.667, 0.0465314)
        #z1 = z0 + P(7.99994, 0)
        #c1 = z1 + P(-2.66594, 0.0930981)
        #c2 = z1 + P(0.446264, -0.00779639)
        #z2 = z1 + P(-0.489641, 1.17035)
        #c3 = z2 + P(0.936272, 0)
        #c4 = z2 + P(-0.403931, 0)
        #z3 = z2 + P(-0.534811, -0.66047)
        #c5 = z3 + P(-0.149578, 0.306317)
        #c6 = z3 + P(0.166864, -0.327625)
        #z4 = z3 + P(1.27256, -0.146888)
        #c7 = z4 + P(-0.40005, -0.169827)

        z0 = P(0, -0)
        c0 = z0 + PP(2.66741, 0)
        z1 = z0 + PP(7.99994, 0)
        c1 = z1 + PP(2.66757, 177)
        c2 = z1 + PP(0.446332, -1)
        z2 = z1 + PP(1.26865, 112)
        c3 = z2 + PP(0.936272, 0)
        c4 = z2 + PP(0.403931, 180)
        #z3 = z2 + PP(0.849849, -128)
        z3 = z4 - PP(1.28101, ta + 330)
        c5 = z3 + PP(0.340886, 116)
        #c6 = z3 + PP(0.36767, -63)
        #z4 = z3 + PP(1.28101, -6)
        #c7 = z4 + PP(0.434605, -156)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLnel(cls, ta=None, **kwargs):
        # M 440.60553,188.90922 C 450.88804,187.89328 454.86041,188.38637 461.6228,188.79984 463.28222,188.72786 461.61962,186.39143 460.5888,186.05884 459.26352,185.63124 456.99201,186.2796 457.1488,187.51484 457.35453,189.1356 460.2026,188.8817 461.99663,188.23699
        #moveto(440.60553, 188.90922), 
        #curveto(450.88804, 187.89328, 454.86041, 188.38637, 461.6228, 188.79984), 
        #curveto(463.28222, 188.72786, 461.61962, 186.39143, 460.5888, 186.05884), 
        #curveto(459.26352, 185.63124, 456.99201, 186.2796, 457.1488, 187.51484), 
        #curveto(457.35453, 189.1356, 460.2026, 188.8817, 461.99663, 188.23699)
        #z0 = P(0, -0)
        #c0 = P(3.61389, 0.357062)
        #c1 = P(5.01002, 0.183761)
        #z1 = P(7.38673, 0.0384427)
        #c2 = P(7.96995, 0.0637408)
        #c3 = P(7.38561, 0.884902)
        #z2 = P(7.02332, 1.00179)
        #c4 = P(6.55753, 1.15208)
        #c5 = P(5.75919, 0.924206)
        #z3 = P(5.8143, 0.490069)
        #c6 = P(5.8866, -0.0795635)
        #c7 = P(6.88758, 0.00967218)
        z4 = P(7.51811, 0.236262)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.61389, 0.357062)
        #z1 = z0 + P(7.38673, 0.0384427)
        #c1 = z1 + P(-2.37671, 0.145318)
        #c2 = z1 + P(0.58322, 0.0252981)
        #z2 = z1 + P(-0.36341, 0.963352)
        #c3 = z2 + P(0.362292, -0.116892)
        #c4 = z2 + P(-0.465783, 0.150284)
        #z3 = z2 + P(-1.20902, -0.511726)
        #c5 = z3 + P(-0.0551054, 0.434137)
        #c6 = z3 + P(0.0723058, -0.569632)
        #z4 = z3 + P(1.70382, -0.253807)
        #c7 = z4 + P(-0.63053, -0.22659)

        z0 = P(0, -0)
        c0 = z0 + PP(3.63149, 5)
        z1 = z0 + PP(7.38683, 0)
        c1 = z1 + PP(2.38115, 176)
        c2 = z1 + PP(0.583768, 2)
        z2 = z1 + PP(1.02962, 110)
        c3 = z2 + PP(0.380682, -17)
        c4 = z2 + PP(0.489427, 162)
        #z3 = z2 + PP(1.31286, -157)
        z3 = z4 + PP(-1.22262, -8)
        c5 = z3 + PP(0.437621, 97)
        #c6 = z3 + PP(0.574203, -82)
        #z4 = z3 + PP(1.72262, -8)
        #c7 = z4 + PP(0.670008, -160)

        return pyx.metapost.path.path([
        beginknot(*z0),
        controlcurve(c0, c1),
        knot(*z1),
        controlcurve(c2, c3),
        knot(*z2),
        controlcurve(c4, c5),
        knot(*z3),
        #controlcurve(c6, c7),
        curve(),
        endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLEF(cls, ta=None):
        #M 47.3414,115.096 C 55.3223,114.678 62.4108,114.702 69.9339,115.096 70.952,115.132 70.798665,112.40567 68.590565,112.40567 66.532965,112.40567 66.1159,114.894 67.1383,114.822 68.0799,114.806 69.0208,114.822 69.9624,114.822 71.322833,114.822 72.683267,114.822 74.0437,114.822

        #z0 = P(0, -0)
        #c0 = P(2.81548, 0.147461)
        #c1 = P(5.31615, 0.138994)
        #z1 = P(7.97013, -0)
        #c2 = P(8.32929, -0.0127)
        #c3 = P(8.2752, 0.949089)
        #z2 = P(7.49623, 0.949089)
        #c4 = P(6.77036, 0.949089)
        #c5 = P(6.62323, 0.0712611)
        #z3 = P(6.98391, 0.0966611)
        #c6 = P(7.31608, 0.102306)
        #c7 = P(7.64801, 0.0966611)
        #z4 = P(7.98019, 0.0966611)
        #c8 = P(8.46012, 0.0966611)
        #c9 = P(8.94005, 0.0966611)
        z5 = P(9.41998, 0.0966611)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.81548, 0.147461)
        #z1 = z0 + P(7.97013, 0)
        #c1 = z1 + P(-2.65398, 0.138994)
        #c2 = z1 + P(0.359163, -0.0127)
        #z2 = z1 + P(-0.473899, 0.949089)
        #c3 = z2 + P(0.778969, 0)
        #c4 = z2 + P(-0.725876, 0)
        #z3 = z2 + P(-0.512327, -0.852428)
        #c5 = z3 + P(-0.36068, -0.0254)
        #c6 = z3 + P(0.332176, 0.00564444)
        #z4 = z3 + P(0.99628, 0)
        #c7 = z4 + P(-0.332176, 0)
        #c8 = z4 + P(0.479931, 0)
        #z5 = z4 + P(1.43979, 0)
        #c9 = z5 + P(-0.479931, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.81934, 2)
        z1 = z0 + PP(7.97013, 0)
        c1 = z1 + PP(2.65762, 177)
        c2 = z1 + PP(0.359388, -2)
        z2 = z1 + PP(1.06082, 116)
        c3 = z2 + PP(0.778969, 0)
        c4 = z2 + PP(0.725876, 180)
        z3 = z2 + PP(0.994541, -121)
        c5 = z3 + PP(0.361573, -175)
        c6 = z3 + PP(0.332224, 0)
        z4 = z3 + PP(0.99628, 0)
        #z4 = z5 - PP(1.43979, ta + 0)
        c7 = z4 + PP(0.332176, 180)
        c8 = z4 + PP(0.479931, 0)
        z5 = z4 + PP(1.43979, 0)
        c9 = z5 + PP(0.479931, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

class CharKin(CharKi):
    def __init__(self, name='kin', kana='„Åç„Çì',
                 model='E8CL1E1F', head_type='E', tail_type='EF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_ECLEF()]

class CharKiku(CharKi):
    def __init__(self, name='kiku', kana='„Åç„Åè',
                 model='BE8CL1', head_type='BE', tail_type='ECL1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return self.barb(super().get_paths())

class CharKitsu(CharKi):
    def __init__(self, name='kitsu', kana='„Åç„Å§',
                 model='E8CL1SW1F', head_type='E', tail_type='SWF'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature = {}

    @classmethod
    def path_ECLSWF(cls, ta=None, **kwargs):
        #M 344.587,115.37 C 351.642,115 358.72,114.877 365.767,115.37 366.51,115.396 367.084,114.75 367.165,113.972 367.349,112.476 365.76488,112.13695 365.478,112.924 365.18788,113.71995 364.86875,114.50662 364.609,115.313 364.30856,116.24568 363.9917,117.11315 363.70753,117.96451

        #z0 = P(0, -0)
        #c0 = P(2.48885, 0.130528)
        #c1 = P(4.98581, 0.173919)
        #z1 = P(7.47183, -0)
        #c2 = P(7.73395, -0.00917222)
        #c3 = P(7.93644, 0.218722)
        #z2 = P(7.96502, 0.493183)
        #c4 = P(8.02993, 1.02094)
        #c5 = P(7.47109, 1.14055)
        #z3 = P(7.36988, 0.862894)
        #c6 = P(7.26753, 0.582101)
        #c7 = P(7.15495, 0.304581)
        #z4 = P(7.06332, 0.0201083)
        #c8 = P(6.95733, -0.30892)
        #c9 = P(6.84555, -0.614945)
        z5 = P(6.7453, -0.915285)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.48885, 0.130528)
        #z1 = z0 + P(7.47183, 0)
        #c1 = z1 + P(-2.48602, 0.173919)
        #c2 = z1 + P(0.262114, -0.00917222)
        #z2 = z1 + P(0.493183, 0.493183)
        #c3 = z2 + P(-0.028575, -0.274461)
        #c4 = z2 + P(0.0649111, 0.527756)
        #z3 = z2 + P(-0.595136, 0.369711)
        #c5 = z3 + P(0.101205, 0.277654)
        #c6 = z3 + P(-0.102348, -0.280793)
        #z4 = z3 + P(-0.306564, -0.842786)
        #c7 = z4 + P(0.091634, 0.284473)
        #c8 = z4 + P(-0.105989, -0.329029)
        #z5 = z4 + P(-0.318019, -0.935394)
        #c9 = z5 + P(0.100249, 0.300341)

        z0 = P(0, -0)
        c0 = z0 + PP(2.49227, 3)
        z1 = z0 + PP(7.47183, 0)
        c1 = z1 + PP(2.4921, 175)
        c2 = z1 + PP(0.262274, -2)
        z2 = z1 + PP(0.697467, 44)
        c3 = z2 + PP(0.275945, -95)
        c4 = z2 + PP(0.531732, 82)
        z3 = z2 + PP(0.700624, 148)
        c5 = z3 + PP(0.295523, 69)
        c6 = z3 + PP(0.298865, -110)
        z4 = z3 + PP(0.896811, -109)
        #z4 = z5 - PP(0.987976, ta + 1)
        c7 = z4 + PP(0.298867, 72)
        c8 = z4 + PP(0.345678, -107)
        z5 = z4 + PP(0.987976, -108)
        c9 = z5 + PP(0.31663, 71)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])
        
class CharKichi(CharKitsu):
    def __init__(self, name='kichi', kana='„Åç„Å°',
                 model='E8CL1SW1F', head_type='E', tail_type='SWF'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharKiro(CharKitsu):
    def __init__(self, name='kiro', kana='„Åç„Çç',
                 model='E8CL1SW1F', head_type='E', tail_type='SWF'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharKike(WasedaChar):
    def __init__(self, name='kike', kana='„Åç„Åë',
                 model='E8CL1SE3', head_type='E', tail_type='SE'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature = {'SE'}

    @classmethod
    def path_ECLSE(cls, ta=None, **kwargs):
        return [pyx.path.path(
            pyx.path.moveto(172.497, 157.391),
            pyx.path.curveto(179.579, 157.02, 186.683, 156.896, 193.757, 157.391),
            pyx.path.curveto(194.483, 157.429, 194.986, 156.742, 195.16, 155.988),
            pyx.path.curveto(195.924, 152.924, 191.52402, 153.02498, 192.52402, 154.90598),
            pyx.path.curveto(192.97002, 155.74398, 193.52731, 156.56348, 194.009, 157.381),
            pyx.path.curveto(195.40863, 159.75642, 196.82359, 162.17881, 198.23088, 164.43952)).transformed(pyx.trafo.trafo().translated(-172.497, -157.391).scaled(25.4 / 72, -25.4 / 72))]

    @classmethod
    def path_ECLSEse(cls, ta=None, **kwargs):
        return cls.jog(cls.path_ECLSE())

class CharKiko(WasedaChar):
    def __init__(self, name='kiko', kana='„Åç„Åì',
                 model='E8CL1TSW3', head_type='E', tail_type='SW'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature = {'SW', 'SL'}

    @classmethod
    def path_ECLTSW(cls, ta=None, **kwargs):
        return [pyx.path.path(
            pyx.path.moveto(344.87977, 117.12664),
            pyx.path.curveto(351.93477, 116.75664, 359.01277, 116.63364, 366.05977, 117.12664),
            pyx.path.curveto(366.80277, 117.15264, 367.54654, 116.38166, 367.45777, 115.72864),
            pyx.path.curveto(367.34747, 114.9172, 366.11377, 114.31717, 365.31993, 114.51823),
            pyx.path.curveto(364.70803, 114.67321, 364.02152, 115.56422, 364.31486, 116.12314),
            pyx.path.curveto(364.7727, 116.99549, 366.40521, 116.73161, 367.2675, 116.25509),
            pyx.path.curveto(368.20118, 115.73912, 368.64933, 114.06432, 368.84776, 113.47216),
            pyx.path.curveto(368.02255, 116.05381, 366.90723, 118.66041, 365.83014, 121.50219)).transformed(pyx.trafo.trafo().translated(-344.87977, -117.12664).scaled(25.4 / 72, -25.4 / 72))]

    @classmethod
    def path_ECLTSWe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWer(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWne(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWner(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWnel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWs(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWsl(cls, ta=None, **kwargs):
        return cls.jog(cls.path_ECLTSW())

    @classmethod
    def path_ECLTSWsr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWse(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWser(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWsel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWsw(cls, ta=None, **kwargs):
        return cls.jog(cls.path_ECLTSW())

    @classmethod
    def path_ECLTSWswr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ECLTSWswl(cls, ta=None, **kwargs):
        pass
