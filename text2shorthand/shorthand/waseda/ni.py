import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharNi(WasedaChar):
    def __init__(self, name='ni', kana='„Å´',
                 model='EL8CL1', head_type='EL', tail_type='ELCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_pos_nakatta(self):
        if self.paths:
            return P(*(self.paths[-1].at(self.paths[-1].arclen() * 0.4)))
        else:
            return P(0, 0)

    @classmethod
    def path_ELCL(cls, ta=None, **kwargs):
        #M 47.3414,117.104 C 53.5684,119.008 70.0186,122.567 70.0186,117.104 70.0186,115.713 69.028275,114.9355 68.14955,114.69912 67.270825,114.46275 66.5037,114.7675 66.9501,115.541 67.6128,116.689 68.351,117.823 69.2029,118.839

        #z0 = P(0, -0)
        #c0 = P(2.18854, -0.66918)
        #c1 = P(7.97013, -1.92003)
        #z1 = P(7.97013, -0)
        #c2 = P(7.97013, 0.488881)
        #c3 = P(7.62207, 0.762141)
        #z2 = P(7.31323, 0.845219)
        #c4 = P(7.00439, 0.928293)
        #c5 = P(6.73478, 0.821186)
        #z3 = P(6.89167, 0.549332)
        #c6 = P(7.12458, 0.145856)
        #c7 = P(7.38403, -0.2527)
        z4 = P(7.68344, -0.609783)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18854, -0.66918)
        #z1 = z0 + P(7.97013, 0)
        #c1 = z1 + P(0, -1.92003)
        #c2 = z1 + P(0, 0.488881)
        #z2 = z1 + P(-0.656896, 0.845219)
        #c3 = z2 + P(0.308837, -0.0830781)
        #c4 = z2 + P(-0.308837, 0.0830746)
        #z3 = z2 + P(-0.421559, -0.295887)
        #c5 = z3 + P(-0.156892, 0.271854)
        #c6 = z3 + P(0.232912, -0.403476)
        #z4 = z3 + P(0.791769, -1.15911)
        #c7 = z4 + P(-0.299409, 0.357083)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28856, -17)
        z1 = z0 + PP(7.97013, 0)
        c1 = z1 + PP(1.92003, -90)
        c2 = z1 + PP(0.488881, 90)
        z2 = z1 + PP(1.07047, 127)
        c3 = z2 + PP(0.319816, -15)
        c4 = z2 + PP(0.319815, 164)
        z3 = z2 + PP(0.515035, -144)
        #z3 = z4 - PP(1.40373, ta + -4)
        c5 = z3 + PP(0.313879, 119)
        c6 = z3 + PP(0.465877, -60)
        #z4 = z3 + PP(1.40373, -55)
        c7 = z4 + PP(0.465998, 129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_ELCLe(cls, ta=None, **kwargs):
        #M 47.3414,117.099 C 53.5452,118.995 69.9339,122.541 69.9339,117.099 69.605473,115.13119 66.745943,115.69256 66.13362,116.96228 65.674512,117.9143 68.578598,117.6435 69.874035,117.64118

        #z0 = P(0, -0)
        #c0 = P(2.18039, -0.666368)
        #c1 = P(7.94036, -1.91264)
        #z1 = P(7.94036, -0)
        #c2 = P(7.82493, 0.691606)
        #c3 = P(6.81992, 0.494307)
        #z2 = P(6.60471, 0.0480516)
        #c4 = P(6.44335, -0.286545)
        #c5 = P(7.46402, -0.19137)
        z3 = P(7.91932, -0.190555)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18039, -0.666368)
        #z1 = z0 + P(7.94036, 0)
        #c1 = z1 + P(0, -1.91264)
        #c2 = z1 + P(-0.115429, 0.691606)
        #z2 = z1 + P(-1.33565, 0.0480516)
        #c3 = z2 + P(0.215207, 0.446256)
        #c4 = z2 + P(-0.161358, -0.334597)
        #z3 = z2 + P(1.31461, -0.238606)
        #c5 = z3 + P(-0.455294, -0.000815387)

        z0 = P(0, -0)
        c0 = z0 + PP(2.27994, -16)
        z1 = z0 + PP(7.94036, 0)
        c1 = z1 + PP(1.91264, -90)
        c2 = z1 + PP(0.701173, 99)
        #z2 = z1 + PP(1.33651, 177)
        z2 = z3 - PP(1.33608, ta + 349)
        c3 = z2 + PP(0.495437, 64)
        #c4 = z2 + PP(0.371472, -115)
        #z3 = z2 + PP(1.33608, -10)
        #c5 = z3 + PP(0.455295, -179)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLer(cls, ta=None, **kwargs):
        #M 181.615,117.099 C 187.819,118.995 204.208,122.541 204.208,117.099 204.208,115.713 202.9659,115.52478 202.2909,115.82897 201.3911,116.23446 199.97184,117.94787 200.41144,118.7216 201.06388,119.86993 202.87897,118.44676 204.16548,117.5596

        #z0 = P(0, -0)
        #c0 = P(2.18046, -0.666368)
        #c1 = P(7.94053, -1.91264)
        #z1 = P(7.94053, -0)
        #c2 = P(7.94053, 0.487123)
        #c3 = P(7.50398, 0.553275)
        #z2 = P(7.26675, 0.446365)
        #c4 = P(6.95051, 0.303851)
        #c5 = P(6.45169, -0.298344)
        #z3 = P(6.60619, -0.570279)
        #c6 = P(6.8355, -0.973871)
        #c7 = P(7.47343, -0.473684)
        z4 = P(7.92559, -0.161882)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18046, -0.666368)
        #z1 = z0 + P(7.94053, 0)
        #c1 = z1 + P(0, -1.91264)
        #c2 = z1 + P(0, 0.487123)
        #z2 = z1 + P(-0.673784, 0.446365)
        #c3 = z2 + P(0.237235, 0.106911)
        #c4 = z2 + P(-0.316244, -0.142513)
        #z3 = z2 + P(-0.660555, -1.01664)
        #c5 = z3 + P(-0.154502, 0.271935)
        #c6 = z3 + P(0.229306, -0.403592)
        #z4 = z3 + P(1.31939, 0.408396)
        #c7 = z4 + P(-0.452157, -0.311801)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28001, -16)
        z1 = z0 + PP(7.94053, 0)
        c1 = z1 + PP(1.91264, -90)
        c2 = z1 + PP(0.487123, 90)
        z2 = z1 + PP(0.808224, 146)
        c3 = z2 + PP(0.260212, 24)
        c4 = z2 + PP(0.346872, -155)
        #z3 = z2 + PP(1.21239, -123)
        z3 = z4 - PP(1.38116, ta + 342)
        c5 = z3 + PP(0.312761, 119)
        #c6 = z3 + PP(0.464185, -60)
        #z4 = z3 + PP(1.38116, 17)
        #c7 = z4 + PP(0.549241, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLel(cls, ta=None, **kwargs):
        #M 311.438,79.6087 C 317.65,81.3898 333.945,85.0303 333.945,79.6087 333.945,78.2278 332.80086,77.550826 331.79586,77.484896 331.10402,77.439509 330.13213,78.047812 330.13806,78.74112 330.14939,80.066569 332.107,80.6848 333.348,81.0882

        #z0 = P(0, -0)
        #c0 = P(2.19146, -0.628332)
        #c1 = P(7.93997, -1.91262)
        #z1 = P(7.93997, -0)
        #c2 = P(7.93997, 0.487151)
        #c3 = P(7.53634, 0.725972)
        #z2 = P(7.1818, 0.749231)
        #c4 = P(6.93773, 0.765242)
        #c5 = P(6.59487, 0.550647)
        #z3 = P(6.59697, 0.306063)
        #c6 = P(6.60096, -0.161526)
        #c7 = P(7.29156, -0.379624)
        z4 = P(7.72936, -0.521935)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.19146, -0.628332)
        #z1 = z0 + P(7.93997, 0)
        #c1 = z1 + P(0, -1.91262)
        #c2 = z1 + P(0, 0.487151)
        #z2 = z1 + P(-0.758169, 0.749231)
        #c3 = z2 + P(0.354542, -0.0232586)
        #c4 = z2 + P(-0.244066, 0.0160115)
        #z3 = z2 + P(-0.584835, -0.443168)
        #c5 = z3 + P(-0.00209197, 0.244584)
        #c6 = z3 + P(0.00399697, -0.467589)
        #z4 = z3 + P(1.1324, -0.827998)
        #c7 = z4 + P(-0.437797, 0.142311)

        z0 = P(0, -0)
        c0 = z0 + PP(2.27975, -15)
        z1 = z0 + PP(7.93997, 0)
        c1 = z1 + PP(1.91262, -90)
        c2 = z1 + PP(0.487151, 90)
        z2 = z1 + PP(1.06591, 135)
        c3 = z2 + PP(0.355304, -3)
        c4 = z2 + PP(0.24459, 176)
        #z3 = z2 + PP(0.733778, -142)
        z3 = z4 - PP(1.40282, ta + -17)
        c5 = z3 + PP(0.244593, 90)
        #c6 = z3 + PP(0.467606, -89)
        #z4 = z3 + PP(1.40282, -36)
        #c7 = z4 + PP(0.460346, 161)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLne(cls, ta=None, **kwargs):
        #M 47.3414,175.52 C 53.5452,177.417 69.940893,180.963 69.9339,175.52 69.932221,174.21314 64.826189,177.78865 63.927416,178.41801

        #z0 = P(0, -0)
        #c0 = P(2.18039, -0.666719)
        #c1 = P(7.94282, -1.913)
        #z1 = P(7.94036, -0)
        #c2 = P(7.93977, 0.459309)
        #c3 = P(6.1452, -0.797339)
        z2 = P(5.82932, -1.01853)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18039, -0.666719)
        #z1 = z0 + P(7.94036, 0)
        #c1 = z1 + P(0.00245776, -1.913)
        #c2 = z1 + P(-0.000590101, 0.459309)
        #z2 = z1 + P(-2.11104, -1.01853)
        #c3 = z2 + P(0.315883, 0.221195)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28004, -17)
        z1 = z0 + PP(7.94036, 0)
        #z1 = z2 - PP(2.34391, ta + -9)
        c1 = z1 + PP(1.913, -89)
        #c2 = z1 + PP(0.459309, 90)
        #z2 = z1 + PP(2.34391, -154)
        #c3 = z2 + PP(0.385628, 35)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            tensioncurve(1.5),
            endknot(*z2, angle=ta+180)])

    @classmethod
    def path_ELCLner(cls, ta=None, **kwargs):
        #M 165.445,175.52 C 171.649,177.417 187.98071,180.9627 188.038,175.52 188.06458,172.99499 185.10981,175.91751 184.07118,178.31127

        #z0 = P(0, -0)
        #c0 = P(2.18046, -0.666719)
        #c1 = P(7.9204, -1.91289)
        #z1 = P(7.94053, -0)
        #c2 = P(7.94987, 0.88744)
        #c3 = P(6.91139, -0.139709)
        z2 = P(6.54635, -0.981019)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18046, -0.666719)
        #z1 = z0 + P(7.94053, 0)
        #c1 = z1 + P(-0.0201351, -1.91289)
        #c2 = z1 + P(0.0093418, 0.88744)
        #z2 = z1 + P(-1.39418, -0.981019)
        #c3 = z2 + P(0.365037, 0.841311)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28011, -17)
        z1 = z0 + PP(7.94053, 0)
        #z1 = z2 - PP(1.70474, ta + -30)
        c1 = z1 + PP(1.913, -90)
        #c2 = z1 + PP(0.887489, 89)
        #z2 = z1 + PP(1.70474, -144)
        #c3 = z2 + PP(0.917091, 66)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta+180)])

    @classmethod
    def path_ELCLnel(cls, ta=None, **kwargs):
        #M 10054.4,0 C 10060.6,1.88941 10076.9,5.42268 10076.9,0 10076.9,-1.38082 10075.756,-1.8581356 10075.002,-1.4215293 10074.061,-0.87646241 10073.222,0.91341696 10073.993,1.6803945 10074.691,2.3755797 10075.5,1.52492 10076.8,0.752119

        #z0 = P(0, 0)
        #c0 = P(2.18722, -0.666542)
        #c1 = P(7.9375, -1.913)
        #z1 = P(7.9375, 0)
        #c2 = P(7.9375, 0.487123)
        #c3 = P(7.53392, 0.655509)
        #z2 = P(7.26793, 0.501484)
        #c4 = P(6.93596, 0.309196)
        #c5 = P(6.63998, -0.322233)
        #z3 = P(6.91198, -0.592806)
        #c6 = P(7.15821, -0.838052)
        #c7 = P(7.44361, -0.537958)
        z4 = P(7.90222, -0.265331)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.18722, -0.666542)
        #z1 = z0 + P(7.9375, 0)
        #c1 = z1 + P(0, -1.913)
        #c2 = z1 + P(0, 0.487123)
        #z2 = z1 + P(-0.669572, 0.501484)
        #c3 = z2 + P(0.265994, 0.154025)
        #c4 = z2 + P(-0.331964, -0.192287)
        #z3 = z2 + P(-0.355953, -1.09429)
        #c5 = z3 + P(-0.271992, 0.270573)
        #c6 = z3 + P(0.246239, -0.245246)
        #z4 = z3 + P(0.990247, 0.327475)
        #c7 = z4 + P(-0.458611, -0.272627)

        z0 = P(0, 0)
        c0 = z0 + PP(2.28653, -16)
        z1 = z0 + PP(7.9375, 0)
        c1 = z1 + PP(1.913, -90)
        c2 = z1 + PP(0.487123, 90)
        z2 = z1 + PP(0.836548, 143)
        c3 = z2 + PP(0.307371, 30)
        c4 = z2 + PP(0.383633, -149)
        #z3 = z2 + PP(1.15073, -108)
        z3 = z4 - PP(1.04299, ta + 347)
        c5 = z3 + PP(0.383652, 135)
        #c6 = z3 + PP(0.347533, -44)
        #z4 = z3 + PP(1.04299, 18)
        #c7 = z4 + PP(0.533526, -149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLs(cls, ta=None, **kwargs):
        #M 47.3414,219.365 C 53.5452,221.262 69.578054,224.79535 69.9339,219.365 70.091699,216.95692 67.111605,216.22461 67.455176,218.01099 67.704483,219.30725 67.721617,220.46624 67.721617,221.75124

        #z0 = P(0, -0)
        #c0 = P(2.18039, -0.666719)
        #c1 = P(7.81529, -1.90855)
        #z1 = P(7.94036, -0)
        #c2 = P(7.99582, 0.846343)
        #c3 = P(6.94843, 1.10372)
        #z2 = P(7.06919, 0.47588)
        #c4 = P(7.15681, 0.0202968)
        #c5 = P(7.16283, -0.387042)
        z3 = P(7.16283, -0.838668)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18039, -0.666719)
        #z1 = z0 + P(7.94036, 0)
        #c1 = z1 + P(-0.125066, -1.90855)
        #c2 = z1 + P(0.05546, 0.846343)
        #z2 = z1 + P(-0.871172, 0.47588)
        #c3 = z2 + P(-0.120751, 0.627841)
        #c4 = z2 + P(0.0876214, -0.455583)
        #z3 = z2 + P(0.0936433, -1.31455)
        #c5 = z3 + P(0, 0.451626)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28004, -17)
        z1 = z0 + PP(7.94036, 0)
        c1 = z1 + PP(1.91264, -93)
        c2 = z1 + PP(0.848159, 86)
        #z2 = z1 + PP(0.992674, 151)
        z2 = z3 - PP(1.31788, ta + 5)
        c3 = z2 + PP(0.639347, 100)
        #c4 = z2 + PP(0.463933, -79)
        #z3 = z2 + PP(1.31788, -85)
        #c5 = z3 + PP(0.451626, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLsl(cls, ta=None, **kwargs):
        #M 111.644,219.365 C 117.848,221.262 134.25643,224.80696 134.236,219.365 134.22537,216.53396 133.15891,216.74699 132.13087,218.83071 131.5469,220.01436 131.05874,221.11823 130.64206,222.10757

        #z0 = P(0, -0)
        #c0 = P(2.18046, -0.666719)
        #c1 = P(7.94736, -1.91263)
        #z1 = P(7.94018, -0)
        #c2 = P(7.93645, 0.994997)
        #c3 = P(7.56163, 0.920125)
        #z2 = P(7.20031, 0.187781)
        #c4 = P(6.99507, -0.228224)
        #c5 = P(6.8235, -0.61619)
        z3 = P(6.67706, -0.963903)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18046, -0.666719)
        #z1 = z0 + P(7.94018, 0)
        #c1 = z1 + P(0.00718033, -1.91263)
        #c2 = z1 + P(-0.00373602, 0.994997)
        #z2 = z1 + P(-0.739869, 0.187781)
        #c3 = z2 + P(0.361315, 0.732344)
        #c4 = z2 + P(-0.205242, -0.416005)
        #z3 = z2 + P(-0.523257, -1.15168)
        #c5 = z3 + P(0.146446, 0.347713)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28011, -17)
        z1 = z0 + PP(7.94018, 0)
        c1 = z1 + PP(1.91264, -89)
        c2 = z1 + PP(0.995004, 90)
        z2 = z1 + PP(0.763327, 165)
        #z2 = z3 - PP(1.26498, ta + -1)
        c3 = z2 + PP(0.816625, 63)
        #c4 = z2 + PP(0.46388, -116)
        #z3 = z2 + PP(1.26498, -114)
        #c5 = z3 + PP(0.377294, 67)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLsr(cls, ta=None, **kwargs):
        #M 175.946,219.365 C 182.15,221.262 198.539,224.807 198.539,219.365 198.539,217.979 197.58605,217.18315 196.712,216.941 195.83899,216.69914 195.00531,217.19772 195.44511,217.97179 196.09736,219.1198 197.06679,220.067 197.726,221.093

        #z0 = P(0, -0)
        #c0 = P(2.18046, -0.666719)
        #c1 = P(7.94053, -1.91264)
        #z1 = P(7.94053, -0)
        #c2 = P(7.94053, 0.487123)
        #c3 = P(7.60561, 0.766833)
        #z2 = P(7.29842, 0.851939)
        #c4 = P(6.99159, 0.936943)
        #c5 = P(6.69858, 0.761712)
        #z3 = P(6.85315, 0.489657)
        #c6 = P(7.08239, 0.086178)
        #c7 = P(7.42311, -0.246725)
        z4 = P(7.6548, -0.607323)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18046, -0.666719)
        #z1 = z0 + P(7.94053, 0)
        #c1 = z1 + P(0, -1.91264)
        #c2 = z1 + P(0, 0.487123)
        #z2 = z1 + P(-0.642117, 0.851939)
        #c3 = z2 + P(0.307194, -0.085106)
        #c4 = z2 + P(-0.306828, 0.0850041)
        #z3 = z2 + P(-0.445261, -0.362281)
        #c5 = z3 + P(-0.154572, 0.272055)
        #c6 = z3 + P(0.22924, -0.403479)
        #z4 = z3 + P(0.801641, -1.09698)
        #c7 = z4 + P(-0.231686, 0.360598)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28011, -17)
        z1 = z0 + PP(7.94053, 0)
        c1 = z1 + PP(1.91264, -90)
        c2 = z1 + PP(0.487123, 90)
        z2 = z1 + PP(1.06682, 127)
        c3 = z2 + PP(0.318765, -15)
        c4 = z2 + PP(0.318385, 164)
        #z3 = z2 + PP(0.574025, -140)
        z3 = z4 - PP(1.35867, ta + 5)
        c5 = z3 + PP(0.3129, 119)
        #c6 = z3 + PP(0.464054, -60)
        #z4 = z3 + PP(1.35867, -53)
        #c7 = z4 + PP(0.428613, 122)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLse(cls, ta=None, **kwargs):
        #M 47.3414,300.463 C 53.5452,302.36 69.9339,305.906 69.9339,300.463 69.9339,299.03505 68.981352,298.2825 68.1078,298.04 67.234188,297.79748 66.22961,298.29628 66.754815,298.98389 67.556592,300.0336 68.29,301.165 69.1212,302.192

        #z0 = P(0, -0)
        #c0 = P(2.18039, -0.666719)
        #c1 = P(7.94036, -1.913)
        #z1 = P(7.94036, -0)
        #c2 = P(7.94036, 0.501867)
        #c3 = P(7.60557, 0.766358)
        #z2 = P(7.29856, 0.851587)
        #c4 = P(6.99152, 0.936823)
        #c5 = P(6.63845, 0.761515)
        #z3 = P(6.82304, 0.519848)
        #c6 = P(7.10483, 0.150917)
        #c7 = P(7.36259, -0.246725)
        z4 = P(7.65473, -0.607674)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18039, -0.666719)
        #z1 = z0 + P(7.94036, 0)
        #c1 = z1 + P(0, -1.913)
        #c2 = z1 + P(0, 0.501867)
        #z2 = z1 + P(-0.641801, 0.851587)
        #c3 = z2 + P(0.307018, -0.085229)
        #c4 = z2 + P(-0.30704, 0.085236)
        #z3 = z2 + P(-0.47552, -0.331739)
        #c5 = z3 + P(-0.184588, 0.241667)
        #c6 = z3 + P(0.281792, -0.368931)
        #z4 = z3 + P(0.831689, -1.12752)
        #c7 = z4 + P(-0.292133, 0.360949)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28004, -17)
        z1 = z0 + PP(7.94036, 0)
        c1 = z1 + PP(1.913, -90)
        c2 = z1 + PP(0.501867, 90)
        z2 = z1 + PP(1.06635, 127)
        c3 = z2 + PP(0.318629, -15)
        c4 = z2 + PP(0.318651, 164)
        #z3 = z2 + PP(0.579802, -145)
        z3 = z4 - PP(1.40108, ta + -1)
        c5 = z3 + PP(0.304099, 127)
        #c6 = z3 + PP(0.464238, -52)
        #z4 = z3 + PP(1.40108, -53)
        #c7 = z4 + PP(0.464356, 128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLser(cls, ta=None, **kwargs):
        #M 10148.7,0 C 10154.9,1.78657 10171.2,5.42268 10171.2,0 10171.2,-1.37983 10169.8,-1.85114 10168.9,-1.63707 10167.9,-1.40734 10165.798,-0.12525551 10167.598,0.42530949 10168.598,0.72764549 10169.796,1.1293224 10170.796,1.3266724

        #z0 = P(0, 0)
        #c0 = P(2.18722, -0.630262)
        #c1 = P(7.9375, -1.913)
        #z1 = P(7.9375, 0)
        #c2 = P(7.9375, 0.486773)
        #c3 = P(7.44361, 0.653041)
        #z2 = P(7.12611, 0.577522)
        #c4 = P(6.77333, 0.496478)
        #c5 = P(6.03179, 0.0441874)
        #z3 = P(6.66679, -0.15004)
        #c6 = P(7.01957, -0.256697)
        #c7 = P(7.4422, -0.3984)
        z4 = P(7.79498, -0.468021)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.18722, -0.630262)
        #z1 = z0 + P(7.9375, 0)
        #c1 = z1 + P(0, -1.913)
        #c2 = z1 + P(0, 0.486773)
        #z2 = z1 + P(-0.811389, 0.577522)
        #c3 = z2 + P(0.3175, 0.0755191)
        #c4 = z2 + P(-0.352778, -0.0810436)
        #z3 = z2 + P(-0.459317, -0.727562)
        #c5 = z3 + P(-0.635, 0.194227)
        #c6 = z3 + P(0.352778, -0.106657)
        #z4 = z3 + P(1.12818, -0.317981)
        #c7 = z4 + P(-0.352778, 0.0696207)

        z0 = P(0, 0)
        c0 = z0 + PP(2.27622, -16)
        z1 = z0 + PP(7.9375, 0)
        c1 = z1 + PP(1.913, -90)
        c2 = z1 + PP(0.486773, 90)
        z2 = z1 + PP(0.995933, 144)
        c3 = z2 + PP(0.326358, 13)
        c4 = z2 + PP(0.361967, -167)
        #z3 = z2 + PP(0.860417, -122)
        z3 = z4 - PP(1.17214, ta + -3)
        c5 = z3 + PP(0.66404, 162)
        #c6 = z3 + PP(0.368548, -16)
        #z4 = z3 + PP(1.17214, -15)
        #c7 = z4 + PP(0.359582, 168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLsel(cls, ta=None, **kwargs):
        #M 164.608,300.463 C 170.811,302.36 187.2,305.906 187.2,300.463 187.14403,298.79286 185.67077,297.65007 185.22371,298.94095 184.79149,300.18895 184.69307,301.88402 184.65715,302.99675

        #z0 = P(0, -0)
        #c0 = P(2.18011, -0.666719)
        #c1 = P(7.94018, -1.913)
        #z1 = P(7.94018, -0)
        #c2 = P(7.92051, 0.586987)
        #c3 = P(7.40272, 0.988632)
        #z2 = P(7.24559, 0.53494)
        #c4 = P(7.09369, 0.0963176)
        #c5 = P(7.0591, -0.499432)
        z3 = P(7.04647, -0.890511)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18011, -0.666719)
        #z1 = z0 + P(7.94018, 0)
        #c1 = z1 + P(0, -1.913)
        #c2 = z1 + P(-0.0196712, 0.586987)
        #z2 = z1 + P(-0.694587, 0.53494)
        #c3 = z2 + P(0.157124, 0.453693)
        #c4 = z2 + P(-0.151908, -0.438622)
        #z3 = z2 + P(-0.199123, -1.42545)
        #c5 = z3 + P(0.0126244, 0.39108)

        z0 = P(0, -0)
        c0 = z0 + PP(2.27978, -17)
        z1 = z0 + PP(7.94018, 0)
        c1 = z1 + PP(1.913, -90)
        c2 = z1 + PP(0.587317, 91)
        #z2 = z1 + PP(0.876705, 142)
        z2 = z3 - PP(1.43929, ta + -5)
        c3 = z2 + PP(0.48013, 70)
        #c4 = z2 + PP(0.464182, -109)
        #z3 = z2 + PP(1.43929, -97)
        #c5 = z3 + PP(0.391284, 88)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLsw(cls, ta=None, **kwargs):
        #M 47.3414,375.836 C 53.5452,377.732 69.9339,381.278 69.9339,375.836 69.9339,373.47046 68.749452,373.61245 68.300882,374.95714 67.882899,376.21015 67.445436,377.22262 67.183317,378.34413

        #z0 = P(0, -0)
        #c0 = P(2.18039, -0.666368)
        #c1 = P(7.94036, -1.91264)
        #z1 = P(7.94036, -0)
        #c2 = P(7.94036, 0.831392)
        #c3 = P(7.52407, 0.781489)
        #z2 = P(7.36642, 0.308884)
        #c4 = P(7.21951, -0.131499)
        #c5 = P(7.06576, -0.487341)
        z3 = P(6.97364, -0.881507)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18039, -0.666368)
        #z1 = z0 + P(7.94036, 0)
        #c1 = z1 + P(0, -1.91264)
        #c2 = z1 + P(0, 0.831392)
        #z2 = z1 + P(-0.57394, 0.308884)
        #c3 = z2 + P(0.157654, 0.472605)
        #c4 = z2 + P(-0.146904, -0.440383)
        #z3 = z2 + P(-0.392779, -1.19039)
        #c5 = z3 + P(0.0921243, 0.394166)

        z0 = P(0, -0)
        c0 = z0 + PP(2.27994, -16)
        z1 = z0 + PP(7.94036, 0)
        c1 = z1 + PP(1.91264, -90)
        c2 = z1 + PP(0.831392, 90)
        z2 = z1 + PP(0.65178, 151)
        #z2 = z3 - PP(1.25352, ta + -4)
        c3 = z2 + PP(0.498207, 71)
        #c4 = z2 + PP(0.464239, -108)
        #z3 = z2 + PP(1.25352, -108)
        #c5 = z3 + PP(0.404788, 76)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLswr(cls, ta=None, **kwargs):
        #M 107.766,375.836 C 113.97,377.732 130.358,381.278 130.358,375.836 130.358,374.45 129.40592,373.65462 128.532,373.412 127.65885,373.1696 126.91194,373.49652 127.351,374.27 128.00298,375.41859 128.29795,376.95162 128.58988,378.11357

        #z0 = P(0, -0)
        #c0 = P(2.18046, -0.666368)
        #c1 = P(7.94018, -1.91264)
        #z1 = P(7.94018, -0)
        #c2 = P(7.94018, 0.487123)
        #c3 = P(7.60556, 0.766668)
        #z2 = P(7.29842, 0.851939)
        #c4 = P(6.99154, 0.937133)
        #c5 = P(6.72903, 0.822233)
        #z3 = P(6.88334, 0.550386)
        #c6 = P(7.11249, 0.146703)
        #c7 = P(7.21616, -0.392096)
        z4 = P(7.31876, -0.800474)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18046, -0.666368)
        #z1 = z0 + P(7.94018, 0)
        #c1 = z1 + P(0, -1.91264)
        #c2 = z1 + P(0, 0.487123)
        #z2 = z1 + P(-0.641766, 0.851939)
        #c3 = z2 + P(0.307148, -0.0852712)
        #c4 = z2 + P(-0.306877, 0.0851939)
        #z3 = z2 + P(-0.415074, -0.301553)
        #c5 = z3 + P(-0.154312, 0.271847)
        #c6 = z3 + P(0.229145, -0.403683)
        #z4 = z3 + P(0.435417, -1.35086)
        #c7 = z4 + P(-0.102602, 0.408379)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28001, -16)
        z1 = z0 + PP(7.94018, 0)
        c1 = z1 + PP(1.91264, -90)
        c2 = z1 + PP(0.487123, 90)
        z2 = z1 + PP(1.06661, 126)
        c3 = z2 + PP(0.318765, -15)
        c4 = z2 + PP(0.318483, 164)
        #z3 = z2 + PP(0.51305, -144)
        z3 = z4 - PP(1.4193, ta + 4)
        c5 = z3 + PP(0.312591, 119)
        #c6 = z3 + PP(0.464185, -60)
        #z4 = z3 + PP(1.4193, -72)
        #c7 = z4 + PP(0.42107, 104)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ELCLswl(cls, ta=None, **kwargs):
        #M 190.482,300.608 C 196.695,302.389 213.912,306.28362 213.912,300.86162 213.912,299.11062 210.76825,302.16777 209.34988,303.59333

        #z0 = P(0, -0)
        #c0 = P(2.18362, -0.62595)
        #c1 = P(8.2347, -1.99475)
        #z1 = P(8.2347, -0.0891373)
        #c2 = P(8.2347, 0.526269)
        #c3 = P(7.1298, -0.548197)
        z2 = P(6.6313, -1.04922)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18362, -0.62595)
        #z1 = z0 + P(8.2347, -0.0891373)
        #c1 = z1 + P(0, -1.90562)
        #c2 = z1 + P(0, 0.615406)
        #z2 = z1 + P(-1.6034, -0.960086)
        #c3 = z2 + P(0.4985, 0.501027)

        z0 = P(0, -0)
        c0 = z0 + PP(2.27157, -15)
        z1 = z0 + PP(8.23519, 0)
        #z1 = z2 - PP(1.86887, ta + -14)
        c1 = z1 + PP(1.90562, -90)
        #c2 = z1 + PP(0.615406, 90)
        #z2 = z1 + PP(1.86887, -149)
        #c3 = z2 + PP(0.706775, 45)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])


    @classmethod
    def path_ELCLE(cls, ta=None, **kwargs):
        #M 221.142,117.099 C 227.354,118.88 243.65,122.52 243.65,117.099 243.4945,116.117 242.6076,115.84299 241.8755,115.79775 241.11243,115.75059 240.16198,116.16107 239.873,116.916 239.42176,118.09481 241.733,117.639 243.59,117.639 244.63037,117.639 245.67073,117.639 246.7111,117.639

        #z0 = P(0, -0)
        #c0 = P(2.19146, -0.628297)
        #c1 = P(7.94032, -1.91241)
        #z1 = P(7.94032, -0)
        #c2 = P(7.88547, 0.346428)
        #c3 = P(7.57259, 0.443092)
        #z2 = P(7.31432, 0.459052)
        #c4 = P(7.04512, 0.475689)
        #c5 = P(6.70983, 0.330881)
        #z3 = P(6.60788, 0.0645583)
        #c6 = P(6.44869, -0.3513)
        #c7 = P(7.26405, -0.1905)
        #z4 = P(7.91916, -0.1905)
        #c8 = P(8.28617, -0.1905)
        #c9 = P(8.65319, -0.1905)
        z5 = P(9.02021, -0.1905)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.19146, -0.628297)
        #z1 = z0 + P(7.94032, 0)
        #c1 = z1 + P(0, -1.91241)
        #c2 = z1 + P(-0.0548569, 0.346428)
        #z2 = z1 + P(-0.626004, 0.459052)
        #c3 = z2 + P(0.258269, -0.0159597)
        #c4 = z2 + P(-0.269194, 0.016637)
        #z3 = z2 + P(-0.706437, -0.394494)
        #c5 = z3 + P(0.101946, 0.266323)
        #c6 = z3 + P(-0.159187, -0.415858)
        #z4 = z3 + P(1.31128, -0.255058)
        #c7 = z4 + P(-0.655108, 0)
        #c8 = z4 + P(0.367019, 0)
        #z5 = z4 + P(1.10105, 0)
        #c9 = z5 + P(-0.367019, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.27974, -15)
        z1 = z0 + PP(7.94032, 0)
        c1 = z1 + PP(1.91241, -90)
        c2 = z1 + PP(0.350744, 98)
        z2 = z1 + PP(0.77628, 143)
        c3 = z2 + PP(0.258761, -3)
        c4 = z2 + PP(0.269708, 176)
        z3 = z2 + PP(0.809123, -150)
        c5 = z3 + PP(0.285168, 69)
        c6 = z3 + PP(0.445285, -110)
        z4 = z3 + PP(1.33585, -11)
        #z4 = z5 - PP(1.10105, ta + 0)
        c7 = z4 + PP(0.655108, 180)
        c8 = z4 + PP(0.367019, 0)
        z5 = z4 + PP(1.10105, 0)
        c9 = z5 + PP(0.367019, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

class CharNin(CharNi):
    def __init__(self, name='nin', kana='„Å´',
                 model='EL8CL1E1F', head_type='EL', tail_type='EF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_ELCLE()]

class CharNiku(CharNi):
    def __init__(self, name='niku', kana='„Å´„Åè',
                 model='BEL8CL1', head_type='BEL', tail_type='ELCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharNikansuru(WasedaChar):
    def __init__(self, name='nikansuru', kana='„Å´„Åã„Çì„Åô„Çã',
                 model='EL8CL1XV2', head_type='EL', tail_type='NE'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature = {}
    
    @classmethod
    def path_ELCLXV(cls, ta=None, **kwargs):
        #M 5553.29,-9.13103 C 5553.42,-8.88287 5555.65,-4.27932 5555.66,-4.25153 5556.54,-5.9142 5557.43,-7.56715 5558.31,-9.10701 M 5544.6,-9.35235 C 5550.81,-7.45565 5567.2,-3.90975 5567.2,-9.35235 5567.2,-10.7381 5566.25,-11.5411 5565.37,-11.7757 5564.5,-12.0256 5563.76,-11.6958 5564.19,-10.9176 5564.85,-9.77395 5565.55,-8.65045 5566.38,-7.62385
        return [p.transformed(pyx.trafo.trafo().translated(-5544.6, 9.35235).scaled(25.4 / 72, -25.4 / 72)) for p in [
            pyx.path.path(pyx.path.moveto(5544.6, -9.35235),
            pyx.path.curveto(5550.81, -7.45565, 5567.2, -3.90975, 5567.2, -9.35235),
            pyx.path.curveto(5567.2, -10.7381, 5566.25, -11.5411, 5565.37, -11.7757),
            pyx.path.curveto(5564.5, -12.0256, 5563.76, -11.6958, 5564.19, -10.9176),
            pyx.path.curveto(5564.85, -9.77395, 5565.55, -8.65045, 5566.38, -7.62385)),
            pyx.path.path(pyx.path.moveto(5553.29, -9.13103),
            pyx.path.curveto(5553.42, -8.88287, 5555.65, -4.27932, 5555.66, -4.25153),
            pyx.path.curveto(5556.54, -5.9142, 5557.43, -7.56715, 5558.31, -9.10701))]]

    @classmethod
    def path_ELCLXVe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVer(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVne(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVner(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVnel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVs(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVsl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVsr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVse(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVser(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVsel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVsw(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVswr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_ELCLXVswl(cls, ta=None, **kwargs):
        pass
