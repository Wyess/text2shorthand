import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)


class CharRe(WasedaChar):
    def __init__(self, name='re', kana='れ',
                 model='SER16CR1', head_type='SER',
                 tail_type='SERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.head_ligature = {'NER'}

    @classmethod
    def path_SERCR(cls, ta=None, **kwargs):
        #M0.000000 -0.000000C10.774521 6.220657,24.884918 23.853638,24.884674 33.940796C24.884598 36.879044,20.587357 35.822220,22.318192 34.369919C23.188446 33.639709,23.993256 32.834900,24.723465 31.964645

        #z0 = P(0, -0)
        #c0 = P(3.78681, -2.18631)
        #c1 = P(8.74605, -8.3836)
        #z1 = P(8.74596, -11.9288)
        #c2 = P(8.74594, -12.9615)
        #c3 = P(7.23563, -12.5901)
        #z2 = P(7.84395, -12.0796)
        #c4 = P(8.14981, -11.823)
        #c5 = P(8.43267, -11.5401)
        #z3 = P(8.68931, -11.2343)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.78681, -2.18631)
        #z1 = z0 + P(8.74596, -11.9288)
        #c1 = z1 + P(8.57562e-05, 3.54523)
        #c2 = z1 + P(-2.6711e-05, -1.03268)
        #z2 = z1 + P(-0.902015, -0.15082)
        #c3 = z2 + P(-0.608319, -0.510426)
        #c4 = z2 + P(0.305859, 0.25664)
        #z3 = z2 + P(0.845357, 0.845357)
        #c5 = z3 + P(-0.256639, -0.30586)

        z0 = P(0, -0)
        c0 = z0 + PP(4.37263, -29)
        z1 = z0 + PP(14.7915, -53)
        c1 = z1 + PP(3.54523, 89)
        c2 = z1 + PP(1.03268, -90)
        z2 = z1 + PP(0.914537, -170)
        #z2 = z3 - PP(1.19552, ta + 354)
        c3 = z2 + PP(0.794095, -140)
        c4 = z2 + PP(0.399267, 39)
        z3 = z2 + PP(1.19552, 45)
        c5 = z3 + PP(0.399267, -129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SERCRe(cls, ta=None, **kwargs):
        #M 47.3414,146.91 C 58.1822,152.919 72.7501,170.347 72.5747,180.395 72.5747,183.323 69.306181,180.6084 69.283239,179.46887 69.261121,178.37026 71.28591,178.449 72.418,178.449

        #z0 = P(0, -0)
        #c0 = P(3.81011, -2.11192)
        #c1 = P(8.93014, -8.23717)
        #z1 = P(8.86849, -11.7686)
        #c2 = P(8.86849, -12.7977)
        #c3 = P(7.71974, -11.8436)
        #z2 = P(7.71168, -11.4431)
        #c4 = P(7.7039, -11.057)
        #c5 = P(8.41553, -11.0847)
        z3 = P(8.81342, -11.0847)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81011, -2.11192)
        #z1 = z0 + P(8.86849, -11.7686)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -1.02907)
        #z2 = z1 + P(-1.15682, 0.325498)
        #c3 = z2 + P(0.00806319, -0.400499)
        #c4 = z2 + P(-0.00777359, 0.386117)
        #z3 = z2 + P(1.10174, 0.358443)
        #c5 = z3 + P(-0.397884, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, -28)
        z1 = z0 + PP(14.736, -52)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(1.02907, -90)
        #z2 = z1 + PP(1.20174, 164)
        z2 = z3 - PP(1.15858, ta + 18)
        c3 = z2 + PP(0.40058, -88)
        #c4 = z2 + PP(0.386196, 91)
        #z3 = z2 + PP(1.15858, 18)
        #c5 = z3 + PP(0.397884, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRer(cls, ta=None, **kwargs):
        #M 188.209,146.91 C 199.05,152.919 213.57829,170.34638 213.442,180.395 213.40229,183.32273 211.13278,182.01955 210.63497,181.18471 209.98464,180.09406 212.22744,178.85177 213.286,178.449

        #z0 = P(0, -0)
        #c0 = P(3.81018, -2.11192)
        #c1 = P(8.91629, -8.23695)
        #z1 = P(8.86839, -11.7686)
        #c2 = P(8.85443, -12.7976)
        #c3 = P(8.05679, -12.3396)
        #z2 = P(7.88183, -12.0462)
        #c4 = P(7.65326, -11.6629)
        #c5 = P(8.44152, -11.2263)
        z3 = P(8.81356, -11.0847)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81018, -2.11192)
        #z1 = z0 + P(8.86839, -11.7686)
        #c1 = z1 + P(0.0479005, 3.53169)
        #c2 = z1 + P(-0.0139565, -1.02898)
        #z2 = z1 + P(-0.986558, -0.277551)
        #c3 = z2 + P(0.17496, -0.293413)
        #c4 = z2 + P(-0.228565, 0.38332)
        #z3 = z2 + P(0.931731, 0.961492)
        #c5 = z3 + P(-0.372041, -0.141557)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35634, -28)
        z1 = z0 + PP(14.736, -52)
        c1 = z1 + PP(3.53201, 89)
        c2 = z1 + PP(1.02907, -90)
        #z2 = z1 + PP(1.02486, -164)
        z2 = z3 - PP(1.33888, ta + 384)
        c3 = z2 + PP(0.341617, -59)
        #c4 = z2 + PP(0.446291, 120)
        #z3 = z2 + PP(1.33888, 45)
        #c5 = z3 + PP(0.398062, -159)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRel(cls, ta=None, **kwargs):
        #M 123.444,146.91 C 134.285,152.919 148.81352,170.34639 148.678,180.395 148.63852,183.32273 145.05924,179.01419 145.64517,177.82588 146.07894,176.94615 147.54069,177.88302 148.521,178.449

        #z0 = P(0, -0)
        #c0 = P(3.81018, -2.11192)
        #c1 = P(8.91637, -8.23695)
        #z1 = P(8.86874, -11.7686)
        #c2 = P(8.85486, -12.7976)
        #c3 = P(7.59689, -11.2833)
        #z2 = P(7.80282, -10.8657)
        #c4 = P(7.95527, -10.5565)
        #c5 = P(8.46902, -10.8858)
        z3 = P(8.81356, -11.0847)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81018, -2.11192)
        #z1 = z0 + P(8.86874, -11.7686)
        #c1 = z1 + P(0.0476298, 3.53168)
        #c2 = z1 + P(-0.0138756, -1.02898)
        #z2 = z1 + P(-1.06592, 0.902943)
        #c3 = z2 + P(-0.205931, -0.417643)
        #c4 = z2 + P(0.152453, 0.30919)
        #z3 = z2 + P(1.01074, -0.219002)
        #c5 = z3 + P(-0.34454, 0.198919)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35634, -28)
        z1 = z0 + PP(14.7362, -52)
        c1 = z1 + PP(3.532, 89)
        c2 = z1 + PP(1.02907, -90)
        #z2 = z1 + PP(1.39696, 139)
        z2 = z3 - PP(1.03419, ta + 18)
        c3 = z2 + PP(0.465654, -116)
        #c4 = z2 + PP(0.344732, 63)
        #z3 = z2 + PP(1.03419, -12)
        #c5 = z3 + PP(0.39784, 150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRne(cls, ta=None, **kwargs):
        #M 47.3414,235.142 C 58.1822,241.151 72.7501,258.58 72.5747,268.628 72.5747,271.555 69.560827,269.78261 69.928917,269.078 70.344006,268.28342 71.49121,267.33079 72.418,266.682

        #z0 = P(0, -0)
        #c0 = P(3.81011, -2.11192)
        #c1 = P(8.93014, -8.23752)
        #z1 = P(8.86849, -11.769)
        #c2 = P(8.86849, -12.7977)
        #c3 = P(7.80924, -12.1748)
        #z2 = P(7.93861, -11.9271)
        #c4 = P(8.08449, -11.6479)
        #c5 = P(8.48769, -11.3131)
        z3 = P(8.81342, -11.085)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81011, -2.11192)
        #z1 = z0 + P(8.86849, -11.769)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -1.02872)
        #z2 = z1 + P(-0.929887, -0.158157)
        #c3 = z2 + P(-0.129369, -0.247642)
        #c4 = z2 + P(0.145887, 0.279263)
        #z3 = z2 + P(0.874813, 0.842098)
        #c5 = z3 + P(-0.325729, -0.228024)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, -28)
        z1 = z0 + PP(14.7363, -53)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(1.02872, -90)
        #z2 = z1 + PP(0.943241, -170)
        z2 = z3 - PP(1.21426, ta + 368)
        c3 = z2 + PP(0.279397, -117)
        #c4 = z2 + PP(0.315073, 62)
        #z3 = z2 + PP(1.21426, 43)
        #c5 = z3 + PP(0.397611, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRner(cls, ta=None, **kwargs):
        #M 110.055,235.142 C 120.896,241.151 135.42453,258.57939 135.289,268.628 135.24953,271.55473 134.08023,270.03575 133.81229,269.26357 133.49851,268.3593 133.91829,265.22615 134.63029,264.34715

        #z0 = P(0, -0)
        #c0 = P(3.81018, -2.11192)
        #c1 = P(8.91637, -8.2373)
        #z1 = P(8.86874, -11.769)
        #c2 = P(8.85487, -12.7976)
        #c3 = P(8.4439, -12.2638)
        #z2 = P(8.34973, -11.9924)
        #c4 = P(8.23945, -11.6745)
        #c5 = P(8.38699, -10.5734)
        z3 = P(8.63723, -10.2644)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81018, -2.11192)
        #z1 = z0 + P(8.86874, -11.769)
        #c1 = z1 + P(0.0476334, 3.53168)
        #c2 = z1 + P(-0.0138721, -1.02863)
        #z2 = z1 + P(-0.519004, -0.223377)
        #c3 = z2 + P(0.0941702, -0.27139)
        #c4 = z2 + P(-0.110281, 0.317815)
        #z3 = z2 + P(0.287494, 1.72792)
        #c5 = z3 + P(-0.250239, -0.308933)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35634, -28)
        z1 = z0 + PP(14.7365, -52)
        c1 = z1 + PP(3.532, 89)
        c2 = z1 + PP(1.02872, -90)
        z2 = z1 + PP(0.565034, -156)
        #z2 = z3 - PP(1.75168, ta + 389)
        c3 = z2 + PP(0.287264, -70)
        #c4 = z2 + PP(0.336405, 109)
        #z3 = z2 + PP(1.75168, 80)
        #c5 = z3 + PP(0.397567, -129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRnel(cls, ta=None, **kwargs):
        #M 180.853,235.142 C 191.694,241.151 206.2223,258.57938 206.086,268.628 206.0463,271.55473 202.37085,268.4742 202.82785,267.48212 203.23981,266.5878 204.77216,266.9143 205.93,266.682

        #z0 = P(0, -0)
        #c0 = P(3.81018, -2.11192)
        #c1 = P(8.91629, -8.2373)
        #z1 = P(8.86839, -11.769)
        #c2 = P(8.85443, -12.7976)
        #c3 = P(7.56266, -11.7149)
        #z2 = P(7.72328, -11.3663)
        #c4 = P(7.86807, -11.0519)
        #c5 = P(8.40663, -11.1667)
        z3 = P(8.81356, -11.085)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81018, -2.11192)
        #z1 = z0 + P(8.86839, -11.769)
        #c1 = z1 + P(0.047904, 3.53169)
        #c2 = z1 + P(-0.013953, -1.02863)
        #z2 = z1 + P(-1.14511, 0.402731)
        #c3 = z2 + P(-0.160617, -0.348676)
        #c4 = z2 + P(0.144787, 0.314318)
        #z3 = z2 + P(1.09028, 0.28121)
        #c5 = z3 + P(-0.406934, -0.0816441)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35634, -28)
        z1 = z0 + PP(14.7363, -53)
        c1 = z1 + PP(3.53201, 89)
        c2 = z1 + PP(1.02872, -90)
        #z2 = z1 + PP(1.21386, 160)
        z2 = z3 - PP(1.12596, ta + 362)
        c3 = z2 + PP(0.383892, -114)
        #c4 = z2 + PP(0.346062, 65)
        #z3 = z2 + PP(1.12596, 14)
        #c5 = z3 + PP(0.415044, -168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRs(cls, ta=None, **kwargs):
        #M 47.3414,421.119 C 58.1822,427.128 72.7501,444.557 72.5747,454.605 72.5747,456.31173 71.112876,456.84891 70.249649,456.39083 69.186372,455.82658 69.274826,452.95983 70.465948,452.78616 71.681879,452.60888 71.761738,454.25693 71.728237,456.24967

        #z0 = P(0, -0)
        #c0 = P(3.81011, -2.11192)
        #c1 = P(8.93014, -8.23752)
        #z1 = P(8.86849, -11.769)
        #c2 = P(8.86849, -12.3688)
        #c3 = P(8.35472, -12.5576)
        #z2 = P(8.05133, -12.3966)
        #c4 = P(7.67763, -12.1983)
        #c5 = P(7.70872, -11.1908)
        #z3 = P(8.12735, -11.1297)
        #c6 = P(8.5547, -11.0674)
        #c7 = P(8.58277, -11.6467)
        z4 = P(8.57099, -12.347)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81011, -2.11192)
        #z1 = z0 + P(8.86849, -11.769)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -0.599847)
        #z2 = z1 + P(-0.817162, -0.627648)
        #c3 = z2 + P(0.30339, -0.160997)
        #c4 = z2 + P(-0.373699, 0.198311)
        #z3 = z2 + P(0.0760204, 1.2669)
        #c5 = z3 + P(-0.418632, -0.061038)
        #c6 = z3 + P(0.427351, 0.0623068)
        #z4 = z3 + P(0.443644, -1.21728)
        #c7 = z4 + P(0.0117743, 0.700368)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, -28)
        z1 = z0 + PP(14.7363, -53)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(0.599847, -90)
        z2 = z1 + PP(1.03039, -142)
        c3 = z2 + PP(0.343461, -27)
        c4 = z2 + PP(0.423058, 152)
        #z3 = z2 + PP(1.26918, 86)
        z3 = z4 - PP(1.29561, ta + 22)
        c5 = z3 + PP(0.423058, -171)
        #c6 = z3 + PP(0.431869, 8)
        #z4 = z3 + PP(1.29561, -69)
        #c7 = z4 + PP(0.700467, 89)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRsl(cls, ta=None, **kwargs):
        #M 154.193,421.119 C 165.034,427.128 179.57963,444.55663 179.426,454.605 179.40363,456.06833 178.35675,456.54275 177.503,456.47025 176.64925,456.39775 175.05712,455.78501 176.12739,453.85593 176.75732,452.76143 178.63386,451.68246 178.69028,453.05787 178.76453,454.8682 178.02623,455.71323 177.48395,456.46854

        #z0 = P(0, -0)
        #c0 = P(3.81018, -2.11192)
        #c1 = P(8.92238, -8.23739)
        #z1 = P(8.86839, -11.769)
        #c2 = P(8.86052, -12.2833)
        #c3 = P(8.49259, -12.45)
        #z2 = P(8.19253, -12.4245)
        #c4 = P(7.89247, -12.3991)
        #c5 = P(7.3329, -12.1837)
        #z3 = P(7.70906, -11.5057)
        #c6 = P(7.93045, -11.121)
        #c7 = P(8.58998, -10.7418)
        #z4 = P(8.60981, -11.2252)
        #c8 = P(8.63591, -11.8615)
        #c9 = P(8.37642, -12.1585)
        z5 = P(8.18583, -12.4239)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81018, -2.11192)
        #z1 = z0 + P(8.86839, -11.769)
        #c1 = z1 + P(0.0539948, 3.5316)
        #c2 = z1 + P(-0.00786216, -0.514302)
        #z2 = z1 + P(-0.675857, -0.655561)
        #c3 = z2 + P(0.300059, -0.0254808)
        #c4 = z2 + P(-0.300059, 0.0254808)
        #z3 = z2 + P(-0.483472, 0.918829)
        #c5 = z3 + P(-0.376157, -0.677994)
        #c6 = z3 + P(0.221395, 0.384673)
        #z4 = z3 + P(0.900753, 0.280486)
        #c7 = z4 + P(-0.0198294, 0.483401)
        #c8 = z4 + P(0.0260959, -0.636258)
        #z5 = z4 + P(-0.423977, -1.19871)
        #c9 = z5 + P(0.19059, 0.265461)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35634, -28)
        z1 = z0 + PP(14.7363, -53)
        c1 = z1 + PP(3.53201, 89)
        c2 = z1 + PP(0.514362, -90)
        z2 = z1 + PP(0.941564, -135)
        c3 = z2 + PP(0.301139, -4)
        c4 = z2 + PP(0.301139, 175)
        z3 = z2 + PP(1.03826, 117)
        c5 = z3 + PP(0.775352, -119)
        c6 = z3 + PP(0.443834, 60)
        #z4 = z3 + PP(0.943413, 17)
        z4 = z5 - PP(1.27148, ta + 17)
        c7 = z4 + PP(0.483808, 92)
        #c8 = z4 + PP(0.636793, -87)
        #z5 = z4 + PP(1.27148, -109)
        #c9 = z5 + PP(0.326794, 54)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SERCRsr(cls, ta=None, **kwargs):
        #M 100.767,421.119 C 111.608,427.128 126.15376,444.55664 126.001,454.605 125.97875,456.06833 124.67196,456.50146 123.99373,456.00373 123.31551,455.506 122.28294,453.88799 122.95615,453.11935 123.63597,452.34317 124.9258,452.47293 125.98152,453.77412

        #z0 = P(0, -0)
        #c0 = P(3.81018, -2.11192)
        #c1 = P(8.92243, -8.23739)
        #z1 = P(8.86874, -11.769)
        #c2 = P(8.86092, -12.2833)
        #c3 = P(8.40163, -12.4355)
        #z2 = P(8.16326, -12.2606)
        #c4 = P(7.9249, -12.0857)
        #c5 = P(7.56199, -11.517)
        #z3 = P(7.7986, -11.2468)
        #c6 = P(8.03753, -10.974)
        #c7 = P(8.49085, -11.0196)
        z4 = P(8.86189, -11.477)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81018, -2.11192)
        #z1 = z0 + P(8.86874, -11.769)
        #c1 = z1 + P(0.053689, 3.5316)
        #c2 = z1 + P(-0.00781998, -0.514302)
        #z2 = z1 + P(-0.705475, -0.491597)
        #c3 = z2 + P(0.238371, -0.174932)
        #c4 = z2 + P(-0.238367, 0.174932)
        #z3 = z2 + P(-0.364668, 1.01374)
        #c5 = z3 + P(-0.236606, -0.270146)
        #c6 = z3 + P(0.238929, 0.272796)
        #z4 = z3 + P(1.0633, -0.230125)
        #c7 = z4 + P(-0.371043, 0.457316)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35634, -28)
        z1 = z0 + PP(14.7365, -52)
        c1 = z1 + PP(3.532, 89)
        c2 = z1 + PP(0.514361, -90)
        z2 = z1 + PP(0.859862, -145)
        c3 = z2 + PP(0.295672, -36)
        c4 = z2 + PP(0.295669, 143)
        #z3 = z2 + PP(1.07734, 109)
        z3 = z4 - PP(1.08791, ta + 39)
        c5 = z3 + PP(0.359112, -131)
        #c6 = z3 + PP(0.362636, 48)
        #z4 = z3 + PP(1.08791, -12)
        #c7 = z4 + PP(0.588907, 129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRse(cls, ta=None, **kwargs):
        #M 47.3414,315.936 C 58.1822,321.945 72.7501,339.374 72.5747,349.422 72.5747,351.18132 71.206944,350.92166 70.399243,350.02693 69.863164,349.4331 69.064799,348.02534 69.766566,347.53144 70.689347,346.88198 71.874459,348.54351 72.5747,349.422

        #z0 = P(0, -0)
        #c0 = P(3.81011, -2.11192)
        #c1 = P(8.93014, -8.23752)
        #z1 = P(8.86849, -11.769)
        #c2 = P(8.86849, -12.3873)
        #c3 = P(8.38778, -12.2961)
        #z2 = P(8.10391, -11.9816)
        #c4 = P(7.9155, -11.7729)
        #c5 = P(7.6349, -11.2781)
        #z3 = P(7.88155, -11.1045)
        #c6 = P(8.20587, -10.8763)
        #c7 = P(8.62239, -11.4602)
        z4 = P(8.86849, -11.769)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81011, -2.11192)
        #z1 = z0 + P(8.86849, -11.769)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -0.61833)
        #z2 = z1 + P(-0.764586, -0.212609)
        #c3 = z2 + P(0.283874, -0.314462)
        #c4 = z2 + P(-0.18841, 0.208707)
        #z3 = z2 + P(-0.222361, 0.877065)
        #c5 = z3 + P(-0.246643, -0.173586)
        #c6 = z3 + P(0.32432, 0.228259)
        #z4 = z3 + P(0.986946, -0.664456)
        #c7 = z4 + P(-0.246107, 0.308754)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, -28)
        z1 = z0 + PP(14.7363, -53)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(0.61833, -90)
        z2 = z1 + PP(0.793596, -164)
        c3 = z2 + PP(0.42364, -47)
        c4 = z2 + PP(0.281171, 132)
        #z3 = z2 + PP(0.904813, 104)
        z3 = z4 - PP(1.18978, ta + 19)
        c5 = z3 + PP(0.301604, -144)
        #c6 = z3 + PP(0.396593, 35)
        #z4 = z3 + PP(1.18978, -33)
        #c7 = z4 + PP(0.394839, 128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRser(cls, ta=None, **kwargs):
        #M 106.437,315.936 C 117.277,321.945 131.67,339.37248 131.67,349.422 131.67,351.74758 128.48418,348.74049 128.76099,347.63702 128.98457,346.74571 130.5808,346.83286 131.513,347.475

        #z0 = P(0, -0)
        #c0 = P(3.80983, -2.11192)
        #c1 = P(8.86839, -8.23698)
        #z1 = P(8.86839, -11.769)
        #c2 = P(8.86839, -12.5863)
        #c3 = P(7.7487, -11.5295)
        #z2 = P(7.84599, -11.1416)
        #c4 = P(7.92457, -10.8284)
        #c5 = P(8.48558, -10.859)
        z3 = P(8.81321, -11.0847)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.80983, -2.11192)
        #z1 = z0 + P(8.86839, -11.769)
        #c1 = z1 + P(0, 3.532)
        #c2 = z1 + P(0, -0.817348)
        #z2 = z1 + P(-1.0224, 0.627349)
        #c3 = z2 + P(-0.0972876, -0.387825)
        #c4 = z2 + P(0.0785794, 0.31326)
        #z3 = z2 + P(0.967221, 0.0569435)
        #c5 = z3 + P(-0.327631, 0.225686)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35603, -29)
        z1 = z0 + PP(14.7363, -53)
        c1 = z1 + PP(3.532, 90)
        c2 = z1 + PP(0.817348, -90)
        #z2 = z1 + PP(1.19953, 148)
        z2 = z3 - PP(0.968896, ta + 38)
        c3 = z2 + PP(0.399842, -104)
        #c4 = z2 + PP(0.322965, 75)
        #z3 = z2 + PP(0.968896, 3)
        #c5 = z3 + PP(0.39784, 145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRsel(cls, ta=None, **kwargs):
        #M 171.201,315.936 C 182.042,321.945 196.61,339.374 196.434,349.422 196.434,350.95644 194.33637,352.02987 193.43985,351.2729 192.46353,350.44855 193.60412,347.66042 194.8805,347.72054 195.95258,347.77103 195.80476,349.58168 195.80476,350.80483

        #z0 = P(0, -0)
        #c0 = P(3.81018, -2.11192)
        #c1 = P(8.93024, -8.23752)
        #z1 = P(8.86839, -11.769)
        #c2 = P(8.86839, -12.3083)
        #c3 = P(8.13115, -12.6855)
        #z2 = P(7.81606, -12.4195)
        #c4 = P(7.47293, -12.1298)
        #c5 = P(7.8738, -11.1499)
        #z3 = P(8.32239, -11.171)
        #c6 = P(8.69919, -11.1887)
        #c7 = P(8.64723, -11.8251)
        z4 = P(8.64723, -12.255)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81018, -2.11192)
        #z1 = z0 + P(8.86839, -11.769)
        #c1 = z1 + P(0.0618569, 3.53147)
        #c2 = z1 + P(0, -0.539294)
        #z2 = z1 + P(-1.05232, -0.650517)
        #c3 = z2 + P(0.315091, -0.266045)
        #c4 = z2 + P(-0.343137, 0.289726)
        #z3 = z2 + P(0.506331, 1.24851)
        #c5 = z3 + P(-0.448596, 0.0211298)
        #c6 = z3 + P(0.376793, -0.0177452)
        #z4 = z3 + P(0.32484, -1.084)
        #c7 = z4 + P(0, 0.429888)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35634, -28)
        z1 = z0 + PP(14.7363, -53)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(0.539294, -90)
        z2 = z1 + PP(1.23716, -148)
        c3 = z2 + PP(0.412386, -40)
        c4 = z2 + PP(0.449093, 139)
        #z3 = z2 + PP(1.34728, 67)
        z3 = z4 - PP(1.13163, ta + 17)
        c5 = z3 + PP(0.449094, 177)
        #c6 = z3 + PP(0.377211, -2)
        #z4 = z3 + PP(1.13163, -73)
        #c7 = z4 + PP(0.429888, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRsw(cls, ta=None, **kwargs):
        #M 376.393,308.822 C 387.296,314.619 402.284,331.728 402.11,341.738 402.11,344.655 399.56626,343.73605 399.58726,342.55805 399.63126,341.29205 400.69894,339.11777 401.39294,338.22877

        #z0 = P(0, -0)
        #c0 = P(3.84634, -2.04505)
        #c1 = P(9.13377, -8.08073)
        #z1 = P(9.07239, -11.612)
        #c2 = P(9.07239, -12.6411)
        #c3 = P(8.17501, -12.3169)
        #z2 = P(8.18242, -11.9013)
        #c4 = P(8.19794, -11.4547)
        #c5 = P(8.5746, -10.6877)
        z3 = P(8.81942, -10.3741)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.84634, -2.04505)
        #z1 = z0 + P(9.07239, -11.612)
        #c1 = z1 + P(0.0613833, 3.53131)
        #c2 = z1 + P(0, -1.02905)
        #z2 = z1 + P(-0.889967, -0.289295)
        #c3 = z2 + P(-0.00740833, -0.415572)
        #c4 = z2 + P(0.0155222, 0.446617)
        #z3 = z2 + P(0.637004, 1.52727)
        #c5 = z3 + P(-0.244828, -0.313619)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35621, -27)
        z1 = z0 + PP(14.7359, -51)
        c1 = z1 + PP(3.53184, 89)
        c2 = z1 + PP(1.02905, -90)
        z2 = z1 + PP(0.935806, -161)
        #z2 = z3 - PP(1.65479, ta + 374)
        c3 = z2 + PP(0.415638, -91)
        c4 = z2 + PP(0.446886, 88)
        z3 = z2 + PP(1.65479, 67)
        #c5 = z3 + PP(0.397867, -127)
        c5 = z3 + PP(0.397867, ta)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SERCRswr(cls, ta=None, **kwargs):
        #M 132.481,532.029 C 143.322,538.038 157.89,555.466 157.714,565.514 157.714,566.978 156.2571,567.55948 155.32683,567.24323 154.29481,566.89239 153.50117,564.73004 154.39648,564.1083 155.46988,563.36288 156.76104,564.34282 157.52866,566.4663

        #z0 = P(0, -0)
        #c0 = P(3.81018, -2.11192)
        #c1 = P(8.93024, -8.23717)
        #z1 = P(8.86839, -11.7686)
        #c2 = P(8.86839, -12.2832)
        #c3 = P(8.35635, -12.4875)
        #z2 = P(8.02939, -12.3764)
        #c4 = P(7.66668, -12.2531)
        #c5 = P(7.38775, -11.4931)
        #z3 = P(7.70241, -11.2746)
        #c6 = P(8.07967, -11.0126)
        #c7 = P(8.53346, -11.357)
        z4 = P(8.80325, -12.1033)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.81018, -2.11192)
        #z1 = z0 + P(8.86839, -11.7686)
        #c1 = z1 + P(0.0618569, 3.53147)
        #c2 = z1 + P(0, -0.514537)
        #z2 = z1 + P(-0.838994, -0.607755)
        #c3 = z2 + P(0.326953, -0.111149)
        #c4 = z2 + P(-0.362714, 0.123306)
        #z3 = z2 + P(-0.326981, 1.1018)
        #c5 = z3 + P(-0.314666, -0.218517)
        #c6 = z3 + P(0.377257, 0.261985)
        #z4 = z3 + P(1.10084, -0.828742)
        #c7 = z4 + P(-0.269788, 0.746318)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35634, -28)
        z1 = z0 + PP(14.736, -52)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(0.514537, -90)
        z2 = z1 + PP(1.03599, -144)
        c3 = z2 + PP(0.345329, -18)
        c4 = z2 + PP(0.3831, 161)
        #z3 = z2 + PP(1.1493, 106)
        z3 = z4 - PP(1.37792, ta + 35)
        c5 = z3 + PP(0.383098, -145)
        #c6 = z3 + PP(0.459303, 34)
        #z4 = z3 + PP(1.37792, -36)
        #c7 = z4 + PP(0.793584, 109)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRswl(cls, ta=None, **kwargs):
        #M 93.6317,532.029 C 104.472,538.038 119.04,555.466 118.865,565.514 118.865,568.442 114.588,567.411 116.312,565.965 117.192,565.252 117.996,564.448 118.708,563.568

        #z0 = P(0, -0)
        #c0 = P(3.80993, -2.11192)
        #c1 = P(8.93, -8.23717)
        #z1 = P(8.86849, -11.7686)
        #c2 = P(8.86849, -12.7977)
        #c3 = P(7.3653, -12.4354)
        #z2 = P(7.97122, -11.9271)
        #c4 = P(8.2805, -11.6766)
        #c5 = P(8.56307, -11.394)
        z3 = P(8.81331, -11.0847)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.80993, -2.11192)
        #z1 = z0 + P(8.86849, -11.7686)
        #c1 = z1 + P(0.0615055, 3.53147)
        #c2 = z1 + P(0, -1.02907)
        #z2 = z1 + P(-0.897277, -0.158508)
        #c3 = z2 + P(-0.605917, -0.508211)
        #c4 = z2 + P(0.309285, 0.250591)
        #z3 = z2 + P(0.842098, 0.842449)
        #c5 = z3 + P(-0.250239, -0.309285)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35612, -29)
        z1 = z0 + PP(14.736, -52)
        c1 = z1 + PP(3.532, 89)
        c2 = z1 + PP(1.02907, -90)
        z2 = z1 + PP(0.91117, -169)
        #z2 = z3 - PP(1.19115, ta + 353)
        c3 = z2 + PP(0.790831, -140)
        #c4 = z2 + PP(0.398061, 39)
        #z3 = z2 + PP(1.19115, 45)
        #c5 = z3 + PP(0.39784, -128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3)])

    @classmethod
    def path_nerSERCR(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 59.736247,58.6772 70.238676,86.268409 70.063276,96.316409 70.063276,99.243709 65.785976,98.213409 67.510276,96.766509 68.389876,96.054309 69.194376,95.249809 69.906576,94.370209

        #z0 = P(0, -0)
        #c0 = P(4.35629, -0)
        #c1 = P(8.04747, -9.6972)
        #z1 = P(7.98583, -13.2287)
        #c2 = P(7.98583, -14.2575)
        #c3 = P(6.48253, -13.8954)
        #z2 = P(7.08855, -13.3869)
        #c4 = P(7.39769, -13.1366)
        #c5 = P(7.68044, -12.8538)
        z3 = P(7.93075, -12.5447)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35629, 0)
        #z1 = z0 + P(7.98583, -13.2287)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -1.02883)
        #z2 = z1 + P(-0.897277, -0.158192)
        #c3 = z2 + P(-0.606022, -0.508527)
        #c4 = z2 + P(0.309144, 0.25031)
        #z3 = z2 + P(0.842203, 0.842203)
        #c5 = z3 + P(-0.25031, -0.309144)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35629, 0)
        z1 = z0 + PP(15.4522, -58)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(1.02883, -90)
        z2 = z1 + PP(0.911115, -170)
        #z2 = z3 - PP(1.19106, ta + 353)
        c3 = z2 + PP(0.791115, -139)
        c4 = z2 + PP(0.397775, 38)
        #z3 = z2 + PP(1.19106, 45)
        c5 = z3 + PP(0.397775, -128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_nerSERCRe(cls, ta=None, **kwargs):
        #M 47.3414,146.91 C 59.736198,146.91 70.171622,174.93991 69.996222,184.98791 69.996222,187.91591 66.727702,185.20131 66.704761,184.06178 66.682643,182.96318 68.707432,183.04191 69.839522,183.04191

        #z0 = P(0, -0)
        #c0 = P(4.35627, -0)
        #c1 = P(8.02391, -9.85139)
        #z1 = P(7.96226, -13.3829)
        #c2 = P(7.96226, -14.4119)
        #c3 = P(6.81351, -13.4579)
        #z2 = P(6.80544, -13.0574)
        #c4 = P(6.79767, -12.6712)
        #c5 = P(7.5093, -12.6989)
        z3 = P(7.90719, -12.6989)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35627, 0)
        #z1 = z0 + P(7.96226, -13.3829)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -1.02907)
        #z2 = z1 + P(-1.15682, 0.325498)
        #c3 = z2 + P(0.00806284, -0.400499)
        #c4 = z2 + P(-0.00777359, 0.386114)
        #z3 = z2 + P(1.10174, 0.358443)
        #c5 = z3 + P(-0.397884, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, 0)
        z1 = z0 + PP(15.5724, -59)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(1.02907, -90)
        #z2 = z1 + PP(1.20174, 164)
        z2 = z3 - PP(1.15858, ta + 18)
        c3 = z2 + PP(0.40058, -88)
        #c4 = z2 + PP(0.386192, 91)
        #z3 = z2 + PP(1.15858, 18)
        #c5 = z3 + PP(0.397884, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRer(cls, ta=None, **kwargs):
        #M 188.209,146.91 C 200.60397,146.91 211.08039,174.37525 210.9441,184.42387 210.90439,187.3516 208.63521,186.04823 208.13707,185.21358 207.46979,184.09554 209.7945,182.80907 210.85306,182.4063

        #z0 = P(0, -0)
        #c0 = P(4.35633, -0)
        #c1 = P(8.03838, -9.65293)
        #z1 = P(7.99048, -13.1846)
        #c2 = P(7.97652, -14.2136)
        #c3 = P(7.17899, -13.7555)
        #z2 = P(7.00392, -13.4622)
        #c4 = P(6.76939, -13.0692)
        #c5 = P(7.58644, -12.6171)
        z3 = P(7.95848, -12.4755)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35633, 0)
        #z1 = z0 + P(7.99048, -13.1846)
        #c1 = z1 + P(0.0479005, 3.53169)
        #c2 = z1 + P(-0.0139565, -1.02898)
        #z2 = z1 + P(-0.986558, -0.277551)
        #c3 = z2 + P(0.175076, -0.293346)
        #c4 = z2 + P(-0.234522, 0.392946)
        #z3 = z2 + P(0.954562, 0.986646)
        #c5 = z3 + P(-0.372041, -0.141557)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35633, 0)
        z1 = z0 + PP(15.4169, -58)
        c1 = z1 + PP(3.53201, 89)
        c2 = z1 + PP(1.02907, -90)
        #z2 = z1 + PP(1.02486, -164)
        z2 = z3 - PP(1.37283, ta + 384)
        c3 = z2 + PP(0.341619, -59)
        #c4 = z2 + PP(0.45761, 120)
        #z3 = z2 + PP(1.37283, 45)
        #c5 = z3 + PP(0.398062, -159)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRel(cls, ta=None, **kwargs):
        #M 123.444,146.91 C 135.83897,146.91 146.30654,175.2464 146.17102,185.29501 146.13154,188.22274 142.55705,183.91654 143.13819,182.72589 143.57851,181.82375 145.10619,182.77395 146.0865,183.33993

        #z0 = P(0, -0)
        #c0 = P(4.35633, -0)
        #c1 = P(8.03527, -9.95911)
        #z1 = P(7.98764, -13.4908)
        #c2 = P(7.97376, -14.5198)
        #c3 = P(6.71747, -13.0063)
        #z2 = P(6.92172, -12.5878)
        #c4 = P(7.07647, -12.2708)
        #c5 = P(7.61339, -12.6047)
        z3 = P(7.95793, -12.8037)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35633, 0)
        #z1 = z0 + P(7.98764, -13.4908)
        #c1 = z1 + P(0.0476298, 3.53168)
        #c2 = z1 + P(-0.0138756, -1.02898)
        #z2 = z1 + P(-1.06592, 0.902943)
        #c3 = z2 + P(-0.204247, -0.418466)
        #c4 = z2 + P(0.154755, 0.317066)
        #z3 = z2 + P(1.03621, -0.21581)
        #c5 = z3 + P(-0.34454, 0.198919)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35633, 0)
        z1 = z0 + PP(15.6781, -59)
        c1 = z1 + PP(3.532, 89)
        c2 = z1 + PP(1.02907, -90)
        #z2 = z1 + PP(1.39696, 139)
        z2 = z3 - PP(1.05845, ta + 19)
        c3 = z2 + PP(0.465651, -116)
        #c4 = z2 + PP(0.352817, 63)
        #z3 = z2 + PP(1.05845, -11)
        #c5 = z3 + PP(0.39784, 150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRne(cls, ta=None, **kwargs):
        #M 47.3414,235.142 C 59.736198,235.142 70.045489,262.73351 69.870089,272.78151 69.870089,275.70851 66.856216,273.93612 67.224306,273.23151 67.639395,272.43693 68.86845,271.52552 69.79524,270.87673

        #z0 = P(0, -0)
        #c0 = P(4.35627, -0)
        #c1 = P(7.97958, -9.69731)
        #z1 = P(7.91793, -13.2288)
        #c2 = P(7.91793, -14.2575)
        #c3 = P(6.85867, -13.6346)
        #z2 = P(6.98804, -13.3869)
        #c4 = P(7.13393, -13.1077)
        #c5 = P(7.56589, -12.7873)
        z3 = P(7.89162, -12.5593)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35627, 0)
        #z1 = z0 + P(7.91793, -13.2288)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -1.02872)
        #z2 = z1 + P(-0.929887, -0.158157)
        #c3 = z2 + P(-0.129369, -0.247642)
        #c4 = z2 + P(0.145887, 0.279263)
        #z3 = z2 + P(0.90358, 0.827611)
        #c5 = z3 + P(-0.325729, -0.228024)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, 0)
        z1 = z0 + PP(15.4173, -59)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(1.02872, -90)
        #z2 = z1 + PP(0.943241, -170)
        z2 = z3 - PP(1.22531, ta + 367)
        c3 = z2 + PP(0.279397, -117)
        #c4 = z2 + PP(0.315073, 62)
        #z3 = z2 + PP(1.22531, 42)
        #c5 = z3 + PP(0.397611, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRner(cls, ta=None, **kwargs):
        #M 110.055,235.142 C 122.44997,235.142 132.74627,262.59679 132.61074,272.6454 132.57127,275.57213 131.40197,274.05315 131.13403,273.28097 130.82025,272.3767 131.48849,269.09632 132.20049,268.21732

        #z0 = P(0, -0)
        #c0 = P(4.35633, -0)
        #c1 = P(7.97507, -9.64926)
        #z1 = P(7.92744, -13.1809)
        #c2 = P(7.91357, -14.2096)
        #c3 = P(7.5026, -13.6757)
        #z2 = P(7.40843, -13.4043)
        #c4 = P(7.29815, -13.0865)
        #c5 = P(7.53301, -11.9336)
        z3 = P(7.78325, -11.6246)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35633, 0)
        #z1 = z0 + P(7.92744, -13.1809)
        #c1 = z1 + P(0.0476334, 3.53168)
        #c2 = z1 + P(-0.0138721, -1.02863)
        #z2 = z1 + P(-0.519004, -0.223377)
        #c3 = z2 + P(0.0941702, -0.27139)
        #c4 = z2 + P(-0.110281, 0.317815)
        #z3 = z2 + P(0.374818, 1.77967)
        #c5 = z3 + P(-0.250239, -0.308933)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35633, 0)
        z1 = z0 + PP(15.3812, -58)
        c1 = z1 + PP(3.532, 89)
        c2 = z1 + PP(1.02872, -90)
        z2 = z1 + PP(0.565034, -156)
        #z2 = z3 - PP(1.81871, ta + 387)
        c3 = z2 + PP(0.287264, -70)
        #c4 = z2 + PP(0.336405, 109)
        #z3 = z2 + PP(1.81871, 78)
        #c5 = z3 + PP(0.397567, -129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRnel(cls, ta=None, **kwargs):
        #M 180.853,235.142 C 193.24797,235.142 203.52859,263.01097 203.39229,273.05959 203.35259,275.98632 199.67714,272.90579 200.13414,271.91371 200.5461,271.01939 202.15037,271.32397 203.30821,271.09167

        #z0 = P(0, -0)
        #c0 = P(4.35633, -0)
        #c1 = P(7.96956, -9.79482)
        #z1 = P(7.92166, -13.3265)
        #c2 = P(7.9077, -14.3551)
        #c3 = P(6.61593, -13.2725)
        #z2 = P(6.77655, -12.9238)
        #c4 = P(6.92133, -12.6095)
        #c5 = P(7.48517, -12.7165)
        z3 = P(7.89211, -12.6349)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35633, 0)
        #z1 = z0 + P(7.92166, -13.3265)
        #c1 = z1 + P(0.047904, 3.53169)
        #c2 = z1 + P(-0.013953, -1.02863)
        #z2 = z1 + P(-1.14511, 0.402731)
        #c3 = z2 + P(-0.160617, -0.348676)
        #c4 = z2 + P(0.144787, 0.314318)
        #z3 = z2 + P(1.11556, 0.288914)
        #c5 = z3 + P(-0.406934, -0.0816441)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35633, 0)
        z1 = z0 + PP(15.5032, -59)
        c1 = z1 + PP(3.53201, 89)
        c2 = z1 + PP(1.02872, -90)
        #z2 = z1 + PP(1.21386, 160)
        z2 = z3 - PP(1.15236, ta + 362)
        c3 = z2 + PP(0.383892, -114)
        #c4 = z2 + PP(0.346062, 65)
        #z3 = z2 + PP(1.15236, 14)
        #c5 = z3 + PP(0.415044, -168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRs(cls, ta=None, **kwargs):
        #M 47.3414,421.119 C 59.736198,421.119 70.138304,448.38142 69.962904,458.42942 69.962904,460.13615 68.501081,460.67333 67.637853,460.21525 66.574573,459.651 66.667542,456.8128 67.854152,456.61058 69.069438,456.40346 69.319493,458.02785 69.285992,460.02059

        #z0 = P(0, -0)
        #c0 = P(4.35627, -0)
        #c1 = P(8.0122, -9.58165)
        #z1 = P(7.95055, -13.1131)
        #c2 = P(7.95055, -13.713)
        #c3 = P(7.43678, -13.9018)
        #z2 = P(7.13339, -13.7408)
        #c4 = P(6.75969, -13.5425)
        #c5 = P(6.79236, -12.5449)
        #z3 = P(7.20941, -12.4739)
        #c6 = P(7.63653, -12.4011)
        #c7 = P(7.72442, -12.972)
        z4 = P(7.71264, -13.6723)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35627, 0)
        #z1 = z0 + P(7.95055, -13.1131)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -0.599847)
        #z2 = z1 + P(-0.817162, -0.627648)
        #c3 = z2 + P(0.30339, -0.160997)
        #c4 = z2 + P(-0.3737, 0.198311)
        #z3 = z2 + P(0.0760204, 1.2669)
        #c5 = z3 + P(-0.417046, -0.0710722)
        #c6 = z3 + P(0.427124, 0.0727944)
        #z4 = z3 + P(0.503234, -1.19848)
        #c7 = z4 + P(0.0117743, 0.700368)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, 0)
        z1 = z0 + PP(15.3351, -58)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(0.599847, -90)
        z2 = z1 + PP(1.03039, -142)
        c3 = z2 + PP(0.343461, -27)
        c4 = z2 + PP(0.423059, 152)
        #z3 = z2 + PP(1.26918, 86)
        z3 = z4 - PP(1.29985, ta + 24)
        c5 = z3 + PP(0.423058, -170)
        #c6 = z3 + PP(0.433283, 9)
        #z4 = z3 + PP(1.29985, -67)
        #c7 = z4 + PP(0.700467, 89)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRsl(cls, ta=None, **kwargs):
        #M 154.193,421.119 C 166.58797,421.119 176.98041,448.43989 176.82678,458.48826 176.80441,459.95159 175.75753,460.42601 174.90378,460.35351 174.05003,460.28101 172.4579,459.66827 173.52817,457.73919 174.1581,456.64469 176.03464,455.56572 176.09106,456.94113 176.16531,458.75146 175.42701,459.59649 174.88473,460.3518

        #z0 = P(0, -0)
        #c0 = P(4.35633, -0)
        #c1 = P(8.00886, -9.6022)
        #z1 = P(7.95487, -13.1338)
        #c2 = P(7.947, -13.6481)
        #c3 = P(7.57907, -13.8148)
        #z2 = P(7.27901, -13.7894)
        #c4 = P(6.97895, -13.7639)
        #c5 = P(6.41938, -13.5485)
        #z3 = P(6.79554, -12.8705)
        #c6 = P(7.01693, -12.4859)
        #c7 = P(7.67646, -12.1066)
        #z4 = P(7.69629, -12.59)
        #c8 = P(7.72239, -13.2263)
        #c9 = P(7.4629, -13.5233)
        z5 = P(7.27231, -13.7888)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35633, 0)
        #z1 = z0 + P(7.95487, -13.1338)
        #c1 = z1 + P(0.0539948, 3.5316)
        #c2 = z1 + P(-0.00786216, -0.514302)
        #z2 = z1 + P(-0.675857, -0.655561)
        #c3 = z2 + P(0.300059, -0.0254808)
        #c4 = z2 + P(-0.300059, 0.0254808)
        #z3 = z2 + P(-0.483472, 0.918829)
        #c5 = z3 + P(-0.376157, -0.677994)
        #c6 = z3 + P(0.221395, 0.384673)
        #z4 = z3 + P(0.900753, 0.280486)
        #c7 = z4 + P(-0.0198294, 0.483401)
        #c8 = z4 + P(0.0260959, -0.636258)
        #z5 = z4 + P(-0.423977, -1.19871)
        #c9 = z5 + P(0.19059, 0.265461)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35633, 0)
        z1 = z0 + PP(15.355, -58)
        c1 = z1 + PP(3.53201, 89)
        c2 = z1 + PP(0.514362, -90)
        z2 = z1 + PP(0.941564, -135)
        c3 = z2 + PP(0.301139, -4)
        c4 = z2 + PP(0.301139, 175)
        z3 = z2 + PP(1.03826, 117)
        c5 = z3 + PP(0.775352, -119)
        c6 = z3 + PP(0.443834, 60)
        #z4 = z3 + PP(0.943413, 17)
        z4 = z5 - PP(1.27148, ta + 17)
        c7 = z4 + PP(0.483808, 92)
        #c8 = z4 + PP(0.636793, -87)
        #z5 = z4 + PP(1.27148, -109)
        #c9 = z5 + PP(0.326794, 54)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_nerSERCRsr(cls, ta=None, **kwargs):
        #M 100.767,421.119 C 113.16197,421.119 123.58592,448.71831 123.43316,458.76667 123.41091,460.23 122.10412,460.66313 121.42589,460.1654 120.74767,459.66767 119.72615,458.0592 120.38831,457.28102 121.0545,456.49811 122.36416,456.5458 123.41988,457.84699

        #z0 = P(0, -0)
        #c0 = P(4.35633, -0)
        #c1 = P(8.01993, -9.70005)
        #z1 = P(7.96625, -13.2316)
        #c2 = P(7.95843, -13.7459)
        #c3 = P(7.49914, -13.8982)
        #z2 = P(7.26077, -13.7232)
        #c4 = P(7.0224, -13.5483)
        #c5 = P(6.66338, -12.983)
        #z3 = P(6.8961, -12.7095)
        #c6 = P(7.13024, -12.4343)
        #c7 = P(7.59054, -12.4511)
        z4 = P(7.96158, -12.9084)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35633, 0)
        #z1 = z0 + P(7.96625, -13.2316)
        #c1 = z1 + P(0.053689, 3.5316)
        #c2 = z1 + P(-0.00781998, -0.514302)
        #z2 = z1 + P(-0.705475, -0.491597)
        #c3 = z2 + P(0.238371, -0.174932)
        #c4 = z2 + P(-0.238367, 0.174932)
        #z3 = z2 + P(-0.364668, 1.01374)
        #c5 = z3 + P(-0.232723, -0.273499)
        #c6 = z3 + P(0.234139, 0.275161)
        #z4 = z3 + P(1.06548, -0.198916)
        #c7 = z4 + P(-0.371043, 0.457316)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35633, 0)
        z1 = z0 + PP(15.4447, -58)
        c1 = z1 + PP(3.532, 89)
        c2 = z1 + PP(0.514361, -90)
        z2 = z1 + PP(0.859862, -145)
        c3 = z2 + PP(0.295672, -36)
        c4 = z2 + PP(0.295669, 143)
        #z3 = z2 + PP(1.07734, 109)
        z3 = z4 - PP(1.08388, ta + 41)
        c5 = z3 + PP(0.359112, -130)
        #c6 = z3 + PP(0.361296, 49)
        #z4 = z3 + PP(1.08388, -10)
        #c7 = z4 + PP(0.588907, 129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRse(cls, ta=None, **kwargs):
        #M 47.3414,315.936 C 59.736198,315.936 70.056388,343.80559 69.880988,353.85359 69.880988,355.61291 68.513232,355.35325 67.705531,354.45852 67.169452,353.86469 66.37109,352.45694 67.072854,351.96303 67.995633,351.31357 69.180747,352.9751 69.880988,353.85359

        #z0 = P(0, -0)
        #c0 = P(4.35627, -0)
        #c1 = P(7.98341, -9.79504)
        #z1 = P(7.92176, -13.3265)
        #c2 = P(7.92176, -13.9448)
        #c3 = P(7.44105, -13.8536)
        #z2 = P(7.15717, -13.5391)
        #c4 = P(6.96876, -13.3304)
        #c5 = P(6.68817, -12.8356)
        #z3 = P(6.93481, -12.6621)
        #c6 = P(7.25913, -12.4338)
        #c7 = P(7.67565, -13.0178)
        z4 = P(7.92176, -13.3265)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35627, 0)
        #z1 = z0 + P(7.92176, -13.3265)
        #c1 = z1 + P(0.0616461, 3.53147)
        #c2 = z1 + P(0, -0.61833)
        #z2 = z1 + P(-0.764586, -0.212609)
        #c3 = z2 + P(0.283874, -0.314462)
        #c4 = z2 + P(-0.18841, 0.208707)
        #z3 = z2 + P(-0.222361, 0.877065)
        #c5 = z3 + P(-0.246642, -0.17359)
        #c6 = z3 + P(0.32432, 0.228259)
        #z4 = z3 + P(0.986946, -0.664456)
        #c7 = z4 + P(-0.246107, 0.308754)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, 0)
        z1 = z0 + PP(15.5032, -59)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(0.61833, -90)
        z2 = z1 + PP(0.793596, -164)
        c3 = z2 + PP(0.42364, -47)
        c4 = z2 + PP(0.281171, 132)
        #z3 = z2 + PP(0.904813, 104)
        z3 = z4 - PP(1.18978, ta + 19)
        c5 = z3 + PP(0.301605, -144)
        #c6 = z3 + PP(0.396592, 35)
        #z4 = z3 + PP(1.18978, -33)
        #c7 = z4 + PP(0.394839, 128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRser(cls, ta=None, **kwargs):
        #M 106.437,315.936 C 118.8311,315.936 129.01616,344.18812 129.01616,354.23764 129.01616,356.56322 125.84797,353.56041 126.10715,352.45266 126.32038,351.54131 127.97132,351.55622 128.90352,352.19836

        #z0 = P(0, -0)
        #c0 = P(4.35603, -0)
        #c1 = P(7.93567, -9.92949)
        #z1 = P(7.93567, -13.4615)
        #c2 = P(7.93567, -14.2788)
        #c3 = P(6.82218, -13.2235)
        #z2 = P(6.91327, -12.8341)
        #c4 = P(6.98821, -12.5138)
        #c5 = P(7.56845, -12.5191)
        z3 = P(7.89608, -12.7448)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35603, 0)
        #z1 = z0 + P(7.93567, -13.4615)
        #c1 = z1 + P(0, 3.532)
        #c2 = z1 + P(0, -0.817348)
        #z2 = z1 + P(-1.0224, 0.627349)
        #c3 = z2 + P(-0.0910914, -0.38933)
        #c4 = z2 + P(0.0749418, 0.320303)
        #z3 = z2 + P(0.982812, 0.0893762)
        #c5 = z3 + P(-0.327631, 0.225686)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35603, 0)
        z1 = z0 + PP(15.6265, -59)
        c1 = z1 + PP(3.532, 90)
        c2 = z1 + PP(0.817348, -90)
        #z2 = z1 + PP(1.19953, 148)
        z2 = z3 - PP(0.986867, ta + 40)
        c3 = z2 + PP(0.399844, -103)
        #c4 = z2 + PP(0.328953, 76)
        #z3 = z2 + PP(0.986867, 5)
        #c5 = z3 + PP(0.39784, 145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRsel(cls, ta=None, **kwargs):
        #M 171.201,315.936 C 183.59597,315.936 193.98389,343.01174 193.80789,353.05974 193.80789,354.59418 191.71026,355.66761 190.81374,354.91064 189.83742,354.08629 190.97732,351.31531 192.25439,351.35828 193.31176,351.39385 193.24681,353.14987 193.24681,354.37302

        #z0 = P(0, -0)
        #c0 = P(4.35633, -0)
        #c1 = P(8.00727, -9.51604)
        #z1 = P(7.94541, -13.0475)
        #c2 = P(7.94541, -13.5868)
        #c3 = P(7.20818, -13.9641)
        #z2 = P(6.89309, -13.698)
        #c4 = P(6.54995, -13.4083)
        #c5 = P(6.95058, -12.4344)
        #z3 = P(7.39942, -12.4495)
        #c6 = P(7.77104, -12.462)
        #c7 = P(7.74822, -13.0792)
        z4 = P(7.74822, -13.5091)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35633, 0)
        #z1 = z0 + P(7.94541, -13.0475)
        #c1 = z1 + P(0.0618569, 3.53147)
        #c2 = z1 + P(0, -0.539294)
        #z2 = z1 + P(-1.05232, -0.650517)
        #c3 = z2 + P(0.315091, -0.266045)
        #c4 = z2 + P(-0.343137, 0.289726)
        #z3 = z2 + P(0.506331, 1.24851)
        #c5 = z3 + P(-0.448839, 0.0151022)
        #c6 = z3 + P(0.371623, -0.0125014)
        #z4 = z3 + P(0.348796, -1.05956)
        #c7 = z4 + P(0, 0.429888)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35633, 0)
        z1 = z0 + PP(15.2764, -58)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(0.539294, -90)
        z2 = z1 + PP(1.23716, -148)
        c3 = z2 + PP(0.412386, -40)
        c4 = z2 + PP(0.449093, 139)
        #z3 = z2 + PP(1.34728, 67)
        z3 = z4 - PP(1.11549, ta + 19)
        c5 = z3 + PP(0.449093, 178)
        #c6 = z3 + PP(0.371833, -1)
        #z4 = z3 + PP(1.11549, -71)
        #c7 = z4 + PP(0.429888, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRsw(cls, ta=None, **kwargs):
        #M 47.3414,532.029 C 59.736198,532.029 70.073983,559.2461 69.938153,569.29471 69.898578,572.22244 67.855777,571.39225 67.876632,570.20988 67.899066,568.93795 69.089658,567.69979 69.801858,566.81979

        #z0 = P(0, -0)
        #c0 = P(4.35627, -0)
        #c1 = P(7.98959, -9.56572)
        #z1 = P(7.94185, -13.0974)
        #c2 = P(7.92794, -14.1264)
        #c3 = P(7.20998, -13.8346)
        #z2 = P(7.21731, -13.419)
        #c4 = P(7.22519, -12.972)
        #c5 = P(7.64364, -12.5369)
        z3 = P(7.89395, -12.2276)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35627, 0)
        #z1 = z0 + P(7.94185, -13.0974)
        #c1 = z1 + P(0.0477388, 3.53168)
        #c2 = z1 + P(-0.013909, -1.02898)
        #z2 = z1 + P(-0.724542, -0.321646)
        #c3 = z2 + P(-0.0073297, -0.415556)
        #c4 = z2 + P(0.00788465, 0.447032)
        #z3 = z2 + P(0.67664, 1.19148)
        #c5 = z3 + P(-0.25031, -0.309285)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35627, 0)
        z1 = z0 + PP(15.3171, -58)
        c1 = z1 + PP(3.53201, 89)
        c2 = z1 + PP(1.02907, -90)
        z2 = z1 + PP(0.792727, -156)
        #z2 = z3 - PP(1.37021, ta + 368)
        c3 = z2 + PP(0.41562, -91)
        c4 = z2 + PP(0.447102, 88)
        #z3 = z2 + PP(1.37021, 60)
        c5 = z3 + PP(0.397884, -128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_nerSERCRswr(cls, ta=None, **kwargs):
        #M 132.481,532.029 C 144.87597,532.029 155.28699,559.4057 155.11099,569.4537 155.11099,570.9177 153.65409,571.49918 152.72382,571.18293 151.6918,570.83208 150.89719,568.66835 151.79347,568.048 152.8521,567.31527 154.10436,568.25713 154.87198,570.38061

        #z0 = P(0, -0)
        #c0 = P(4.35633, -0)
        #c1 = P(8.01539, -9.62181)
        #z1 = P(7.95353, -13.1533)
        #c2 = P(7.95353, -13.6678)
        #c3 = P(7.44149, -13.8722)
        #z2 = P(7.11454, -13.761)
        #c4 = P(6.75183, -13.6377)
        #c5 = P(6.47255, -12.8773)
        #z3 = P(6.78756, -12.6592)
        #c6 = P(7.15962, -12.4017)
        #c7 = P(7.59974, -12.7327)
        z4 = P(7.86953, -13.4791)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35633, 0)
        #z1 = z0 + P(7.95353, -13.1533)
        #c1 = z1 + P(0.0618569, 3.53147)
        #c2 = z1 + P(0, -0.514537)
        #z2 = z1 + P(-0.838994, -0.607755)
        #c3 = z2 + P(0.326953, -0.111149)
        #c4 = z2 + P(-0.362714, 0.12331)
        #z3 = z2 + P(-0.326981, 1.1018)
        #c5 = z3 + P(-0.315006, -0.218028)
        #c6 = z3 + P(0.372066, 0.257525)
        #z4 = z3 + P(1.08197, -0.819819)
        #c7 = z4 + P(-0.269788, 0.746318)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35633, 0)
        z1 = z0 + PP(15.371, -58)
        c1 = z1 + PP(3.53201, 88)
        c2 = z1 + PP(0.514537, -90)
        z2 = z1 + PP(1.03599, -144)
        c3 = z2 + PP(0.345329, -18)
        c4 = z2 + PP(0.383101, 161)
        #z3 = z2 + PP(1.1493, 106)
        z3 = z4 - PP(1.35749, ta + 34)
        c5 = z3 + PP(0.3831, -145)
        #c6 = z3 + PP(0.452496, 34)
        #z4 = z3 + PP(1.35749, -37)
        #c7 = z4 + PP(0.793584, 109)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRswl(cls, ta=None, **kwargs):
        #M 93.6317,532.029 C 106.02606,532.029 116.43699,559.33534 116.26199,569.38334 116.26199,572.31134 111.98499,571.28034 113.70899,569.83434 114.58899,569.12134 115.39299,568.31734 116.10499,567.43734

        #z0 = P(0, -0)
        #c0 = P(4.35612, -0)
        #c1 = P(8.01514, -9.59708)
        #z1 = P(7.95364, -13.1286)
        #c2 = P(7.95364, -14.1576)
        #c3 = P(6.45045, -13.7953)
        #z2 = P(7.05636, -13.2871)
        #c4 = P(7.36565, -13.0365)
        #c5 = P(7.64822, -12.7539)
        z3 = P(7.89846, -12.4446)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35612, 0)
        #z1 = z0 + P(7.95364, -13.1286)
        #c1 = z1 + P(0.0615055, 3.53147)
        #c2 = z1 + P(0, -1.02907)
        #z2 = z1 + P(-0.897277, -0.158508)
        #c3 = z2 + P(-0.605917, -0.508211)
        #c4 = z2 + P(0.309285, 0.250591)
        #z3 = z2 + P(0.842098, 0.842449)
        #c5 = z3 + P(-0.250239, -0.309285)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35612, 0)
        z1 = z0 + PP(15.3499, -58)
        c1 = z1 + PP(3.532, 89)
        c2 = z1 + PP(1.02907, -90)
        z2 = z1 + PP(0.91117, -169)
        #z2 = z3 - PP(1.19115, ta + 353)
        c3 = z2 + PP(0.790831, -140)
        c4 = z2 + PP(0.398061, 39)
        #z3 = z2 + PP(1.19115, 45)
        c5 = z3 + PP(0.39784, -128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SERCRNE(cls, ta=None, **kwargs):
        #M 306.163,146.91 C 317.066,152.707 331.5723,170.26256 331.302,180.27 331.22327,183.18494 328.57956,181.83894 328.628,180.679 328.66134,179.8807 330.1571,178.94871 331.146,178.332 332.1676,177.6949 333.32267,177.01945 334.47739,176.22838

        #z0 = P(0, -0)
        #c0 = P(3.84634, -2.04505)
        #c1 = P(8.96384, -8.23826)
        #z1 = P(8.86848, -11.7687)
        #c2 = P(8.84071, -12.797)
        #c3 = P(7.90806, -12.3222)
        #z2 = P(7.92515, -11.913)
        #c4 = P(7.93691, -11.6313)
        #c5 = P(8.46459, -11.3025)
        #z3 = P(8.81345, -11.085)
        #c6 = P(9.17384, -10.8602)
        #c7 = P(9.58133, -10.6219)
        #z4 = P(9.98869, -10.3429)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.84634, -2.04505)
        #z1 = z0 + P(8.86848, -11.7687)
        #c1 = z1 + P(0.0953558, 3.5304)
        #c2 = z1 + P(-0.0277742, -1.02833)
        #z2 = z1 + P(-0.943328, -0.144286)
        #c3 = z2 + P(-0.0170886, -0.409201)
        #c4 = z2 + P(0.0117616, 0.281623)
        #z3 = z2 + P(0.888294, 0.827969)
        #c5 = z3 + P(-0.348862, -0.217562)
        #c6 = z3 + P(0.360398, 0.224755)
        #z4 = z3 + P(1.17524, 0.74211)
        #c7 = z4 + P(-0.40736, -0.279072)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35621, -27)
        z1 = z0 + PP(14.7361, -52)
        c1 = z1 + PP(3.53169, 88)
        c2 = z1 + PP(1.0287, -91)
        z2 = z1 + PP(0.954299, -171)
        c3 = z2 + PP(0.409558, -92)
        c4 = z2 + PP(0.281868, 87)
        z3 = z2 + PP(1.21433, 42)
        #z3 = z4 - PP(1.38993, ta + 357)
        c5 = z3 + PP(0.411142, -148)
        c6 = z3 + PP(0.424737, 31)
        z4 = z3 + PP(1.38993, 32)
        c7 = z4 + PP(0.493784, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_nerSERCRNE(cls, ta=None, **kwargs):
        #M 58.68,300.195 C 71.0285,300.195 81.5379,327.649 81.1885,337.655 81.1885,340.571 78.869828,338.94769 78.4688,338.12 77.963993,337.07812 80.042877,336.40527 81.0499,335.796 81.905324,335.27845 82.865945,334.89826 83.917371,334.44938

        #z0 = P(0, -0)
        #c0 = P(4.35628, -0)
        #c1 = P(8.06376, -9.68516)
        #z1 = P(7.9405, -13.2151)
        #c2 = P(7.9405, -14.2438)
        #c3 = P(7.12252, -13.6711)
        #z2 = P(6.98105, -13.3791)
        #c4 = P(6.80296, -13.0115)
        #c5 = P(7.53635, -12.7742)
        #z3 = P(7.8916, -12.5592)
        #c6 = P(8.19338, -12.3767)
        #c7 = P(8.53226, -12.2425)
        #z4 = P(8.90318, -12.0842)

        #z0 = P(0, -0)
        #c0 = z0 + P(4.35628, 0)
        #z1 = z0 + P(7.9405, -13.2151)
        #c1 = z1 + P(0.123261, 3.52989)
        #c2 = z1 + P(0, -1.0287)
        #z2 = z1 + P(-0.95945, -0.164042)
        #c3 = z2 + P(0.141474, -0.291991)
        #c4 = z2 + P(-0.178085, 0.367552)
        #z3 = z2 + P(0.910555, 0.819856)
        #c5 = z3 + P(-0.355255, -0.214937)
        #c6 = z3 + P(0.301775, 0.18258)
        #z4 = z3 + P(1.01158, 0.475058)
        #c7 = z4 + P(-0.37092, -0.158355)

        z0 = P(0, -0)
        c0 = z0 + PP(4.35628, 0)
        z1 = z0 + PP(15.4172, -58)
        c1 = z1 + PP(3.53205, 88)
        c2 = z1 + PP(1.0287, -90)
        z2 = z1 + PP(0.973372, -170)
        c3 = z2 + PP(0.324459, -64)
        c4 = z2 + PP(0.408422, 115)
        z3 = z2 + PP(1.22526, 41)
        #z3 = z4 - PP(1.11758, ta + 361)
        c5 = z3 + PP(0.415216, -148)
        c6 = z3 + PP(0.352709, 31)
        z4 = z3 + PP(1.11758, 25)
        c7 = z4 + PP(0.403308, -156)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

class CharRen(CharRe):
    def __init__(self, name='ren', kana='れん',
                 model='SER16CR1NE1F', head_type='SER',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        if getattr(self.before, 'tail_type', '') == 'NER':
            return [self.path_nerSERCRNE()]
        else:
            return [self.path_SERCRNE()]

class CharReku(CharRe):
    def __init__(self, name='reku', kana='れく',
                 model='BSER16CR1', head_type='BSER',
                 tail_type='SERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)
