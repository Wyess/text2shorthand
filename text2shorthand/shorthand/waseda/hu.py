import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharHu(WasedaChar):
    def __init__(self, name='hu', kana='„Åµ',
                 model='SEL8CL4', head_type='SEL',
                 tail_type='SELCL4'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_SELCL(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 47.3414,64.0095 47.9514,68.1908 49.3095,71.1032 50.7182,73.9915 53.1065,75.5058 56.9351,75.5058 58.7286,75.5058 60.64,75.0084 60.64,73.4521 60.64,72.2572 58.3944,71.2449 55.7661,70.6381 53.1487,69.9855 50.127884,69.7555 48.793284,69.7555

        #z0 = P(0, -0)
        #c0 = P(0, -1.87409)
        #c1 = P(0.214391, -3.34365)
        #z1 = P(0.691708, -4.36724)
        #c2 = P(1.18681, -5.38236)
        #c3 = P(2.0262, -5.91458)
        #z2 = P(3.3718, -5.91458)
        #c4 = P(4.00214, -5.91458)
        #c5 = P(4.67392, -5.73976)
        #z3 = P(4.67392, -5.19278)
        #c6 = P(4.67392, -4.77283)
        #c7 = P(3.88469, -4.41704)
        #z4 = P(2.96094, -4.20378)
        #c8 = P(2.04103, -3.97441)
        #c9 = P(0.979337, -3.89358)
        z5 = P(0.610279, -3.89358)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.87409)
        #z1 = z0 + P(0.691708, -4.36724)
        #c1 = z1 + P(-0.477318, 1.02359)
        #c2 = z1 + P(0.495102, -1.01512)
        #z2 = z1 + P(2.68009, -1.54734)
        #c3 = z2 + P(-1.3456, 0)
        #c4 = z2 + P(0.630343, 0)
        #z3 = z2 + P(1.30212, 0.721793)
        #c5 = z3 + P(0, -0.546977)
        #c6 = z3 + P(0, 0.419959)
        #z4 = z3 + P(-1.71298, 0.989008)
        #c7 = z4 + P(0.923742, -0.213266)
        #c8 = z4 + P(-0.919911, 0.229363)
        #z5 = z4 + P(-2.45067, 0.310198)
        #c9 = z5 + P(0.469058, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(1.87409, -90)
        z1 = z0 + PP(4.42168, -80)
        c1 = z1 + PP(1.12941, 115)
        c2 = z1 + PP(1.12942, -64)
        z2 = z1 + PP(3.0947, -29)
        c3 = z2 + PP(1.3456, 180)
        c4 = z2 + PP(0.630343, 0)
        z3 = z2 + PP(1.4888, 29)
        c5 = z3 + PP(0.546977, -90)
        c6 = z3 + PP(0.419959, 90)
        z4 = z3 + PP(1.97799, 149)
        #z4 = z5 - PP(2.47022, ta + 352)
        c7 = z4 + PP(0.948041, -13)
        c8 = z4 + PP(0.948074, 165)
        #z5 = z4 + PP(2.47022, 172)
        c9 = z5 + PP(0.469058, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_SELCLe(cls, ta=None, **kwargs):
        #M47.3414 126.407C47.3414 131.719 48.1649 135.849 49.5179 138.75C50.9214 141.628 53.3761 143.003 57.1904 143.003C58.9772 143.003 60.8815 142.508 60.8815 140.957C60.8815 139.767 58.6939 138.674 56.0754 138.07C53.4796 137.374 50.401 137.444 49.0713 137.444

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289427, -3.31848)
        #z1 = P(0.764952, -4.33807)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12095, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08952, -5.83283)
        #c5 = P(4.7588, -5.65886)
        #z3 = P(4.7588, -5.11374)
        #c6 = P(4.7588, -4.6955)
        #c7 = P(3.98995, -4.31136)
        #z4 = P(3.06965, -4.09908)
        #c8 = P(2.15733, -3.85446)
        #c9 = P(1.07533, -3.87906)
        z5 = P(0.60799, -3.87906)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764952, -4.33807)
        #c1 = z1 + P(-0.475525, 1.01959)
        #c2 = z1 + P(0.493274, -1.0115)
        #z2 = z1 + P(2.69658, -1.49476)
        #c3 = z2 + P(-1.34057, 0)
        #c4 = z2 + P(0.627989, 0)
        #z3 = z2 + P(1.29727, 0.719087)
        #c5 = z3 + P(0, -0.545114)
        #c6 = z3 + P(0, 0.418237)
        #z4 = z3 + P(-1.68915, 1.01466)
        #c7 = z4 + P(0.920298, -0.212282)
        #c8 = z4 + P(-0.91232, 0.244616)
        #z5 = z4 + P(-2.46166, 0.220014)
        #c9 = z5 + P(0.467336, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.405, -79)
        c1 = z1 + PP(1.12502, 115)
        c2 = z1 + PP(1.12537, -64)
        z2 = z1 + PP(3.08315, -29)
        c3 = z2 + PP(1.34057, 180)
        c4 = z2 + PP(0.627989, 0)
        z3 = z2 + PP(1.48324, 28)
        c5 = z3 + PP(0.545114, -90)
        c6 = z3 + PP(0.418237, 90)
        z4 = z3 + PP(1.97048, 149)
        #z4 = z5 - PP(2.47147, ta + 354)
        c7 = z4 + PP(0.944464, -12)
        c8 = z4 + PP(0.944544, 164)
        #z5 = z4 + PP(2.47147, 174)
        c9 = z5 + PP(0.467336, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_SELCLer(cls, ta=None, **kwargs):
        #M141.516 126.407C141.516 131.719 142.339 135.849 143.692 138.75C145.096 141.628 147.55 143.003 151.365 143.003C153.151 143.003 155.056 142.508 155.056 140.957C155.056 139.767 152.868 138.674 150.25 138.07C147.654 137.374 144.575 137.444 143.246 137.444

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289251, -3.31848)
        #z1 = P(0.764777, -4.33807)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12071, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08924, -5.83283)
        #c5 = P(4.75877, -5.65886)
        #z3 = P(4.75877, -5.11374)
        #c6 = P(4.75877, -4.6955)
        #c7 = P(3.98977, -4.31136)
        #z4 = P(3.06965, -4.09908)
        #c8 = P(2.15726, -3.85446)
        #c9 = P(1.07512, -3.87906)
        z5 = P(0.608026, -3.87906)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764777, -4.33807)
        #c1 = z1 + P(-0.475525, 1.01959)
        #c2 = z1 + P(0.49345, -1.0115)
        #z2 = z1 + P(2.69675, -1.49476)
        #c3 = z2 + P(-1.34082, 0)
        #c4 = z2 + P(0.627707, 0)
        #z3 = z2 + P(1.29724, 0.719087)
        #c5 = z3 + P(0, -0.545114)
        #c6 = z3 + P(0, 0.418237)
        #z4 = z3 + P(-1.68912, 1.01466)
        #c7 = z4 + P(0.920122, -0.212282)
        #c8 = z4 + P(-0.91239, 0.244616)
        #z5 = z4 + P(-2.46162, 0.220014)
        #c9 = z5 + P(0.46709, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.40497, -80)
        c1 = z1 + PP(1.12502, 115)
        c2 = z1 + PP(1.12545, -63)
        z2 = z1 + PP(3.08331, -28)
        c3 = z2 + PP(1.34082, 180)
        c4 = z2 + PP(0.627707, 0)
        z3 = z2 + PP(1.48321, 29)
        c5 = z3 + PP(0.545114, -90)
        c6 = z3 + PP(0.418237, 90)
        z4 = z3 + PP(1.97045, 149)
        #z4 = z5 - PP(2.47144, ta + 354)
        c7 = z4 + PP(0.944292, -12)
        c8 = z4 + PP(0.944612, 164)
        #z5 = z4 + PP(2.47144, 174)
        c9 = z5 + PP(0.46709, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLel(cls, ta=None, **kwargs):
        #M 100.098,126.407 C 100.098,131.719 100.96635,135.849 101.95803,138.75 102.98708,141.628 104.78572,143.003 107.5819,143.003 108.89167,143.003 110.01374,142.77449 110.01374,141.75647 110.01374,140.7234 108.11952,139.32574 106.05704,138.0872 103.99457,136.84867 101.76384,135.76926 101.09083,135.37272

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.30519, -3.31848)
        #z1 = P(0.653726, -4.33807)
        #c2 = P(1.0154, -5.34957)
        #c3 = P(1.64755, -5.83283)
        #z2 = P(2.63029, -5.83283)
        #c4 = P(3.09062, -5.83283)
        #c5 = P(3.48498, -5.75252)
        #z3 = P(3.48498, -5.39472)
        #c6 = P(3.48498, -5.03164)
        #c7 = P(2.81924, -4.54042)
        #z4 = P(2.09436, -4.10512)
        #c8 = P(1.36949, -3.66983)
        #c9 = P(0.585476, -3.29046)
        z5 = P(0.34894, -3.15109)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.653726, -4.33807)
        #c1 = z1 + P(-0.348536, 1.01959)
        #c2 = z1 + P(0.36167, -1.0115)
        #z2 = z1 + P(1.97656, -1.49476)
        #c3 = z2 + P(-0.982745, 0)
        #c4 = z2 + P(0.460332, 0)
        #z3 = z2 + P(0.854694, 0.438105)
        #c5 = z3 + P(0, -0.357793)
        #c6 = z3 + P(0, 0.363083)
        #z4 = z3 + P(-1.39062, 1.2896)
        #c7 = z4 + P(0.724879, -0.435297)
        #c8 = z4 + P(-0.724875, 0.435294)
        #z5 = z4 + P(-1.74542, 0.954031)
        #c9 = z5 + P(0.236536, -0.139368)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.38705, -81)
        c1 = z1 + PP(1.07751, 108)
        c2 = z1 + PP(1.07422, -70)
        z2 = z1 + PP(2.47813, -37)
        c3 = z2 + PP(0.982745, 180)
        c4 = z2 + PP(0.460332, 0)
        z3 = z2 + PP(0.960437, 27)
        c5 = z3 + PP(0.357793, -90)
        c6 = z3 + PP(0.363083, 90)
        z4 = z3 + PP(1.89655, 137)
        #z4 = z5 - PP(1.98914, ta + 361)
        c7 = z4 + PP(0.845537, -30)
        c8 = z4 + PP(0.845532, 149)
        #z5 = z4 + PP(1.98914, 151)
        c9 = z5 + PP(0.274541, -30)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLne(cls, ta=None, **kwargs):
        return cls.path_SELCL()

    @classmethod
    def path_SELCLner(cls, ta=None, **kwargs):
        return cls.path_SELCL()

    @classmethod
    def path_SELCLnel(cls, ta=None, **kwargs):
        return cls.path_SELCL()

    @classmethod
    def path_SELCLs(cls, ta=None, **kwargs):
        #M 47.3414,247.29 C 47.3414,252.602 48.1649,256.732 49.5179,259.634 50.9214,262.511 53.3761,263.886 57.1904,263.886 58.9772,263.886 60.8815,263.24674 60.8815,261.84 60.8815,257.96333 57.522642,254.97274 54.680033,255.64683 52.247965,256.22358 52.415549,261.65084 52.318468,262.7638

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289427, -3.31848)
        #z1 = P(0.764952, -4.33842)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12095, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08952, -5.83283)
        #c5 = P(4.7588, -5.60815)
        #z3 = P(4.7588, -5.11374)
        #c6 = P(4.7588, -3.75125)
        #c7 = P(3.5783, -2.70017)
        #z4 = P(2.57924, -2.93709)
        #c8 = P(1.72446, -3.13979)
        #c9 = P(1.78336, -5.04726)
        z5 = P(1.74924, -5.43842)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764952, -4.33842)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.493274, -1.01115)
        #z2 = z1 + P(2.69658, -1.49441)
        #c3 = z2 + P(-1.34057, 0)
        #c4 = z2 + P(0.627989, 0)
        #z3 = z2 + P(1.29727, 0.719087)
        #c5 = z3 + P(0, -0.494413)
        #c6 = z3 + P(0, 1.36249)
        #z4 = z3 + P(-2.17957, 2.17665)
        #c7 = z4 + P(0.999063, 0.236916)
        #c8 = z4 + P(-0.854774, -0.202704)
        #z5 = z4 + P(-0.829995, -2.50133)
        #c9 = z5 + P(0.0341201, 0.391161)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.40534, -80)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12505, -63)
        z2 = z1 + PP(3.08298, -28)
        c3 = z2 + PP(1.34057, 180)
        c4 = z2 + PP(0.627989, 0)
        z3 = z2 + PP(1.48324, 28)
        c5 = z3 + PP(0.494413, -90)
        c6 = z3 + PP(1.36249, 90)
        #z4 = z3 + PP(3.08031, 135)
        z4 = z5 - PP(2.63544, ta + -13)
        c7 = z4 + PP(1.02677, 13)
        #c8 = z4 + PP(0.878481, -166)
        #z5 = z4 + PP(2.63544, -108)
        #c9 = z5 + PP(0.392646, 85)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLsl(cls, ta=None, **kwargs):
        #M 91.5939,247.29 C 91.5939,252.602 92.4173,256.732 93.7703,259.634 95.1738,262.511 97.6285,263.886 101.443,263.886 103.23,263.886 104.65698,263.16337 105.134,261.84 105.63316,260.4552 104.92716,258.17804 103.5259,257.72714 100.74063,256.83088 96.695444,261.53219 96.161757,262.50401

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289392, -3.31848)
        #z1 = P(0.764917, -4.33842)
        #c2 = P(1.25819, -5.34957)
        #c3 = P(2.12092, -5.83283)
        #z2 = P(3.46156, -5.83283)
        #c4 = P(4.08962, -5.83283)
        #c5 = P(4.59115, -5.57885)
        #z3 = P(4.7588, -5.11374)
        #c6 = P(4.93424, -4.62704)
        #c7 = P(4.68611, -3.82671)
        #z4 = P(4.19362, -3.66824)
        #c8 = P(3.21471, -3.35324)
        #c9 = P(1.79299, -5.00556)
        z5 = P(1.60542, -5.34711)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764917, -4.33842)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.493274, -1.01115)
        #z2 = z1 + P(2.69665, -1.49441)
        #c3 = z2 + P(-1.34064, 0)
        #c4 = z2 + P(0.628059, 0)
        #z3 = z2 + P(1.29724, 0.719087)
        #c5 = z3 + P(-0.167653, -0.465111)
        #c6 = z3 + P(0.175435, 0.486702)
        #z4 = z3 + P(-0.565183, 1.44551)
        #c7 = z4 + P(0.492487, -0.158473)
        #c8 = z4 + P(-0.978911, 0.314999)
        #z5 = z4 + P(-2.5882, -1.67888)
        #c9 = z5 + P(0.18757, 0.341556)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.40534, -80)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12505, -63)
        z2 = z1 + PP(3.08304, -28)
        c3 = z2 + PP(1.34064, 180)
        c4 = z2 + PP(0.628059, 0)
        z3 = z2 + PP(1.48321, 29)
        c5 = z3 + PP(0.494405, -109)
        c6 = z3 + PP(0.517355, 70)
        #z4 = z3 + PP(1.55207, 111)
        z4 = z5 - PP(3.08503, ta + -28)
        c7 = z4 + PP(0.517356, -17)
        #c8 = z4 + PP(1.02834, 162)
        #z5 = z4 + PP(3.08503, -147)
        #c9 = z5 + PP(0.38967, 61)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLsr(cls, ta=None, **kwargs):
        #M 135.846,247.29 C 135.846,252.602 136.67,256.732 138.023,259.634 139.426,262.511 141.881,263.886 145.695,263.886 147.482,263.886 149.386,263.47777 149.386,261.84 149.386,258.06889 142.28898,256.36881 140.26284,258.84641 139.1093,260.25697 141.73588,261.89329 142.9642,263.59884

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289603, -3.31848)
        #z1 = P(0.765128, -4.33842)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12106, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08959, -5.83283)
        #c5 = P(4.75877, -5.68935)
        #z3 = P(4.75877, -5.11374)
        #c6 = P(4.75877, -3.78835)
        #c7 = P(2.26445, -3.19084)
        #z4 = P(1.55234, -4.06161)
        #c8 = P(1.14692, -4.55737)
        #c9 = P(2.07006, -5.13247)
        z5 = P(2.50176, -5.7319)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.765128, -4.33842)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.493098, -1.01115)
        #z2 = z1 + P(2.6964, -1.49441)
        #c3 = z2 + P(-1.34047, 0)
        #c4 = z2 + P(0.628059, 0)
        #z3 = z2 + P(1.29724, 0.719087)
        #c5 = z3 + P(0, -0.57561)
        #c6 = z3 + P(0, 1.32539)
        #z4 = z3 + P(-3.20642, 1.05213)
        #c7 = z4 + P(0.712107, 0.870777)
        #c8 = z4 + P(-0.405423, -0.495755)
        #z5 = z4 + P(0.94942, -1.67029)
        #c9 = z5 + P(-0.431705, 0.599432)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.40537, -79)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12498, -64)
        z2 = z1 + PP(3.08283, -28)
        c3 = z2 + PP(1.34047, 180)
        c4 = z2 + PP(0.628059, 0)
        z3 = z2 + PP(1.48321, 29)
        c5 = z3 + PP(0.57561, -90)
        c6 = z3 + PP(1.32539, 90)
        #z4 = z3 + PP(3.37463, 161)
        z4 = z5 - PP(1.92127, ta + -5)
        c7 = z4 + PP(1.12488, 50)
        #c8 = z4 + PP(0.640423, -129)
        #z5 = z4 + PP(1.92127, -60)
        #c9 = z5 + PP(0.738707, 125)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLse(cls, ta=None, **kwargs):
        #M 47.3414,337.697 C 47.3414,343.009 48.1649,347.139 49.5179,350.041 50.9214,352.918 53.3761,354.293 57.1904,354.293 58.9772,354.293 60.932482,353.65282 60.8815,352.247 60.767851,349.11314 54.726975,346.25494 52.34452,348.29403 50.876517,349.55047 53.083415,352.2683 53.938945,353.86725

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289427, -3.31848)
        #z1 = P(0.764952, -4.33842)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12095, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08952, -5.83283)
        #c5 = P(4.77672, -5.60783)
        #z3 = P(4.7588, -5.11374)
        #c6 = P(4.71886, -4.01232)
        #c7 = P(2.59573, -3.00777)
        #z4 = P(1.7584, -3.72443)
        #c8 = P(1.24245, -4.16602)
        #c9 = P(2.01809, -5.12123)
        z5 = P(2.31877, -5.68319)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764952, -4.33842)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.493274, -1.01115)
        #z2 = z1 + P(2.69658, -1.49441)
        #c3 = z2 + P(-1.34057, 0)
        #c4 = z2 + P(0.627989, 0)
        #z3 = z2 + P(1.29727, 0.719087)
        #c5 = z3 + P(0.0179181, -0.494089)
        #c6 = z3 + P(-0.0399431, 1.10143)
        #z4 = z3 + P(-3.00041, 1.38931)
        #c7 = z4 + P(0.837337, 0.716658)
        #c8 = z4 + P(-0.515944, -0.441588)
        #z5 = z4 + P(0.560376, -1.95876)
        #c9 = z5 + P(-0.300684, 0.561967)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.40534, -80)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12505, -63)
        z2 = z1 + PP(3.08298, -28)
        c3 = z2 + PP(1.34057, 180)
        c4 = z2 + PP(0.627989, 0)
        z3 = z2 + PP(1.48324, 28)
        c5 = z3 + PP(0.494414, -87)
        c6 = z3 + PP(1.10215, 92)
        #z4 = z3 + PP(3.30645, 155)
        z4 = z5 - PP(2.03735, ta + -12)
        c7 = z4 + PP(1.10215, 40)
        #c8 = z4 + PP(0.679116, -139)
        #z5 = z4 + PP(2.03735, -74)
        #c9 = z5 + PP(0.637352, 118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLser(cls, ta=None, **kwargs):
        #M 3314.74,-9.5142 C 3314.33,-4.82411 3314.8,0.672527 3315.47,4.48306 3315.99,7.13701 3317.44,12.543 3320.03,11.4985 3321.8,10.8193 3321.1052,7.2954987 3319.6152,5.3810987 3318.6852,4.1519487 3317.0383,1.7557829 3315.0083,0.38818291

        #z0 = P(0, -0)
        #c0 = P(-0.144639, -1.65456)
        #c1 = P(0.0211667, -3.59365)
        #z1 = P(0.257528, -4.93792)
        #c2 = P(0.440972, -5.87418)
        #c3 = P(0.9525, -7.78129)
        #z2 = P(1.86619, -7.41281)
        #c4 = P(2.49061, -7.17321)
        #c5 = P(2.2455, -5.93009)
        #z3 = P(1.71986, -5.25473)
        #c6 = P(1.39178, -4.82111)
        #c7 = P(0.810789, -3.9758)
        z4 = P(0.0946503, -3.49334)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.144639, -1.65456)
        #z1 = z0 + P(0.257528, -4.93792)
        #c1 = z1 + P(-0.236361, 1.34427)
        #c2 = z1 + P(0.183444, -0.936255)
        #z2 = z1 + P(1.60867, -2.47489)
        #c3 = z2 + P(-0.913694, -0.368476)
        #c4 = z2 + P(0.624417, 0.239607)
        #z3 = z2 + P(-0.146332, 2.15808)
        #c5 = z3 + P(0.525639, -0.675358)
        #c6 = z3 + P(-0.328083, 0.433617)
        #z4 = z3 + P(-1.62521, 1.76139)
        #c7 = z4 + P(0.716139, -0.482459)

        z0 = P(0, -0)
        c0 = z0 + PP(1.66087, -94)
        z1 = z0 + PP(4.94463, -87)
        c1 = z1 + PP(1.36489, 99)
        c2 = z1 + PP(0.954057, -78)
        z2 = z1 + PP(2.95176, -56)
        c3 = z2 + PP(0.985197, -158)
        c4 = z2 + PP(0.668811, 20)
        z3 = z2 + PP(2.16304, 93)
        #z3 = z4 - PP(2.39662, ta + 345)
        c5 = z3 + PP(0.855806, -52)
        c6 = z3 + PP(0.543748, 127)
        z4 = z3 + PP(2.39662, 132)
        c7 = z4 + PP(0.863494, -33)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def _path_SELCLser(cls, ta=None, **kwargs):
        #M 83.0899,337.697 C 83.0899,343.009 83.9134,347.139 85.2664,350.041 86.6699,352.918 89.1246,354.293 92.9389,354.293 94.7257,354.293 96.653416,354.28948 96.63,352.247 96.599289,349.56817 94.596622,347.84431 92.529265,347.15389 90.778062,346.56906 88.036493,346.89103 87.160288,348.51505 85.754663,351.12032 89.495176,351.48245 93.403721,354.28153

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289427, -3.31848)
        #z1 = P(0.764952, -4.33842)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12095, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08952, -5.83283)
        #c5 = P(4.76703, -5.83159)
        #z3 = P(4.7588, -5.11374)
        #c6 = P(4.74801, -4.17224)
        #c7 = P(4.04415, -3.56637)
        #z4 = P(3.31756, -3.32372)
        #c8 = P(2.70208, -3.11817)
        #c9 = P(1.73853, -3.23133)
        #z5 = P(1.43058, -3.80211)
        #c10 = P(0.936557, -4.71776)
        #c11 = P(2.2512, -4.84503)
        z6 = P(3.62489, -5.8288)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764952, -4.33842)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.493274, -1.01115)
        #z2 = z1 + P(2.69658, -1.49441)
        #c3 = z2 + P(-1.34057, 0)
        #c4 = z2 + P(0.627989, 0)
        #z3 = z2 + P(1.29727, 0.719087)
        #c5 = z3 + P(0.00822978, -0.71785)
        #c6 = z3 + P(-0.0107937, 0.941501)
        #z4 = z3 + P(-1.44124, 1.79002)
        #c7 = z4 + P(0.726593, -0.242655)
        #c8 = z4 + P(-0.615478, 0.205544)
        #z5 = z4 + P(-1.88698, -0.478393)
        #c9 = z5 + P(0.307951, 0.570778)
        #c10 = z5 + P(-0.494021, -0.915648)
        #z6 = z5 + P(2.19432, -2.02669)
        #c11 = z6 + P(-1.3737, 0.983764)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.40534, -80)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12505, -63)
        z2 = z1 + PP(3.08298, -28)
        c3 = z2 + PP(1.34057, 180)
        c4 = z2 + PP(0.627989, 0)
        z3 = z2 + PP(1.48324, 28)
        c5 = z3 + PP(0.717897, -89)
        c6 = z3 + PP(0.941563, 90)
        z4 = z3 + PP(2.29812, 128)
        c7 = z4 + PP(0.766041, -18)
        c8 = z4 + PP(0.648892, 161)
        #z5 = z4 + PP(1.94668, -165)
        z5 = z6 - PP(2.98705, ta + -6)
        c9 = z5 + PP(0.648553, 61)
        #c10 = z5 + PP(1.04042, -118)
        #z6 = z5 + PP(2.98705, -42)
        #c11 = z6 + PP(1.68963, 144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_SELCLsel(cls, ta=None, **kwargs):
        #M 124.508,337.697 C 124.508,343.009 125.331,347.139 126.684,350.041 128.088,352.918 130.542,354.293 134.357,354.293 136.144,354.293 138.048,353.798 138.048,352.247 138.048,351.057 135.58232,347.4083 133.46774,347.74389 131.28595,348.09015 130.04614,351.63436 130.41263,353.62497

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289251, -3.31848)
        #z1 = P(0.764777, -4.33842)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12071, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08959, -5.83283)
        #c5 = P(4.75877, -5.65886)
        #z3 = P(4.75877, -5.11374)
        #c6 = P(4.75877, -4.6955)
        #c7 = P(3.89218, -3.41313)
        #z4 = P(3.14899, -3.53108)
        #c8 = P(2.38218, -3.65278)
        #c9 = P(1.94643, -4.89842)
        z5 = P(2.07524, -5.59804)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764777, -4.33842)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.49345, -1.01115)
        #z2 = z1 + P(2.69675, -1.49441)
        #c3 = z2 + P(-1.34082, 0)
        #c4 = z2 + P(0.628059, 0)
        #z3 = z2 + P(1.29724, 0.719087)
        #c5 = z3 + P(0, -0.545114)
        #c6 = z3 + P(0, 0.418237)
        #z4 = z3 + P(-1.60978, 1.58266)
        #c7 = z4 + P(0.74319, 0.117946)
        #c8 = z4 + P(-0.766812, -0.121696)
        #z5 = z4 + P(-1.07375, -2.06696)
        #c9 = z5 + P(-0.128807, 0.69962)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.40531, -80)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12513, -63)
        z2 = z1 + PP(3.08314, -28)
        c3 = z2 + PP(1.34082, 180)
        c4 = z2 + PP(0.628059, 0)
        z3 = z2 + PP(1.48321, 29)
        c5 = z3 + PP(0.545114, -90)
        c6 = z3 + PP(0.418237, 90)
        #z4 = z3 + PP(2.25748, 135)
        z4 = z5 - PP(2.32922, ta + -37)
        c7 = z4 + PP(0.752491, 9)
        #c8 = z4 + PP(0.776408, -170)
        #z5 = z4 + PP(2.32922, -117)
        #c9 = z5 + PP(0.711378, 100)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLsw(cls, ta=None, **kwargs):
        #M 47.3414,422.378 C 47.3414,427.69 48.1649,431.819 49.5179,434.721 50.9214,437.599 53.3761,438.974 57.1904,438.974 58.9772,438.974 60.8815,438.478 60.8815,436.928 60.8815,434.59209 57.753574,431.85356 55.329224,432.14791 53.206858,432.40559 52.259586,436.28315 51.611158,437.37414

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289427, -3.31813)
        #z1 = P(0.764952, -4.33807)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12095, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08952, -5.83283)
        #c5 = P(4.7588, -5.6585)
        #z3 = P(4.7588, -5.11374)
        #c6 = P(4.7588, -4.29276)
        #c7 = P(3.65946, -3.33028)
        #z4 = P(2.8074, -3.43373)
        #c8 = P(2.06147, -3.5243)
        #c9 = P(1.72855, -4.8871)
        z5 = P(1.50065, -5.27054)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764952, -4.33807)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.493274, -1.0115)
        #z2 = z1 + P(2.69658, -1.49476)
        #c3 = z2 + P(-1.34057, 0)
        #c4 = z2 + P(0.627989, 0)
        #z3 = z2 + P(1.29727, 0.719087)
        #c5 = z3 + P(0, -0.544763)
        #c6 = z3 + P(0, 0.820979)
        #z4 = z3 + P(-1.9514, 1.68001)
        #c7 = z4 + P(0.852062, 0.103452)
        #c8 = z4 + P(-0.745926, -0.0905642)
        #z5 = z4 + P(-1.30675, -1.83681)
        #c9 = z5 + P(0.227896, 0.383439)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.405, -79)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12537, -64)
        z2 = z1 + PP(3.08315, -29)
        c3 = z2 + PP(1.34057, 180)
        c4 = z2 + PP(0.627989, 0)
        z3 = z2 + PP(1.48324, 28)
        c5 = z3 + PP(0.544763, -90)
        c6 = z3 + PP(0.820979, 90)
        #z4 = z3 + PP(2.57496, 139)
        z4 = z5 - PP(2.25421, ta + -4)
        c7 = z4 + PP(0.858319, 6)
        #c8 = z4 + PP(0.751404, -173)
        #z5 = z4 + PP(2.25421, -125)
        #c9 = z5 + PP(0.446052, 59)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLswr(cls, ta=None, **kwargs):
        #M 87.7158,422.378 C 87.7158,427.69 88.5393,431.819 89.8923,434.721 91.2958,437.599 93.7505,438.974 97.5648,438.974 99.3516,438.974 101.35657,438.33117 101.256,436.928 101.04789,434.02442 95.420227,432.07928 93.092085,433.82681 91.913804,434.71124 93.042768,436.90005 93.445374,438.23251

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289427, -3.31813)
        #z1 = P(0.764952, -4.33807)
        #c2 = P(1.25823, -5.34957)
        #c3 = P(2.12095, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08952, -5.83283)
        #c5 = P(4.79418, -5.6069)
        #z3 = P(4.75884, -5.11374)
        #c6 = P(4.68569, -4.09325)
        #c7 = P(2.7078, -3.40961)
        #z4 = P(1.88955, -4.0238)
        #c8 = P(1.47543, -4.33464)
        #c9 = P(1.87222, -5.10392)
        z5 = P(2.01372, -5.57222)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764952, -4.33807)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.493274, -1.0115)
        #z2 = z1 + P(2.69658, -1.49476)
        #c3 = z2 + P(-1.34057, 0)
        #c4 = z2 + P(0.627989, 0)
        #z3 = z2 + P(1.29731, 0.719087)
        #c5 = z3 + P(0.0353463, -0.493158)
        #c6 = z3 + P(-0.0731423, 1.02049)
        #z4 = z3 + P(-2.86929, 1.08994)
        #c7 = z4 + P(0.818248, 0.614187)
        #c8 = z4 + P(-0.414118, -0.310842)
        #z5 = z4 + P(0.124167, -1.54843)
        #c9 = z5 + P(-0.1415, 0.468306)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.405, -79)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12537, -64)
        z2 = z1 + PP(3.08315, -29)
        c3 = z2 + PP(1.34057, 180)
        c4 = z2 + PP(0.627989, 0)
        z3 = z2 + PP(1.48327, 28)
        c5 = z3 + PP(0.494423, -85)
        c6 = z3 + PP(1.02311, 94)
        #z4 = z3 + PP(3.06933, 159)
        z4 = z5 - PP(1.5534, ta + -11)
        c7 = z4 + PP(1.02311, 36)
        #c8 = z4 + PP(0.5178, -143)
        #z5 = z4 + PP(1.5534, -85)
        #c9 = z5 + PP(0.489217, 106)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLswl(cls, ta=None, **kwargs):
        #M 122.068,422.378 C 122.068,427.69 122.891,431.819 124.244,434.721 125.647,437.599 128.102,438.974 131.917,438.974 133.703,438.974 135.608,438.33471 135.608,436.928 135.608,432.89286 127.8163,433.69759 124.90963,435.8614

        #z0 = P(0, -0)
        #c0 = P(0, -1.86695)
        #c1 = P(0.289251, -3.31813)
        #z1 = P(0.764777, -4.33807)
        #c2 = P(1.25787, -5.34957)
        #c3 = P(2.12071, -5.83283)
        #z2 = P(3.46153, -5.83283)
        #c4 = P(4.08924, -5.83283)
        #c5 = P(4.75877, -5.60814)
        #z3 = P(4.75877, -5.11374)
        #c6 = P(4.75877, -3.69555)
        #c7 = P(2.0203, -3.97838)
        z4 = P(0.998719, -4.73887)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.86695)
        #z1 = z0 + P(0.764777, -4.33807)
        #c1 = z1 + P(-0.475525, 1.01994)
        #c2 = z1 + P(0.493098, -1.0115)
        #z2 = z1 + P(2.69675, -1.49476)
        #c3 = z2 + P(-1.34082, 0)
        #c4 = z2 + P(0.627707, 0)
        #z3 = z2 + P(1.29724, 0.719087)
        #c5 = z3 + P(0, -0.494402)
        #c6 = z3 + P(0, 1.41819)
        #z4 = z3 + P(-3.76005, 0.374867)
        #c7 = z4 + P(1.02158, 0.760492)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86695, -90)
        z1 = z0 + PP(4.40497, -80)
        c1 = z1 + PP(1.12534, 114)
        c2 = z1 + PP(1.12529, -64)
        z2 = z1 + PP(3.08331, -28)
        c3 = z2 + PP(1.34082, 180)
        c4 = z2 + PP(0.627707, 0)
        z3 = z2 + PP(1.48321, 29)
        #z3 = z4 - PP(3.77869, ta + 318)
        c5 = z3 + PP(0.494402, -90)
        #c6 = z3 + PP(1.41819, 90)
        #z4 = z3 + PP(3.77869, 174)
        #c7 = z4 + PP(1.27357, 36)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SELCLNE(cls, ta=None, **kwargs):
        #M 217.621,126.407 C 217.621,131.719 218.444,135.849 219.797,138.75 221.201,141.628 223.655,143.003 227.47,143.003 229.256,143.003 231.161,142.508 231.161,140.957 231.161,139.767 228.973,138.674 226.355,138.07 223.759,137.374 220.68,137.444 219.351,137.444 220.44509,136.61973 221.53919,135.61947 222.63328,134.5611

        #z0 = P(0, -0)
        #c0 = P(0, -1.87396)
        #c1 = P(0.290336, -3.33093)
        #z1 = P(0.767644, -4.35434)
        #c2 = P(1.26294, -5.36963)
        #c3 = P(2.12866, -5.8547)
        #z2 = P(3.47451, -5.8547)
        #c4 = P(4.10457, -5.8547)
        #c5 = P(4.77661, -5.68008)
        #z3 = P(4.77661, -5.13292)
        #c6 = P(4.77661, -4.71311)
        #c7 = P(4.00473, -4.32753)
        #z4 = P(3.08116, -4.11445)
        #c8 = P(2.16535, -3.86891)
        #c9 = P(1.07915, -3.89361)
        #z5 = P(0.610306, -3.89361)
        #c10 = P(0.996276, -3.60282)
        #c11 = P(1.38225, -3.24995)
        z6 = P(1.76822, -2.87659)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -1.87396)
        #z1 = z0 + P(0.767644, -4.35434)
        #c1 = z1 + P(-0.477308, 1.02341)
        #c2 = z1 + P(0.4953, -1.01529)
        #z2 = z1 + P(2.70686, -1.50036)
        #c3 = z2 + P(-1.34585, 0)
        #c4 = z2 + P(0.630061, 0)
        #z3 = z2 + P(1.3021, 0.721783)
        #c5 = z3 + P(0, -0.547158)
        #c6 = z3 + P(0, 0.419806)
        #z4 = z3 + P(-1.69545, 1.01847)
        #c7 = z4 + P(0.923572, -0.213078)
        #c8 = z4 + P(-0.915811, 0.245533)
        #z5 = z4 + P(-2.47086, 0.220839)
        #c9 = z5 + P(0.468842, 0)
        #c10 = z5 + P(0.385971, 0.290784)
        #z6 = z5 + P(1.15792, 1.01702)
        #c11 = z6 + P(-0.385971, -0.373369)

        z0 = P(0, -0)
        c0 = z0 + PP(1.87396, -90)
        z1 = z0 + PP(4.42148, -80)
        c1 = z1 + PP(1.12924, 115)
        c2 = z1 + PP(1.12967, -63)
        z2 = z1 + PP(3.09487, -28)
        c3 = z2 + PP(1.34585, 180)
        c4 = z2 + PP(0.630061, 0)
        z3 = z2 + PP(1.48877, 29)
        c5 = z3 + PP(0.547158, -90)
        c6 = z3 + PP(0.419806, 90)
        z4 = z3 + PP(1.97783, 149)
        c7 = z4 + PP(0.947833, -12)
        c8 = z4 + PP(0.948154, 164)
        z5 = z4 + PP(2.4807, 174)
        #z5 = z6 - PP(1.54114, ta + 356)
        c9 = z5 + PP(0.468842, 0)
        c10 = z5 + PP(0.483248, 36)
        z6 = z5 + PP(1.54114, 41)
        c11 = z6 + PP(0.537008, -135)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            #curve(),
            endknot(*z6)])

class CharHun(CharHu):
    def __init__(self, name='hun', kana='„Åµ„Çì',
                 model='SEL8CL4NE1F', head_type='SEL',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_SELCLNE()]

class CharHura(WasedaChar):
    def __init__(self, name='hura', kana='„Åµ„Çâ',
                 model='SEL8NWL4', head_type='SEL',
                 tail_type='NWL'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature -= {'NEL'}

    @classmethod
    def path_SELNWL(cls, ta=None, **kwargs):
        #M 174.92,179.722 C 174.62752,185.014 174.64151,188.65169 177.088,192.019 178.8004,194.37592 181.89168,196.12212 184.805,196.122 186.20641,196.12194 188.22573,195.51881 188.517,194.148 188.96831,192.02399 186.572,189.686 184.506,189.015

        #z0 = P(0, -0)
        #c0 = P(-0.10318, -1.8669)
        #c1 = P(-0.0982451, -3.1502)
        #z1 = P(0.764822, -4.33811)
        #c2 = P(1.36892, -5.16958)
        #c3 = P(2.45945, -5.7856)
        #z2 = P(3.48721, -5.78556)
        #c4 = P(3.98159, -5.78553)
        #c5 = P(4.69397, -5.57276)
        #z3 = P(4.79672, -5.08917)
        #c6 = P(4.95593, -4.33987)
        #c7 = P(4.11057, -3.51508)
        z4 = P(3.38173, -3.27836)

        #z0 = P(0, -0)
        #c0 = z0 + P(-0.10318, -1.8669)
        #z1 = z0 + P(0.764822, -4.33811)
        #c1 = z1 + P(-0.863067, 1.18791)
        #c2 = z1 + P(0.604097, -0.831469)
        #z2 = z1 + P(2.72239, -1.44745)
        #c3 = z2 + P(-1.02775, -4.23333e-05)
        #c4 = z2 + P(0.494386, 2.11667e-05)
        #z3 = z2 + P(1.30951, 0.696383)
        #c5 = z3 + P(-0.102754, -0.483591)
        #c6 = z3 + P(0.159212, 0.749304)
        #z4 = z3 + P(-1.41499, 1.81081)
        #c7 = z4 + P(0.728839, -0.236714)

        z0 = P(0, -0)
        c0 = z0 + PP(1.86975, -93)
        z1 = z0 + PP(4.40501, -80)
        c1 = z1 + PP(1.46834, 125)
        c2 = z1 + PP(1.02775, -54)
        z2 = z1 + PP(3.08326, -27)
        c3 = z2 + PP(1.02775, -179)
        c4 = z2 + PP(0.494386, 0)
        z3 = z2 + PP(1.48316, 28)
        #z3 = z4 - PP(2.29809, ta + 325)
        c5 = z3 + PP(0.494387, -101)
        c6 = z3 + PP(0.766032, 78)
        z4 = z3 + PP(2.29809, 128)
        c7 = z4 + PP(0.766316, -17)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_SELNWLe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLer(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLne(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLner(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLnel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLs(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLsl(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLsr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLse(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLser(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLsel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLsw(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLswr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_SELNWLswl(cls, ta=None, **kwargs):
        pass
