import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)


class CharMi(WasedaChar):
    def __init__(self, name='mi', kana='„Åø',
                 model='ER8CR1', head_type='ER',
                 tail_type='ERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_ERCR(cls, ta=None, **kwargs):
        #M 51.215,0 C 56.44,-2.5484 73.9217,-6.02324 73.9217,-1.58781 73.9217,0.109255 71.002938,1.1833198 70.46835,0.75406082 69.350805,-0.1432963 71.271496,-1.3295413 72.6523,-3.16655

        #z0 = P(0, 0)
        #c0 = P(1.83638, 0.89566)
        #c1 = P(7.98049, 2.11693)
        #z1 = P(7.98049, 0.558052)
        #c2 = P(7.98049, -0.0383987)
        #c3 = P(6.95467, -0.415889)
        #z2 = P(6.76678, -0.265022)
        #c4 = P(6.37401, 0.0503629)
        #c5 = P(7.04905, 0.46728)
        z3 = P(7.53435, 1.11292)

        #z0 = P(0, 0)
        #c0 = z0 + P(1.83638, 0.89566)
        #z1 = z0 + P(7.98049, 0.558052)
        #c1 = z1 + P(0, 1.55888)
        #c2 = z1 + P(0, -0.59645)
        #z2 = z1 + P(-1.21371, -0.823074)
        #c3 = z2 + P(0.187886, -0.150867)
        #c4 = z2 + P(-0.392772, 0.315385)
        #z3 = z2 + P(0.767571, 1.37794)
        #c5 = z3 + P(-0.485297, -0.645635)

        z0 = P(0, 0)
        c0 = z0 + PP(2.04316, 25)
        z1 = z0 + PP(7.99998, 4)
        c1 = z1 + PP(1.55888, 90)
        c2 = z1 + PP(0.59645, -90)
        z2 = z1 + PP(1.46648, -145)
        #z2 = z3 - PP(1.5773, ta + 366)
        c3 = z2 + PP(0.240961, -38)
        c4 = z2 + PP(0.503724, 141)
        #z3 = z2 + PP(1.5773, 60)
        c5 = z3 + PP(0.807687, -126)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ERCRe(cls, ta=None, **kwargs):
        #M 47.3414,112.215 C 52.5904,109.768 69.9633,106.215 69.9633,110.633 69.9633,112.324 69.121017,112.79005 68.148097,113.09556 67.380305,113.33665 65.887216,113.12428 65.861815,112.31993 65.815155,110.84238 67.603101,110.633 69.9633,110.633

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95069, 2.10876)
        #z1 = P(7.95069, 0.55601)
        #c2 = P(7.95069, -0.0383091)
        #c3 = P(7.65466, -0.202107)
        #z2 = P(7.31272, -0.309482)
        #c4 = P(7.04287, -0.394215)
        #c5 = P(6.51811, -0.319575)
        #z3 = P(6.50918, -0.0368787)
        #c6 = P(6.49278, 0.482421)
        #c7 = P(7.12117, 0.55601)
        z4 = P(7.95069, 0.55601)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95069, 0.55601)
        #c1 = z1 + P(0, 1.55275)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-0.637971, -0.865491)
        #c3 = z2 + P(0.341942, 0.107375)
        #c4 = z2 + P(-0.269848, -0.0847335)
        #z3 = z2 + P(-0.803536, 0.272603)
        #c5 = z3 + P(0.00892743, -0.282697)
        #c6 = z3 + P(-0.0163991, 0.5193)
        #z4 = z3 + P(1.44151, 0.592888)
        #c7 = z4 + P(-0.829515, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97011, 4)
        c1 = z1 + PP(1.55275, 90)
        c2 = z1 + PP(0.594319, -90)
        z2 = z1 + PP(1.07521, -126)
        c3 = z2 + PP(0.358405, 17)
        c4 = z2 + PP(0.282839, -162)
        #z3 = z2 + PP(0.848518, 161)
        z3 = z4 - PP(1.55867, ta + 22)
        c5 = z3 + PP(0.282838, -88)
        #c6 = z3 + PP(0.519558, 91)
        #z4 = z3 + PP(1.55867, 22)
        #c7 = z4 + PP(0.829515, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRer(cls, ta=None, **kwargs):
        #M 180.77,112.215 C 186.019,109.768 203.392,106.215 203.392,110.633 203.392,112.324 200.525,113.438 199.987,113.018 199.20606,112.39322 200.12387,110.20003 202.127,109.061

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95073, 2.10876)
        #z1 = P(7.95073, 0.55601)
        #c2 = P(7.95073, -0.0383091)
        #c3 = P(6.94309, -0.429835)
        #z2 = P(6.754, -0.282222)
        #c4 = P(6.47954, -0.0626372)
        #c5 = P(6.80211, 0.708181)
        z3 = P(7.50613, 1.1085)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95073, 0.55601)
        #c1 = z1 + P(0, 1.55275)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-1.19672, -0.838232)
        #c3 = z2 + P(0.189085, -0.147613)
        #c4 = z2 + P(-0.274469, 0.219585)
        #z3 = z2 + P(0.752124, 1.39073)
        #c5 = z3 + P(-0.70402, -0.400323)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97014, 4)
        c1 = z1 + PP(1.55275, 90)
        c2 = z1 + PP(0.594319, -90)
        #z2 = z1 + PP(1.46109, -144)
        z2 = z3 - PP(1.58108, ta + 391)
        c3 = z2 + PP(0.239881, -37)
        #c4 = z2 + PP(0.351498, 141)
        #z3 = z2 + PP(1.58108, 61)
        #c5 = z3 + PP(0.809878, -150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ERCRel(cls, ta=None, **kwargs):
        #M 119.725,112.215 C 124.974,109.768 142.347,106.215 142.347,110.633 142.347,112.324 140.79791,113.06708 139.76466,112.68894 138.8621,112.35862 138.50673,110.5258 139.20106,109.86125 139.9811,109.11467 140.94141,110.06741 142.347,110.633

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95073, 2.10876)
        #z1 = P(7.95073, 0.55601)
        #c2 = P(7.95073, -0.0383091)
        #c3 = P(7.40628, -0.299472)
        #z2 = P(7.04314, -0.166571)
        #c4 = P(6.72592, -0.0504767)
        #c5 = P(6.60102, 0.593686)
        #z3 = P(6.84505, 0.827249)
        #c6 = P(7.11921, 1.08964)
        #c7 = P(7.45672, 0.754792)
        z4 = P(7.95073, 0.55601)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95073, 0.55601)
        #c1 = z1 + P(0, 1.55275)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-0.907589, -0.72258)
        #c3 = z2 + P(0.363146, -0.132901)
        #c4 = z2 + P(-0.317214, 0.116094)
        #z3 = z2 + P(-0.198083, 0.99382)
        #c5 = z3 + P(-0.244029, -0.233563)
        #c6 = z3 + P(0.274153, 0.262393)
        #z4 = z3 + P(1.10567, -0.271239)
        #c7 = z4 + P(-0.494008, 0.198782)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97014, 4)
        c1 = z1 + PP(1.55275, 90)
        c2 = z1 + PP(0.594319, -90)
        z2 = z1 + PP(1.1601, -141)
        c3 = z2 + PP(0.386701, -20)
        c4 = z2 + PP(0.33779, 159)
        #z3 = z2 + PP(1.01337, 101)
        z3 = z4 - PP(1.13846, ta + 9)
        c5 = z3 + PP(0.337789, -136)
        #c6 = z3 + PP(0.379486, 43)
        #z4 = z3 + PP(1.13846, -13)
        #c7 = z4 + PP(0.532502, 158)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRne(cls, ta=None, **kwargs):
        #M 47.3414,165.754 C 52.5904,163.306 69.9633,159.753 69.9633,164.172 69.9633,165.862 66.767337,166.75662 66.229037,166.33662 65.119337,165.43762 66.91415,163.90256 68.6986,162.599

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860374)
        #c1 = P(7.95069, 2.10911)
        #z1 = P(7.95069, 0.55601)
        #c2 = P(7.95069, -0.0379577)
        #c3 = P(6.82744, -0.352381)
        #z2 = P(6.63825, -0.204768)
        #c4 = P(6.24823, 0.111195)
        #c5 = P(6.87904, 0.650707)
        z3 = P(7.5062, 1.10886)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860374)
        #z1 = z0 + P(7.95069, 0.55601)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.593967)
        #z2 = z1 + P(-1.31244, -0.760777)
        #c3 = z2 + P(0.189191, -0.147613)
        #c4 = z2 + P(-0.390015, 0.315962)
        #z3 = z2 + P(0.867952, 1.31362)
        #c5 = z3 + P(-0.627163, -0.458149)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03558, 25)
        z1 = z0 + PP(7.97011, 4)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.593967, -90)
        #z2 = z1 + PP(1.517, -149)
        z2 = z3 - PP(1.57447, ta + 379)
        c3 = z2 + PP(0.239964, -37)
        #c4 = z2 + PP(0.50194, 140)
        #z3 = z2 + PP(1.57447, 56)
        #c5 = z3 + PP(0.776681, -143)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ERCRner(cls, ta=None, **kwargs):
        #M 164.6,165.754 C 169.849,163.306 187.222,159.753 187.222,164.172 187.222,165.862 185.90959,166.54157 185.24194,166.556 183.8302,166.58652 184.19678,164.17618 185.04919,162.32418

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860374)
        #c1 = P(7.95073, 2.10911)
        #z1 = P(7.95073, 0.55601)
        #c2 = P(7.95073, -0.0379577)
        #c3 = P(7.48947, -0.276799)
        #z2 = P(7.25481, -0.281871)
        #c4 = P(6.75864, -0.292597)
        #c5 = P(6.88748, 0.55454)
        z3 = P(7.18707, 1.20544)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860374)
        #z1 = z0 + P(7.95073, 0.55601)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.593967)
        #z2 = z1 + P(-0.695912, -0.83788)
        #c3 = z2 + P(0.234652, 0.00507157)
        #c4 = z2 + P(-0.49617, -0.0107266)
        #z3 = z2 + P(-0.0677439, 1.48731)
        #c5 = z3 + P(-0.299588, -0.650904)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03558, 25)
        z1 = z0 + PP(7.97014, 4)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.593967, -90)
        #z2 = z1 + PP(1.08919, -129)
        z2 = z3 - PP(1.48886, ta + 386)
        c3 = z2 + PP(0.234707, 1)
        #c4 = z2 + PP(0.496286, -178)
        #z3 = z2 + PP(1.48886, 92)
        #c5 = z3 + PP(0.716539, -114)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ERCRnel(cls, ta=None, **kwargs):
        #M 106.336,165.754 C 111.585,163.306 128.958,159.753 128.958,164.172 128.958,165.017 128.0493,165.37523 127.07334,165.4697 126.09739,165.56418 124.0453,164.69349 124.23675,163.5396 124.43385,162.35165 125.85341,163.18959 128.02206,162.81838

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860374)
        #c1 = P(7.95073, 2.10911)
        #z1 = P(7.95073, 0.55601)
        #c2 = P(7.95073, 0.259026)
        #c3 = P(7.63135, 0.133122)
        #z2 = P(7.28834, 0.09992)
        #c4 = P(6.94534, 0.0667141)
        #c5 = P(6.22411, 0.372727)
        #z3 = P(6.2914, 0.778273)
        #c6 = P(6.36067, 1.19579)
        #c7 = P(6.85959, 0.901287)
        z4 = P(7.62178, 1.03175)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860374)
        #z1 = z0 + P(7.95073, 0.55601)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.296984)
        #z2 = z1 + P(-0.662382, -0.456089)
        #c3 = z2 + P(0.343011, 0.0332024)
        #c4 = z2 + P(-0.343007, -0.0332059)
        #z3 = z2 + P(-0.996948, 0.678353)
        #c5 = z3 + P(-0.067287, -0.405546)
        #c6 = z3 + P(0.0692727, 0.417517)
        #z4 = z3 + P(1.33038, 0.25348)
        #c7 = z4 + P(-0.762193, -0.130465)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03558, 25)
        z1 = z0 + PP(7.97014, 4)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.296984, -90)
        z2 = z1 + PP(0.804219, -145)
        c3 = z2 + PP(0.344614, 5)
        c4 = z2 + PP(0.344611, -174)
        #z3 = z2 + PP(1.20585, 145)
        z3 = z4 - PP(1.35432, ta + 360)
        c5 = z3 + PP(0.41109, -99)
        #c6 = z3 + PP(0.423224, 80)
        #z4 = z3 + PP(1.35432, 10)
        #c7 = z4 + PP(0.773279, -170)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRs(cls, ta=None, **kwargs):
        #M 47.3414,204.715 C 52.5904,202.267 69.9633,198.714 69.9633,203.133 69.9633,204.824 68.759159,205.69577 67.984038,205.24378 66.963114,204.64846 66.179134,203.58453 66.179134,201.07007

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860374)
        #c1 = P(7.95069, 2.10911)
        #z1 = P(7.95069, 0.55601)
        #c2 = P(7.95069, -0.0383091)
        #c3 = P(7.52748, -0.344701)
        #z2 = P(7.25506, -0.185845)
        #c4 = P(6.89625, 0.0233861)
        #c5 = P(6.62071, 0.397315)
        z3 = P(6.62071, 1.28105)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860374)
        #z1 = z0 + P(7.95069, 0.55601)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-0.695631, -0.741854)
        #c3 = z2 + P(0.272424, -0.158856)
        #c4 = z2 + P(-0.358814, 0.209231)
        #z3 = z2 + P(-0.634351, 1.46689)
        #c5 = z3 + P(0, -0.883732)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03558, 25)
        z1 = z0 + PP(7.97011, 4)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.594319, -90)
        z2 = z1 + PP(1.01698, -133)
        #z2 = z3 - PP(1.59818, ta + 383)
        c3 = z2 + PP(0.315357, -30)
        #c4 = z2 + PP(0.415361, 149)
        #z3 = z2 + PP(1.59818, 113)
        #c5 = z3 + PP(0.883732, -90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRsl(cls, ta=None, **kwargs):
        #M 111.221,204.715 C 116.47,202.267 133.843,198.714 133.843,203.133 133.843,204.824 132.34197,205.88965 131.69941,205.57284 130.41826,204.9412 130.27009,203.11867 131.35335,201.22161

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860374)
        #c1 = P(7.95073, 2.10911)
        #z1 = P(7.95073, 0.55601)
        #c2 = P(7.95073, -0.0383091)
        #c3 = P(7.42317, -0.412842)
        #z2 = P(7.19734, -0.301496)
        #c4 = P(6.74707, -0.0795002)
        #c5 = P(6.69499, 0.561046)
        z3 = P(7.07571, 1.22779)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860374)
        #z1 = z0 + P(7.95073, 0.55601)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-0.753386, -0.857506)
        #c3 = z2 + P(0.225834, -0.111346)
        #c4 = z2 + P(-0.450273, 0.221996)
        #z3 = z2 + P(-0.121626, 1.52928)
        #c5 = z3 + P(-0.380722, -0.66674)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03558, 25)
        z1 = z0 + PP(7.97014, 4)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.594319, -90)
        z2 = z1 + PP(1.14145, -131)
        #z2 = z3 - PP(1.53411, ta + 393)
        c3 = z2 + PP(0.251791, -26)
        c4 = z2 + PP(0.502024, 153)
        #z3 = z2 + PP(1.53411, 94)
        c5 = z3 + PP(0.767784, -119)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ERCRsr(cls, ta=None, **kwargs):
        #M 175.101,204.715 C 180.35,202.267 197.723,198.714 197.723,203.133 197.723,204.824 197.13956,205.25972 196.56659,205.13409 195.17135,204.82818 194.40217,202.86664 193.33263,201.04173

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860374)
        #c1 = P(7.95073, 2.10911)
        #z1 = P(7.95073, 0.55601)
        #c2 = P(7.95073, -0.0383091)
        #c3 = P(7.74567, -0.191447)
        #z2 = P(7.54429, -0.147293)
        #c4 = P(7.05392, -0.0397782)
        #c5 = P(6.78359, 0.649624)
        z3 = P(6.40769, 1.29101)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860374)
        #z1 = z0 + P(7.95073, 0.55601)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-0.406432, -0.703303)
        #c3 = z2 + P(0.201376, -0.0441539)
        #c4 = z2 + P(-0.490371, 0.107515)
        #z3 = z2 + P(-1.13661, 1.4383)
        #c5 = z3 + P(0.3759, -0.641383)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03558, 25)
        z1 = z0 + PP(7.97014, 4)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.594319, -90)
        z2 = z1 + PP(0.812294, -120)
        #z2 = z3 - PP(1.83319, ta + 367)
        c3 = z2 + PP(0.20616, -12)
        c4 = z2 + PP(0.502019, 167)
        #z3 = z2 + PP(1.83319, 128)
        c5 = z3 + PP(0.74342, -59)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRse(cls, ta=None, **kwargs):
        #M 47.3414,280.93 C 52.5904,278.483 69.9633,274.93 69.9633,279.349 69.9633,281.039 68.163697,281.05346 67.268191,280.62284 66.581825,280.29279 66.11658,278.83566 66.741048,278.39969 67.639296,277.77258 68.895125,279.15504 69.481687,280.21352

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95069, 2.10876)
        #z1 = P(7.95069, 0.555658)
        #c2 = P(7.95069, -0.0383091)
        #c3 = P(7.3182, -0.0433912)
        #z2 = P(7.00347, 0.107954)
        #c4 = P(6.76224, 0.223954)
        #c5 = P(6.59872, 0.736076)
        #z3 = P(6.8182, 0.889302)
        #c6 = P(7.1339, 1.10971)
        #c7 = P(7.57527, 0.623827)
        z4 = P(7.78142, 0.251814)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95069, 0.555658)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.593967)
        #z2 = z1 + P(-0.947223, -0.447704)
        #c3 = z2 + P(0.314734, -0.151346)
        #c4 = z2 + P(-0.24123, 0.115999)
        #z3 = z2 + P(-0.18527, 0.781348)
        #c5 = z3 + P(-0.219475, -0.153226)
        #c6 = z3 + P(0.315698, 0.220404)
        #z4 = z3 + P(0.963225, -0.637488)
        #c7 = z4 + P(-0.206153, 0.372013)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97008, 3)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.593967, -90)
        z2 = z1 + PP(1.0477, -154)
        c3 = z2 + PP(0.349232, -25)
        c4 = z2 + PP(0.267671, 154)
        #z3 = z2 + PP(0.803013, 103)
        z3 = z4 - PP(1.15507, ta + 29)
        c5 = z3 + PP(0.267671, -145)
        #c6 = z3 + PP(0.385024, 34)
        #z4 = z3 + PP(1.15507, -33)
        #c7 = z4 + PP(0.425315, 118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRser(cls, ta=None, **kwargs):
        #M 102.717,280.93 C 107.966,278.483 125.339,274.93 125.339,279.349 125.339,281.039 123.04829,281.29502 122.05034,280.60836 121.42859,280.18056 121.18804,278.90017 122.1006,278.61357 123.19035,278.27132 124.42136,278.69234 125.339,279.349

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95073, 2.10876)
        #z1 = P(7.95073, 0.555658)
        #c2 = P(7.95073, -0.0383091)
        #c3 = P(7.14563, -0.12829)
        #z2 = P(6.79489, 0.113044)
        #c4 = P(6.57637, 0.263398)
        #c5 = P(6.49183, 0.713404)
        #z3 = P(6.81256, 0.814132)
        #c6 = P(7.19556, 0.934419)
        #c7 = P(7.62821, 0.786448)
        z4 = P(7.95073, 0.555658)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95073, 0.555658)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.593967)
        #z2 = z1 + P(-1.15583, -0.442615)
        #c3 = z2 + P(0.350739, -0.241333)
        #c4 = z2 + P(-0.21852, 0.150355)
        #z3 = z2 + P(0.0176644, 0.701089)
        #c5 = z3 + P(-0.320728, -0.100728)
        #c6 = z3 + P(0.383003, 0.120287)
        #z4 = z3 + P(1.13817, -0.258474)
        #c7 = z4 + P(-0.322514, 0.23079)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97012, 3)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.593967, -90)
        z2 = z1 + PP(1.23768, -159)
        c3 = z2 + PP(0.425746, -34)
        c4 = z2 + PP(0.26525, 145)
        #z3 = z2 + PP(0.701311, 88)
        z3 = z4 - PP(1.16715, ta + 24)
        c5 = z3 + PP(0.336174, -162)
        #c6 = z3 + PP(0.401448, 17)
        #z4 = z3 + PP(1.16715, -12)
        #c7 = z4 + PP(0.396584, 144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRsel(cls, ta=None, **kwargs):
        #M 163.762,280.93 C 169.011,278.483 186.384,274.93 186.384,279.349 186.384,281.039 185.74124,281.93836 184.99558,281.69422 184.00882,281.37114 183.24576,279.34541 183.21648,277.34003

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95073, 2.10876)
        #z1 = P(7.95073, 0.555658)
        #c2 = P(7.95073, -0.0383091)
        #c3 = P(7.72482, -0.354398)
        #z2 = P(7.46275, -0.268593)
        #c4 = P(7.11594, -0.155043)
        #c5 = P(6.84776, 0.55692)
        z3 = P(6.83747, 1.26173) + P(0, -0.2)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95073, 0.555658)
        #c1 = z1 + P(0, 1.5531)
        #c2 = z1 + P(0, -0.593967)
        #z2 = z1 + P(-0.487974, -0.824251)
        #c3 = z2 + P(0.26207, -0.0858054)
        #c4 = z2 + P(-0.346807, 0.11355)
        #z3 = z2 + P(-0.625282, 1.53032)
        #c5 = z3 + P(0.0102907, -0.704811)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97012, 3)
        c1 = z1 + PP(1.5531, 90)
        c2 = z1 + PP(0.593967, -90)
        z2 = z1 + PP(0.957866, -120)
        #z2 = z3 - PP(1.65314, ta + 381)
        c3 = z2 + PP(0.275759, -18)
        #c4 = z2 + PP(0.364922, 161)
        #z3 = z2 + PP(1.65314, 112)
        #c5 = z3 + PP(0.704886, -89)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRsw(cls, ta=None, **kwargs):
        #M 47.3414,351.419 C 52.5904,348.972 69.9633,345.419 69.9633,349.837 69.9633,351.528 68.754326,352.76467 67.989201,352.18332 66.852047,351.31931 67.00385,349.80907 67.675087,347.96499

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95069, 2.10876)
        #z1 = P(7.95069, 0.55601)
        #c2 = P(7.95069, -0.0383091)
        #c3 = P(7.52578, -0.472949)
        #z2 = P(7.25687, -0.268628)
        #c4 = P(6.85721, 0.035037)
        #c5 = P(6.91056, 0.565826)
        z3 = P(7.14648, 1.21395)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95069, 0.55601)
        #c1 = z1 + P(0, 1.55275)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-0.693817, -0.824637)
        #c3 = z2 + P(0.268911, -0.204321)
        #c4 = z2 + P(-0.399664, 0.303665)
        #z3 = z2 + P(-0.110398, 1.48257)
        #c5 = z3 + P(-0.235913, -0.64812)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97011, 4)
        c1 = z1 + PP(1.55275, 90)
        c2 = z1 + PP(0.594319, -90)
        z2 = z1 + PP(1.07769, -130)
        #z2 = z3 - PP(1.48668, ta + 384)
        c3 = z2 + PP(0.337728, -37)
        #c4 = z2 + PP(0.50194, 142)
        #z3 = z2 + PP(1.48668, 94)
        #c5 = z3 + PP(0.689721, -110)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRswr(cls, ta=None, **kwargs):
        #M 107.343,351.419 C 112.592,348.972 129.965,345.419 129.965,349.837 129.965,351.528 129.22019,352.25696 128.49392,352.14464 128.00997,352.0698 127.311,349.50717 127.06208,347.86126

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95073, 2.10876)
        #z1 = P(7.95073, 0.55601)
        #c2 = P(7.95073, -0.0383091)
        #c3 = P(7.68895, -0.294509)
        #z2 = P(7.4337, -0.255033)
        #c4 = P(7.26361, -0.22873)
        #c5 = P(7.01795, 0.671932)
        z3 = P(6.93047, 1.2504)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95073, 0.55601)
        #c1 = z1 + P(0, 1.55275)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-0.517026, -0.811043)
        #c3 = z2 + P(0.255255, -0.039476)
        #c4 = z2 + P(-0.170089, 0.0263033)
        #z3 = z2 + P(-0.503234, 1.50544)
        #c5 = z3 + P(0.0874854, -0.578471)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97014, 4)
        c1 = z1 + PP(1.55275, 90)
        c2 = z1 + PP(0.594319, -90)
        z2 = z1 + PP(0.961824, -122)
        #z2 = z3 - PP(1.58732, ta + 369)
        c3 = z2 + PP(0.258289, -8)
        #c4 = z2 + PP(0.172111, 171)
        #z3 = z2 + PP(1.58732, 108)
        #c5 = z3 + PP(0.585049, -81)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRswl(cls, ta=None, **kwargs):
        #M161.322 351.419C166.571 348.972 183.944 345.419 183.944 349.837C183.944 351.528 181.077 352.642 180.539 352.222C179.429 351.323 181.334 350.117 182.679 348.265

        #z0 = P(0, -0)
        #c0 = P(1.84481, 0.860022)
        #c1 = P(7.95073, 2.10876)
        #z1 = P(7.95073, 0.55601)
        #c2 = P(7.95073, -0.0383091)
        #c3 = P(6.94309, -0.429835)
        #z2 = P(6.754, -0.282222)
        #c4 = P(6.36388, 0.0337401)
        #c5 = P(7.03342, 0.457601)
        z3 = P(7.50613, 1.1085)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.84481, 0.860022)
        #z1 = z0 + P(7.95073, 0.55601)
        #c1 = z1 + P(0, 1.55275)
        #c2 = z1 + P(0, -0.594319)
        #z2 = z1 + P(-1.19672, -0.838232)
        #c3 = z2 + P(0.189085, -0.147613)
        #c4 = z2 + P(-0.39012, 0.315962)
        #z3 = z2 + P(0.752124, 1.39073)
        #c5 = z3 + P(-0.472714, -0.650904)

        z0 = P(0, -0)
        c0 = z0 + PP(2.03543, 24)
        z1 = z0 + PP(7.97014, 4)
        c1 = z1 + PP(1.55275, 90)
        c2 = z1 + PP(0.594319, -90)
        z2 = z1 + PP(1.46109, -144)
        #z2 = z3 - PP(1.58108, ta + 366)
        c3 = z2 + PP(0.239881, -37)
        #c4 = z2 + PP(0.502022, 140)
        #z3 = z2 + PP(1.58108, 61)
        #c5 = z3 + PP(0.804446, -125)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRNE(cls, ta=None, **kwargs):
        #M 242.771,107.052 C 248.042,104.705 265.308,101.071 265.308,105.476 265.308,107.284 262.73583,108.0783 261.97612,107.10333 261.20181,106.10962 262.60245,105.43783 264.41445,104.21583 265.48245,103.52283 266.56145,102.84783 267.61645,102.13583

        #z0 = P(0, -0)
        #c0 = P(1.85949, 0.827969)
        #c1 = P(7.95055, 2.10996)
        #z1 = P(7.95055, 0.555978)
        #c2 = P(7.95055, -0.0818444)
        #c3 = P(7.04315, -0.362056)
        #z2 = P(6.77514, -0.0181081)
        #c4 = P(6.50198, 0.332451)
        #c5 = P(6.99609, 0.569443)
        #z3 = P(7.63533, 1.00054)
        #c6 = P(8.01209, 1.24501)
        #c7 = P(8.39274, 1.48314)
        z4 = P(8.76492, 1.73432)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.85949, 0.827969)
        #z1 = z0 + P(7.95055, 0.555978)
        #c1 = z1 + P(0, 1.55399)
        #c2 = z1 + P(0, -0.637822)
        #z2 = z1 + P(-1.17541, -0.574086)
        #c3 = z2 + P(0.268009, -0.343948)
        #c4 = z2 + P(-0.273159, 0.350559)
        #z3 = z2 + P(0.860189, 1.01865)
        #c5 = z3 + P(-0.639233, -0.431094)
        #c6 = z3 + P(0.376767, 0.244475)
        #z4 = z3 + P(1.12959, 0.733778)
        #c7 = z4 + P(-0.372181, -0.251178)

        z0 = P(0, -0)
        c0 = z0 + PP(2.0355, 24)
        z1 = z0 + PP(7.96997, 4)
        c1 = z1 + PP(1.55399, 90)
        c2 = z1 + PP(0.637822, -90)
        z2 = z1 + PP(1.30812, -153)
        c3 = z2 + PP(0.436038, -52)
        c4 = z2 + PP(0.444418, 127)
        z3 = z2 + PP(1.33325, 49)
        #z3 = z4 - PP(1.347, ta + 358)
        c5 = z3 + PP(0.771013, -146)
        c6 = z3 + PP(0.449134, 32)
        z4 = z3 + PP(1.347, 33)
        c7 = z4 + PP(0.449009, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

class CharMin(CharMi):
    def __init__(self, name='min', kana='„Åø„Çì',
                 model='ER8CR1NE1F', head_type='ER',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_ERCRNE()]

class CharMiku(CharMi):
    def __init__(self, name='miku', kana='„Åø„Åè',
                 model='BER8CR1', head_type='BER',
                 tail_type='ERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharMitsu(CharMi):
    def __init__(self, name='mitsu', kana='„Åø„Å§',
                 model='CR1ER8CR1', head_type='CR1ER',
                 tail_type='ERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)
