import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)


class CharRi(WasedaChar):
    def __init__(self, name='ri', kana='り',
                 model='SER8CR1', head_type='SER',
                 tail_type='SERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.head_ligature = {'NER'}

    @classmethod
    def path_SERCR(cls, ta=None, **kwargs):
        #M 0,0 C 5.381393,3.768097 12.149109,10.803558 12.149063,16.518356 12.149048,19.552231 7.714325,18.457382 9.500244,16.958862 10.370499,16.228653 11.161994,15.36844 11.892204,14.498186

        #z0 = P(0, 0)
        #c0 = P(1.89134, -1.32433)
        #c1 = P(4.26992, -3.79702)
        #z1 = P(4.26991, -5.80554)
        #c2 = P(4.2699, -6.87182)
        #c3 = P(2.71128, -6.48703)
        #z2 = P(3.33895, -5.96036)
        #c4 = P(3.64481, -5.70372)
        #c5 = P(3.92299, -5.40139)
        #z3 = P(4.17963, -5.09553)

        #z0 = P(0, 0)
        #c0 = z0 + P(1.89134, -1.32433)
        #z1 = z0 + P(4.26991, -5.80554)
        #c1 = z1 + P(1.61672e-05, 2.00852)
        #c2 = z1 + P(-5.2719e-06, -1.06629)
        #z2 = z1 + P(-0.930954, -0.15482)
        #c3 = z2 + P(-0.627679, -0.52667)
        #c4 = z2 + P(0.30586, 0.256639)
        #z3 = z2 + P(0.840678, 0.864829)
        #c5 = z3 + P(-0.25664, -0.305859)

        z0 = P(0, 0)
        c0 = z0 + PP(2.30891, -35)
        z1 = z0 + PP(7.20669, -53)
        c1 = z1 + PP(2.00852, 89)
        c2 = z1 + PP(1.06629, -90)
        z2 = z1 + PP(0.943739, -170)
        #z2 = z3 - PP(1.2061, ta + 354)
        c3 = z2 + PP(0.819367, -140)
        c4 = z2 + PP(0.399267, 39)
        z3 = z2 + PP(1.2061, 45)
        c5 = z3 + PP(0.399267, -129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_nerSERCR(cls, ta=None, **kwargs):
        #M 89.2057,345.336 C 95.146008,345.336 101.599,357.2781 101.5,362.9711 101.5,365.9931 97.086,364.9281 98.8653,363.4351 99.7448,362.7231 100.571,361.8971 101.283,361.0181

        #z0 = P(0, -0)
        #c0 = P(2.08778, -0)
        #c1 = P(4.35575, -4.19717)
        #z1 = P(4.32095, -6.19803)
        #c2 = P(4.32095, -7.26014)
        #c3 = P(2.76961, -6.88584)
        #z2 = P(3.39496, -6.36111)
        #c4 = P(3.70407, -6.11087)
        #c5 = P(3.99445, -5.82056)
        z3 = P(4.24469, -5.51163)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.08778, 0)
        #z1 = z0 + P(4.32095, -6.19803)
        #c1 = z1 + P(0.0347945, 2.00086)
        #c2 = z1 + P(0, -1.06211)
        #z2 = z1 + P(-0.925991, -0.163077)
        #c3 = z2 + P(-0.625353, -0.52473)
        #c4 = z2 + P(0.309109, 0.250239)
        #z3 = z2 + P(0.849725, 0.849479)
        #c5 = z3 + P(-0.250239, -0.308933)

        z0 = P(0, -0)
        c0 = z0 + PP(2.08778, 0)
        z1 = z0 + PP(7.55554, -55)
        c1 = z1 + PP(2.00116, 89)
        c2 = z1 + PP(1.06211, -90)
        z2 = z1 + PP(0.940242, -170)
        #z2 = z3 - PP(1.20152, ta + 353)
        c3 = z2 + PP(0.816338, -140)
        c4 = z2 + PP(0.397704, 38)
        #z3 = z2 + PP(1.20152, 44)
        c5 = z3 + PP(0.397567, -129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SERCRe(cls, ta=None, **kwargs):
        #M 47.3414,129.732 C 52.7027,133.486 59.700438,140.3535 59.6355,146.047 59.601034,149.0688 56.010776,146.86093 55.833192,145.59707 55.652882,144.3138 57.121839,144.094 59.4185,144.094

        #z0 = P(0, -0)
        #c0 = P(1.88428, -1.31938)
        #c1 = P(4.34371, -3.73303)
        #z1 = P(4.32088, -5.73407)
        #c2 = P(4.30877, -6.79611)
        #c3 = P(3.04694, -6.02013)
        #z2 = P(2.98452, -5.57594)
        #c4 = P(2.92115, -5.12492)
        #c5 = P(3.43743, -5.04767)
        z3 = P(4.24462, -5.04767)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88428, -1.31938)
        #z1 = z0 + P(4.32088, -5.73407)
        #c1 = z1 + P(0.0228231, 2.00104)
        #c2 = z1 + P(-0.0121134, -1.06204)
        #z2 = z1 + P(-1.33636, 0.158132)
        #c3 = z2 + P(0.0624137, -0.444196)
        #c4 = z2 + P(-0.0633717, 0.451018)
        #z3 = z2 + P(1.26009, 0.528269)
        #c5 = z3 + P(-0.807184, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30028, -34)
        z1 = z0 + PP(7.1798, -53)
        c1 = z1 + PP(2.00117, 89)
        c2 = z1 + PP(1.06211, -90)
        #z2 = z1 + PP(1.34568, 173)
        z2 = z3 - PP(1.36635, ta + 22)
        c3 = z2 + PP(0.448559, -82)
        #c4 = z2 + PP(0.455448, 97)
        #z3 = z2 + PP(1.36635, 22)
        #c5 = z3 + PP(0.807184, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRe(cls, ta=None, **kwargs):
        #M 140.971,345.336 C 146.93199,345.336 153.16269,357.93698 153.06369,363.60898 153.06369,366.61898 149.43369,364.37298 149.25669,363.11398 149.05169,361.65798 151.07369,361.66298 152.84769,361.66298

        #z0 = P(0, -0)
        #c0 = P(2.09505, -0)
        #c1 = P(4.28489, -4.42874)
        #z1 = P(4.2501, -6.42222)
        #c2 = P(4.2501, -7.48011)
        #c3 = P(2.9743, -6.69073)
        #z2 = P(2.91209, -6.24825)
        #c4 = P(2.84004, -5.73652)
        #c5 = P(3.55069, -5.73828)
        z3 = P(4.17418, -5.73828)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.09505, 0)
        #z1 = z0 + P(4.2501, -6.42222)
        #c1 = z1 + P(0.0347945, 1.99348)
        #c2 = z1 + P(0, -1.05789)
        #z2 = z1 + P(-1.33801, 0.173973)
        #c3 = z2 + P(0.0622084, -0.442488)
        #c4 = z2 + P(-0.0720493, 0.511726)
        #z3 = z2 + P(1.26209, 0.509968)
        #c5 = z3 + P(-0.62349, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.09505, 0)
        z1 = z0 + PP(7.70118, -56)
        c1 = z1 + PP(1.99378, 89)
        c2 = z1 + PP(1.05789, -90)
        #z2 = z1 + PP(1.34927, 172)
        z2 = z3 - PP(1.36123, ta + 22)
        c3 = z2 + PP(0.446839, -81)
        #c4 = z2 + PP(0.516773, 98)
        #z3 = z2 + PP(1.36123, 22)
        #c5 = z3 + PP(0.62349, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRer(cls, ta=None, **kwargs):
        #M 210.971,435.53 C 216.333,439.284 223.365,446.152 223.265,451.845 223.265,454.867 220.66541,453.28837 220.22481,452.35977 219.689,451.23054 222.12769,450.25021 223.048,449.892

        #z0 = P(0, -0)
        #c0 = P(1.88453, -1.31938)
        #c1 = P(4.35599, -3.73321)
        #z1 = P(4.32085, -5.73407)
        #c2 = P(4.32085, -6.79618)
        #c3 = P(3.4072, -6.24135)
        #z2 = P(3.25234, -5.91499)
        #c4 = P(3.06403, -5.51811)
        #c5 = P(3.92113, -5.17356)
        z3 = P(4.24458, -5.04767)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88453, -1.31938)
        #z1 = z0 + P(4.32085, -5.73407)
        #c1 = z1 + P(0.035146, 2.00086)
        #c2 = z1 + P(0, -1.06211)
        #z2 = z1 + P(-1.0685, -0.180921)
        #c3 = z2 + P(0.154853, -0.326366)
        #c4 = z2 + P(-0.188316, 0.396879)
        #z3 = z2 + P(0.992238, 0.867322)
        #c5 = z3 + P(-0.323452, -0.125896)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30048, -34)
        z1 = z0 + PP(7.17978, -53)
        c1 = z1 + PP(2.00117, 88)
        c2 = z1 + PP(1.06211, -90)
        #z2 = z1 + PP(1.08371, -170)
        z2 = z3 - PP(1.31787, ta + 379)
        c3 = z2 + PP(0.36124, -64)
        #c4 = z2 + PP(0.43929, 115)
        #z3 = z2 + PP(1.31787, 41)
        #c5 = z3 + PP(0.34709, -158)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRer(cls, ta=None, **kwargs):
        #M 278.426,345.336 C 284.16805,345.336 289.78486,357.47306 289.58686,363.14306 289.58686,366.15306 287.36886,364.93706 286.91986,364.01606 286.30286,362.75206 288.00886,361.98306 289.37086,361.19706

        #z0 = P(0, -0)
        #c0 = P(2.0181, -0)
        #c1 = P(3.99218, -4.26569)
        #z1 = P(3.92259, -6.25847)
        #c2 = P(3.92259, -7.31636)
        #c3 = P(3.14306, -6.88899)
        #z2 = P(2.98525, -6.56529)
        #c4 = P(2.7684, -6.12105)
        #c5 = P(3.36799, -5.85077)
        z3 = P(3.84668, -5.57453)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.0181, 0)
        #z1 = z0 + P(3.92259, -6.25847)
        #c1 = z1 + P(0.0695891, 1.99278)
        #c2 = z1 + P(0, -1.05789)
        #z2 = z1 + P(-0.937343, -0.306824)
        #c3 = z2 + P(0.157805, -0.323695)
        #c4 = z2 + P(-0.216851, 0.444245)
        #z3 = z2 + P(0.861428, 0.990765)
        #c5 = z3 + P(-0.478688, -0.276247)

        z0 = P(0, -0)
        c0 = z0 + PP(2.0181, 0)
        z1 = z0 + PP(7.38615, -57)
        c1 = z1 + PP(1.99399, 88)
        c2 = z1 + PP(1.05789, -90)
        #z2 = z1 + PP(0.986283, -161)
        z2 = z3 - PP(1.31289, ta + 378)
        c3 = z2 + PP(0.360112, -64)
        #c4 = z2 + PP(0.494346, 116)
        #z3 = z2 + PP(1.31289, 48)
        #c5 = z3 + PP(0.55268, -150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRel(cls, ta=None, **kwargs):
        #M 131.411,275.547 C 136.772,279.301 143.805,286.169 143.705,291.862 143.705,294.884 140.29756,290.53937 140.84252,289.4065 141.23162,288.59763 142.16671,289.49327 143.488,289.909

        #z0 = P(0, -0)
        #c0 = P(1.88418, -1.31938)
        #c1 = P(4.35599, -3.73321)
        #z1 = P(4.32085, -5.73407)
        #c2 = P(4.32085, -6.79618)
        #c3 = P(3.12327, -5.26922)
        #z2 = P(3.3148, -4.87106)
        #c4 = P(3.45155, -4.58677)
        #c5 = P(3.7802, -4.90155)
        z3 = P(4.24458, -5.04767)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88418, -1.31938)
        #z1 = z0 + P(4.32085, -5.73407)
        #c1 = z1 + P(0.035146, 2.00086)
        #c2 = z1 + P(0, -1.06211)
        #z2 = z1 + P(-1.00605, 0.86301)
        #c3 = z2 + P(-0.191532, -0.398158)
        #c4 = z2 + P(0.136753, 0.284285)
        #z3 = z2 + P(0.92978, -0.176609)
        #c5 = z3 + P(-0.46438, 0.146112)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30019, -35)
        z1 = z0 + PP(7.17978, -53)
        c1 = z1 + PP(2.00117, 88)
        c2 = z1 + PP(1.06211, -90)
        #z2 = z1 + PP(1.32549, 139)
        z2 = z3 - PP(0.946405, ta + 8)
        c3 = z2 + PP(0.441831, -115)
        #c4 = z2 + PP(0.315467, 64)
        #z3 = z2 + PP(0.946405, -10)
        #c5 = z3 + PP(0.486824, 162)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRel(cls, ta=None, **kwargs):
        #M 215.368,345.336 C 221.69029,345.336 227.03747,357.55072 226.83947,363.22072 226.83947,366.23072 223.57247,361.49272 224.10247,360.35772 224.60447,359.28072 225.61647,360.73972 226.62347,361.27472

        #z0 = P(0, -0)
        #c0 = P(2.22203, -0)
        #c1 = P(4.10135, -4.29298)
        #z1 = P(4.03176, -6.28576)
        #c2 = P(4.03176, -7.34366)
        #c3 = P(2.88354, -5.67844)
        #z2 = P(3.06982, -5.27953)
        #c4 = P(3.24625, -4.90101)
        #c5 = P(3.60193, -5.41379)
        z3 = P(3.95585, -5.60182)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.22203, 0)
        #z1 = z0 + P(4.03176, -6.28576)
        #c1 = z1 + P(0.0695891, 1.99278)
        #c2 = z1 + P(0, -1.05789)
        #z2 = z1 + P(-0.961946, 1.00623)
        #c3 = z2 + P(-0.186274, -0.398907)
        #c4 = z2 + P(0.176433, 0.378522)
        #z3 = z2 + P(0.88603, -0.322289)
        #c5 = z3 + P(-0.35392, 0.188031)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22203, 0)
        z1 = z0 + PP(7.46766, -57)
        c1 = z1 + PP(1.99399, 88)
        c2 = z1 + PP(1.05789, -90)
        #z2 = z1 + PP(1.39206, 133)
        z2 = z3 - PP(0.942825, ta + 9)
        c3 = z2 + PP(0.440255, -115)
        #c4 = z2 + PP(0.417621, 65)
        #z3 = z2 + PP(0.942825, -19)
        #c5 = z3 + PP(0.400768, 152)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRne(cls, ta=None, **kwargs):
        #M 213.839,129.732 C 219.201,133.486 226.233,140.354 226.134,146.047 226.134,149.069 221.61018,147.50979 223.38918,146.01679 224.26918,145.30479 224.98435,144.69844 225.88854,144.01163

        #z0 = P(0, -0)
        #c0 = P(1.88453, -1.31938)
        #c1 = P(4.35599, -3.73321)
        #z1 = P(4.3212, -5.73407)
        #c2 = P(4.3212, -6.79618)
        #c3 = P(2.73126, -6.24818)
        #z2 = P(3.35651, -5.72345)
        #c4 = P(3.66579, -5.47321)
        #c5 = P(3.91714, -5.2601)
        z3 = P(4.23493, -5.01872)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88453, -1.31938)
        #z1 = z0 + P(4.3212, -5.73407)
        #c1 = z1 + P(0.0347945, 2.00086)
        #c2 = z1 + P(0, -1.06211)
        #z2 = z1 + P(-0.964694, 0.0106176)
        #c3 = z2 + P(-0.625247, -0.52473)
        #c4 = z2 + P(0.309285, 0.250239)
        #z3 = z2 + P(0.878425, 0.704733)
        #c5 = z3 + P(-0.317787, -0.241386)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30048, -34)
        z1 = z0 + PP(7.17999, -52)
        c1 = z1 + PP(2.00116, 89)
        c2 = z1 + PP(1.06211, -90)
        #z2 = z1 + PP(0.964753, 179)
        z2 = z3 - PP(1.12618, ta + 360)
        c3 = z2 + PP(0.816257, -139)
        #c4 = z2 + PP(0.39784, 38)
        #z3 = z2 + PP(1.12618, 38)
        #c5 = z3 + PP(0.399068, -142)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRne(cls, ta=None, **kwargs):
        #M 58.68,396.698 C 64.963727,396.698 69.753024,408.70997 69.653624,414.40297 69.653624,417.42497 65.318525,416.44892 67.019124,414.86697 67.845131,414.0986 68.661036,413.11964 69.512233,412.31014

        #z0 = P(0, -0)
        #c0 = P(2.20848, -0)
        #c1 = P(3.89172, -4.22173)
        #z1 = P(3.85679, -6.22259)
        #c2 = P(3.85679, -7.2847)
        #c3 = P(2.33318, -6.94166)
        #z2 = P(2.93087, -6.38566)
        #c4 = P(3.22118, -6.11561)
        #c5 = P(3.50793, -5.77155)
        z3 = P(3.8071, -5.48704)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.20848, 0)
        #z1 = z0 + P(3.85679, -6.22259)
        #c1 = z1 + P(0.0349351, 2.00086)
        #c2 = z1 + P(0, -1.06211)
        #z2 = z1 + P(-0.925921, -0.163077)
        #c3 = z2 + P(-0.597692, -0.555992)
        #c4 = z2 + P(0.290308, 0.270051)
        #z3 = z2 + P(0.876228, 0.898623)
        #c5 = z3 + P(-0.299162, -0.284507)

        z0 = P(0, -0)
        c0 = z0 + PP(2.20848, 0)
        z1 = z0 + PP(7.32089, -58)
        c1 = z1 + PP(2.00117, 88)
        c2 = z1 + PP(1.06211, -90)
        #z2 = z1 + PP(0.940172, -170)
        z2 = z3 - PP(1.25511, ta + 361)
        c3 = z2 + PP(0.816311, -137)
        #c4 = z2 + PP(0.396493, 42)
        #z3 = z2 + PP(1.25511, 45)
        #c5 = z3 + PP(0.412846, -136)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRner(cls, ta=None, **kwargs):
        #M 96.9833,187.072 C 102.389,190.719 109.429,197.657 109.231,203.326 109.231,206.337 107.49703,205.20988 106.85828,204.58292 105.83044,203.57408 107.53128,202.00585 108.80928,200.72785

        #z0 = P(0, -0)
        #c0 = P(1.90701, -1.28658)
        #c1 = P(4.39057, -3.73415)
        #z1 = P(4.32072, -5.73405)
        #c2 = P(4.32072, -6.79626)
        #c3 = P(3.70901, -6.39864)
        #z2 = P(3.48367, -6.17746)
        #c4 = P(3.12107, -5.82157)
        #c5 = P(3.72109, -5.26833)
        z3 = P(4.17194, -4.81748)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.90701, -1.28658)
        #z1 = z0 + P(4.32072, -5.73405)
        #c1 = z1 + P(0.06985, 1.9999)
        #c2 = z1 + P(0, -1.06221)
        #z2 = z1 + P(-0.837043, -0.443413)
        #c3 = z2 + P(0.225337, -0.221178)
        #c4 = z2 + P(-0.362599, 0.355896)
        #z3 = z2 + P(0.688269, 1.35998)
        #c5 = z3 + P(-0.45085, -0.45085)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30043, -34)
        z1 = z0 + PP(7.17969, -53)
        c1 = z1 + PP(2.00112, 87)
        c2 = z1 + PP(1.06221, -90)
        #z2 = z1 + PP(0.947236, -152)
        z2 = z3 - PP(1.52423, ta + 377)
        c3 = z2 + PP(0.315747, -44)
        #c4 = z2 + PP(0.508075, 135)
        #z3 = z2 + PP(1.52423, 63)
        #c5 = z3 + PP(0.637598, -134)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRner(cls, ta=None, **kwargs):
        #M 119.733,396.698 C 125.84755,396.698 130.99957,408.659 130.80157,414.328 130.80157,417.339 129.08857,416.078 128.88757,415.495 128.33457,413.888 129.25554,412.28986 130.06357,410.78

        #z0 = P(0, -0)
        #c0 = P(2.14902, -0)
        #c1 = P(3.95975, -4.20381)
        #z1 = P(3.89016, -6.19624)
        #c2 = P(3.89016, -7.25448)
        #c3 = P(3.28811, -6.81129)
        #z2 = P(3.21746, -6.60639)
        #c4 = P(3.02311, -6.0416)
        #c5 = P(3.34679, -5.47991)
        z3 = P(3.63078, -4.94926)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.14902, 0)
        #z1 = z0 + P(3.89016, -6.19624)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.05825)
        #z2 = z1 + P(-0.672694, -0.410154)
        #c3 = z2 + P(0.0706434, -0.204901)
        #c4 = z2 + P(-0.194357, 0.564796)
        #z3 = z2 + P(0.413317, 1.65713)
        #c5 = z3 + P(-0.28399, -0.530655)

        z0 = P(0, -0)
        c0 = z0 + PP(2.14902, 0)
        z1 = z0 + PP(7.31619, -57)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.05825, -90)
        #z2 = z1 + PP(0.787873, -148)
        z2 = z3 - PP(1.7079, ta + 373)
        c3 = z2 + PP(0.216737, -70)
        #c4 = z2 + PP(0.597302, 108)
        #z3 = z2 + PP(1.7079, 75)
        #c5 = z3 + PP(0.601868, -118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRnel(cls, ta=None, **kwargs):
        #M 223.273,129.732 C 228.634,133.486 235.63122,140.45037 235.567,146.047 235.53233,149.0688 232.93871,148.03472 232.47602,147.06951 231.95522,145.98307 234.57773,145.48948 235.47939,144.85135

        #z0 = P(0, -0)
        #c0 = P(1.88418, -1.31938)
        #c1 = P(4.34342, -3.76708)
        #z1 = P(4.32085, -5.73407)
        #c2 = P(4.30866, -6.79611)
        #c3 = P(3.39711, -6.43267)
        #z2 = P(3.23449, -6.09344)
        #c4 = P(3.05145, -5.7116)
        #c5 = P(3.97316, -5.53812)
        z3 = P(4.29006, -5.31384)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88418, -1.31938)
        #z1 = z0 + P(4.32085, -5.73407)
        #c1 = z1 + P(0.0225708, 1.96699)
        #c2 = z1 + P(-0.0121851, -1.06204)
        #z2 = z1 + P(-1.08636, -0.359371)
        #c3 = z2 + P(0.162617, -0.339233)
        #c4 = z2 + P(-0.18304, 0.38184)
        #z3 = z2 + P(1.05556, 0.779594)
        #c5 = z3 + P(-0.316897, -0.224277)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30019, -35)
        z1 = z0 + PP(7.17978, -53)
        c1 = z1 + PP(1.96712, 89)
        c2 = z1 + PP(1.06211, -90)
        #z2 = z1 + PP(1.14425, -161)
        z2 = z3 - PP(1.31224, ta + 360)
        c3 = z2 + PP(0.376195, -64)
        #c4 = z2 + PP(0.423445, 115)
        #z3 = z2 + PP(1.31224, 36)
        #c5 = z3 + PP(0.388232, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRnel(cls, ta=None, **kwargs):
        #M 188.303,396.698 C 194.04069,396.698 199.66514,409.24443 199.56814,414.81943 199.56814,417.83043 196.30914,415.36043 195.84214,414.40143 194.91414,412.49943 197.97314,413.94843 199.48014,413.62843

        #z0 = P(0, -0)
        #c0 = P(2.01657, -0)
        #c1 = P(3.99334, -4.40957)
        #z1 = P(3.95924, -6.36896)
        #c2 = P(3.95924, -7.4272)
        #c3 = P(2.81384, -6.5591)
        #z2 = P(2.64971, -6.22205)
        #c4 = P(2.32355, -5.55357)
        #c5 = P(3.39867, -6.06283)
        z3 = P(3.92832, -5.95037)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.01657, 0)
        #z1 = z0 + P(3.95924, -6.36896)
        #c1 = z1 + P(0.0340916, 1.95939)
        #c2 = z1 + P(0, -1.05825)
        #z2 = z1 + P(-1.30954, 0.14691)
        #c3 = z2 + P(0.164132, -0.33705)
        #c4 = z2 + P(-0.326155, 0.668477)
        #z3 = z2 + P(1.27861, 0.271678)
        #c5 = z3 + P(-0.52965, -0.112467)

        z0 = P(0, -0)
        c0 = z0 + PP(2.01657, 0)
        z1 = z0 + PP(7.49928, -58)
        c1 = z1 + PP(1.95969, 89)
        c2 = z1 + PP(1.05825, -90)
        #z2 = z1 + PP(1.31775, 173)
        z2 = z3 - PP(1.30716, ta + 359)
        c3 = z2 + PP(0.374889, -64)
        #c4 = z2 + PP(0.7438, 116)
        #z3 = z2 + PP(1.30716, 11)
        #c5 = z3 + PP(0.541459, -168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRs(cls, ta=None, **kwargs):
        #M 250.72,129.732 C 256.126,133.378 263.167,140.317 262.969,145.986 262.969,148.997 259.84431,148.5549 259.69348,147.21623 259.44843,145.04133 260.58739,143.79936 261.27374,144.33854 262.19446,145.06184 262.12649,146.593 262.12649,147.746

        #z0 = P(0, -0)
        #c0 = P(1.90712, -1.28623)
        #c1 = P(4.39102, -3.73415)
        #z1 = P(4.32117, -5.73405)
        #c2 = P(4.32117, -6.79626)
        #c3 = P(3.21885, -6.6403)
        #z2 = P(3.16564, -6.16805)
        #c4 = P(3.0792, -5.40079)
        #c5 = P(3.481, -4.96265)
        #z3 = P(3.72312, -5.15286)
        #c6 = P(4.04793, -5.40803)
        #c7 = P(4.02396, -5.94819)
        z4 = P(4.02396, -6.35494)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.90712, -1.28623)
        #z1 = z0 + P(4.32117, -5.73405)
        #c1 = z1 + P(0.06985, 1.9999)
        #c2 = z1 + P(0, -1.06221)
        #z2 = z1 + P(-1.15553, -0.433998)
        #c3 = z2 + P(0.0532095, -0.472253)
        #c4 = z2 + P(-0.0864482, 0.767256)
        #z3 = z2 + P(0.557481, 1.01519)
        #c5 = z3 + P(-0.242129, 0.190211)
        #c6 = z3 + P(0.32481, -0.255164)
        #z4 = z3 + P(0.300831, -1.20208)
        #c7 = z4 + P(0, 0.406753)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30032, -33)
        z1 = z0 + PP(7.17996, -52)
        c1 = z1 + PP(2.00112, 87)
        c2 = z1 + PP(1.06221, -90)
        z2 = z1 + PP(1.23434, -159)
        c3 = z2 + PP(0.475241, -83)
        c4 = z2 + PP(0.772111, 96)
        #z3 = z2 + PP(1.15818, 61)
        z3 = z4 - PP(1.23915, ta + 15)
        c5 = z3 + PP(0.307907, 141)
        #c6 = z3 + PP(0.41305, -38)
        #z4 = z3 + PP(1.23915, -75)
        #c7 = z4 + PP(0.406753, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRs(cls, ta=None, **kwargs):
        #M 184.288,457.933 C 190.40549,457.933 195.69152,469.90797 195.49352,475.57697 195.49352,478.58797 192.37653,477.52497 191.74153,476.50797 191.29653,475.76697 192.93002,473.27649 193.76902,473.48649 194.82902,473.75049 194.45252,476.18497 194.45252,477.33697

        #z0 = P(0, -0)
        #c0 = P(2.15005, -0)
        #c1 = P(4.00788, -4.20872)
        #z1 = P(3.93829, -6.20115)
        #c2 = P(3.93829, -7.25939)
        #c3 = P(2.84279, -6.88579)
        #z2 = P(2.61962, -6.52836)
        #c4 = P(2.46322, -6.26792)
        #c5 = P(3.03732, -5.39262)
        #z3 = P(3.3322, -5.46643)
        #c6 = P(3.70475, -5.55921)
        #c7 = P(3.57242, -6.41484)
        z4 = P(3.57242, -6.81972)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.15005, 0)
        #z1 = z0 + P(3.93829, -6.20115)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.05825)
        #z2 = z1 + P(-1.31867, -0.327209)
        #c3 = z2 + P(0.223177, -0.357435)
        #c4 = z2 + P(-0.1564, 0.260432)
        #z3 = z2 + P(0.712581, 1.06193)
        #c5 = z3 + P(-0.294875, 0.0738066)
        #c6 = z3 + P(0.372547, -0.0927854)
        #z4 = z3 + P(0.240223, -1.35329)
        #c7 = z4 + P(0, 0.404882)

        z0 = P(0, -0)
        c0 = z0 + PP(2.15005, 0)
        z1 = z0 + PP(7.34604, -57)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.05825, -90)
        z2 = z1 + PP(1.35866, -166)
        c3 = z2 + PP(0.421388, -58)
        c4 = z2 + PP(0.303785, 120)
        #z3 = z2 + PP(1.27885, 56)
        z3 = z4 - PP(1.37444, ta + 11)
        c5 = z3 + PP(0.303971, 165)
        #c6 = z3 + PP(0.383928, -13)
        #z4 = z3 + PP(1.37444, -79)
        #c7 = z4 + PP(0.404882, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRsl(cls, ta=None, **kwargs):
        #M 127.324,276.548 C 132.685,280.302 139.717,287.17 139.618,292.863 139.618,295.886 138.45411,295.05783 138.02625,294.50852 137.21364,293.46526 138.27913,290.43058 138.9163,289.40136

        #z0 = P(0, -0)
        #c0 = P(1.88418, -1.31938)
        #c1 = P(4.35564, -3.73321)
        #z1 = P(4.32085, -5.73407)
        #c2 = P(4.32085, -6.79653)
        #c3 = P(3.91179, -6.50546)
        #z2 = P(3.76141, -6.3124)
        #c4 = P(3.47581, -5.94574)
        #c5 = P(3.85029, -4.87917)
        z3 = P(4.07423, -4.51744)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88418, -1.31938)
        #z1 = z0 + P(4.32085, -5.73407)
        #c1 = z1 + P(0.0347945, 2.00086)
        #c2 = z1 + P(0, -1.06246)
        #z2 = z1 + P(-0.559436, -0.578334)
        #c3 = z2 + P(0.150376, -0.19306)
        #c4 = z2 + P(-0.2856, 0.366664)
        #z3 = z2 + P(0.312817, 1.79496)
        #c5 = z3 + P(-0.22394, -0.36173)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30019, -35)
        z1 = z0 + PP(7.17978, -53)
        c1 = z1 + PP(2.00116, 89)
        c2 = z1 + PP(1.06246, -90)
        z2 = z1 + PP(0.804636, -134)
        #z2 = z3 - PP(1.82202, ta + 381)
        c3 = z2 + PP(0.244714, -52)
        #c4 = z2 + PP(0.464769, 127)
        #z3 = z2 + PP(1.82202, 80)
        #c5 = z3 + PP(0.425438, -121)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_nerSERCRsl(cls, ta=None, **kwargs):
        #M 286.947,457.933 C 293.11341,457.933 298.28034,470.04092 298.18134,475.73292 298.18134,478.75592 296.97347,477.35956 296.607,476.83432 295.83667,475.73026 297.02788,472.98826 297.73988,472.10826

        #z0 = P(0, -0)
        #c0 = P(2.16725, -0)
        #c1 = P(3.98321, -4.25545)
        #z1 = P(3.94842, -6.25596)
        #c2 = P(3.94842, -7.31842)
        #c3 = P(3.5239, -6.82766)
        #z2 = P(3.3951, -6.64306)
        #c4 = P(3.12436, -6.25502)
        #c5 = P(3.54302, -5.29132)
        z3 = P(3.79326, -4.98204)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.16725, 0)
        #z1 = z0 + P(3.94842, -6.25596)
        #c1 = z1 + P(0.0347945, 2.00051)
        #c2 = z1 + P(0, -1.06246)
        #z2 = z1 + P(-0.553317, -0.387098)
        #c3 = z2 + P(0.1288, -0.184601)
        #c4 = z2 + P(-0.27074, 0.388033)
        #z3 = z2 + P(0.398162, 1.66102)
        #c5 = z3 + P(-0.250239, -0.309285)

        z0 = P(0, -0)
        c0 = z0 + PP(2.16725, 0)
        z1 = z0 + PP(7.39777, -57)
        c1 = z1 + PP(2.00081, 89)
        c2 = z1 + PP(1.06246, -90)
        z2 = z1 + PP(0.675281, -145)
        #z2 = z3 - PP(1.70808, ta + 384)
        c3 = z2 + PP(0.225093, -55)
        #c4 = z2 + PP(0.473149, 124)
        #z3 = z2 + PP(1.70808, 76)
        #c5 = z3 + PP(0.39784, -128)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_SERCRsr(cls, ta=None, **kwargs):
        #M 86.8972,276.548 C 92.2585,280.302 99.2907,287.17 99.1913,292.863 99.1913,294.34435 98.156811,294.94682 97.259822,294.79281 96.326634,294.63258 95.325636,292.85679 96.035172,292.22983 96.877351,291.48567 97.768724,292.69468 98.875192,294.04688

        #z0 = P(0, -0)
        #c0 = P(1.88428, -1.31938)
        #c1 = P(4.35582, -3.73321)
        #z1 = P(4.32088, -5.73407)
        #c2 = P(4.32088, -6.2547)
        #c3 = P(3.9573, -6.46645)
        #z2 = P(3.64205, -6.41232)
        #c4 = P(3.31407, -6.356)
        #c5 = P(2.96226, -5.73189)
        #z3 = P(3.21163, -5.51153)
        #c6 = P(3.50762, -5.24999)
        #c7 = P(3.8209, -5.67491)
        z4 = P(4.20978, -6.15015)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88428, -1.31938)
        #z1 = z0 + P(4.32088, -5.73407)
        #c1 = z1 + P(0.0349351, 2.00086)
        #c2 = z1 + P(0, -0.520635)
        #z2 = z1 + P(-0.678837, -0.678251)
        #c3 = z2 + P(0.315256, -0.0541283)
        #c4 = z2 + P(-0.327978, 0.0563144)
        #z3 = z2 + P(-0.430415, 0.900785)
        #c5 = z3 + P(-0.249373, -0.220351)
        #c6 = z3 + P(0.295992, 0.261542)
        #z4 = z3 + P(0.998153, -0.63862)
        #c7 = z4 + P(-0.388879, 0.475244)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30028, -34)
        z1 = z0 + PP(7.1798, -53)
        c1 = z1 + PP(2.00117, 88)
        c2 = z1 + PP(0.520635, -90)
        z2 = z1 + PP(0.959606, -135)
        c3 = z2 + PP(0.319869, -9)
        c4 = z2 + PP(0.332778, 170)
        #z3 = z2 + PP(0.998334, 115)
        z3 = z4 - PP(1.18497, ta + 19)
        c5 = z3 + PP(0.332779, -138)
        #c6 = z3 + PP(0.394988, 41)
        #z4 = z3 + PP(1.18497, -32)
        #c7 = z4 + PP(0.614072, 129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRsr(cls, ta=None, **kwargs):
        #M 235.182,457.933 C 241.10165,457.933 246.53352,469.87648 246.43452,475.56848 246.43452,478.59148 242.63433,477.91052 241.71456,476.58947 241.2727,475.95485 242.19409,474.72912 242.9614,474.63314 244.19692,474.47861 244.67353,475.09419 245.68305,477.19167

        #z0 = P(0, -0)
        #c0 = P(2.08052, -0)
        #c1 = P(3.9896, -4.19765)
        #z1 = P(3.95481, -6.19816)
        #c2 = P(3.95481, -7.26063)
        #c3 = P(2.61919, -7.0213)
        #z2 = P(2.29593, -6.557)
        #c4 = P(2.14064, -6.33396)
        #c5 = P(2.46447, -5.90316)
        #z3 = P(2.73415, -5.86943)
        #c6 = P(3.16838, -5.81512)
        #c7 = P(3.33589, -6.03147)
        z4 = P(3.6907, -6.76865)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.08052, 0)
        #z1 = z0 + P(3.95481, -6.19816)
        #c1 = z1 + P(0.0347945, 2.00051)
        #c2 = z1 + P(0, -1.06246)
        #z2 = z1 + P(-1.65888, -0.358837)
        #c3 = z2 + P(0.323262, -0.464296)
        #c4 = z2 + P(-0.155296, 0.223043)
        #z3 = z2 + P(0.438214, 0.687572)
        #c5 = z3 + P(-0.269679, -0.0337331)
        #c6 = z3 + P(0.434236, 0.0543111)
        #z4 = z3 + P(0.956551, -0.899221)
        #c7 = z4 + P(-0.354806, 0.73718)

        z0 = P(0, -0)
        c0 = z0 + PP(2.08052, 0)
        z1 = z0 + PP(7.3524, -57)
        c1 = z1 + PP(2.00081, 89)
        c2 = z1 + PP(1.06246, -90)
        z2 = z1 + PP(1.69724, -167)
        c3 = z2 + PP(0.565747, -55)
        c4 = z2 + PP(0.271782, 124)
        #z3 = z2 + PP(0.815344, 57)
        z3 = z4 - PP(1.31285, ta + 22)
        c5 = z3 + PP(0.27178, -172)
        #c6 = z3 + PP(0.437619, 7)
        #z4 = z3 + PP(1.31285, -43)
        #c7 = z4 + PP(0.818121, 115)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRse(cls, ta=None, **kwargs):
        #M 152.929,184.555 C 158.29,188.309 165.322,195.177 165.223,200.87 165.223,202.3221 163.80761,203.05839 162.84818,202.7464 161.99455,202.46882 161.37976,200.65932 162.12128,200.15348 163.03149,199.53256 163.41565,199.70259 164.75909,202.14551

        #z0 = P(0, -0)
        #c0 = P(1.88418, -1.31938)
        #c1 = P(4.35564, -3.73321)
        #z1 = P(4.32085, -5.73407)
        #c2 = P(4.32085, -6.24442)
        #c3 = P(3.82339, -6.5032)
        #z2 = P(3.48619, -6.39355)
        #c4 = P(3.18618, -6.29599)
        #c5 = P(2.9701, -5.66002)
        #z3 = P(3.23072, -5.48224)
        #c6 = P(3.55062, -5.26401)
        #c7 = P(3.68564, -5.32377)
        z4 = P(4.1578, -6.18236)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88418, -1.31938)
        #z1 = z0 + P(4.32085, -5.73407)
        #c1 = z1 + P(0.0347945, 2.00086)
        #c2 = z1 + P(0, -0.510355)
        #z2 = z1 + P(-0.834654, -0.659479)
        #c3 = z2 + P(0.337201, -0.109652)
        #c4 = z2 + P(-0.300017, 0.0975582)
        #z3 = z2 + P(-0.255476, 0.911307)
        #c5 = z3 + P(-0.260615, -0.177782)
        #c6 = z3 + P(0.319902, 0.218228)
        #z4 = z3 + P(0.927084, -0.700119)
        #c7 = z4 + P(-0.472165, 0.858588)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30019, -35)
        z1 = z0 + PP(7.17978, -53)
        c1 = z1 + PP(2.00116, 89)
        c2 = z1 + PP(0.510355, -90)
        z2 = z1 + PP(1.06375, -141)
        c3 = z2 + PP(0.354582, -18)
        c4 = z2 + PP(0.31548, 161)
        #z3 = z2 + PP(0.94644, 105)
        z3 = z4 - PP(1.16175, ta + 25)
        c5 = z3 + PP(0.315478, -145)
        #c6 = z3 + PP(0.387248, 34)
        #z4 = z3 + PP(1.16175, -37)
        #c7 = z4 + PP(0.979854, 118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRse(cls, ta=None, **kwargs):

        #M 316.567,396.698 C 323.2315,396.698 327.77952,408.70997 327.67952,414.40297 327.67952,415.81267 326.74367,416.48352 325.87481,416.33546 324.79914,416.15215 323.71272,414.02678 324.55903,413.338 325.48167,412.5871 326.12989,413.29679 327.46738,415.40623

        #z0 = P(0, -0)
        #c0 = P(2.3423, -0)
        #c1 = P(3.94075, -4.22173)
        #z1 = P(3.9056, -6.22259)
        #c2 = P(3.9056, -6.71804)
        #c3 = P(3.57669, -6.95382)
        #z2 = P(3.27132, -6.90178)
        #c4 = P(2.89327, -6.83735)
        #c5 = P(2.51143, -6.09037)
        #z3 = P(2.80888, -5.84829)
        #c6 = P(3.13315, -5.58438)
        #c7 = P(3.36097, -5.83381)
        z4 = P(3.83105, -6.57519)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.3423, 0)
        #z1 = z0 + P(3.9056, -6.22259)
        #c1 = z1 + P(0.035146, 2.00086)
        #c2 = z1 + P(0, -0.495453)
        #z2 = z1 + P(-0.634283, -0.679193)
        #c3 = z2 + P(0.305369, -0.0520371)
        #c4 = z2 + P(-0.378055, 0.0644261)
        #z3 = z2 + P(-0.462444, 1.05349)
        #c5 = z3 + P(-0.297444, -0.242079)
        #c6 = z3 + P(0.324271, 0.263911)
        #z4 = z3 + P(1.02217, -0.7269)
        #c7 = z4 + P(-0.470074, 0.741384)

        z0 = P(0, -0)
        c0 = z0 + PP(2.3423, 0)
        z1 = z0 + PP(7.34672, -57)
        c1 = z1 + PP(2.00117, 88)
        c2 = z1 + PP(0.495453, -90)
        z2 = z1 + PP(0.92931, -133)
        c3 = z2 + PP(0.309771, -9)
        c4 = z2 + PP(0.383505, 170)
        #z3 = z2 + PP(1.15052, 113)
        z3 = z4 - PP(1.25428, ta + 23)
        c5 = z3 + PP(0.383504, -140)
        #c6 = z3 + PP(0.418092, 39)
        #z4 = z3 + PP(1.25428, -35)
        #c7 = z4 + PP(0.877849, 122)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])
    @classmethod
    def path_SERCRser(cls, ta=None, **kwargs):
        #M 119.838,560.366 C 125.199,564.12 132.232,570.989 132.132,576.681 132.132,579.704 128.91844,575.9992 129.19677,574.88676 129.41706,574.00628 130.80136,573.7504 131.915,574.728

        #z0 = P(0, -0)
        #c0 = P(1.88418, -1.31938)
        #c1 = P(4.35599, -3.73356)
        #z1 = P(4.32085, -5.73407)
        #c2 = P(4.32085, -6.79653)
        #c3 = P(3.19141, -5.49444)
        #z2 = P(3.28923, -5.10346)
        #c4 = P(3.36666, -4.79401)
        #c5 = P(3.85318, -4.70408)
        z3 = P(4.24458, -5.04767)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88418, -1.31938)
        #z1 = z0 + P(4.32085, -5.73407)
        #c1 = z1 + P(0.035146, 2.00051)
        #c2 = z1 + P(0, -1.06246)
        #z2 = z1 + P(-1.03162, 0.630603)
        #c3 = z2 + P(-0.0978218, -0.390978)
        #c4 = z2 + P(0.0774231, 0.309453)
        #z3 = z2 + P(0.955349, 0.0557978)
        #c5 = z3 + P(-0.3914, 0.343587)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30019, -35)
        z1 = z0 + PP(7.17978, -53)
        c1 = z1 + PP(2.00082, 88)
        c2 = z1 + PP(1.06246, -90)
        #z2 = z1 + PP(1.20909, 148)
        z2 = z3 - PP(0.956977, ta + 45)
        c3 = z2 + PP(0.40303, -104)
        #c4 = z2 + PP(0.318992, 75)
        #z3 = z2 + PP(0.956977, 3)
        #c5 = z3 + PP(0.520813, 138)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRser(cls, ta=None, **kwargs):
        #M 58.68,457.933 C 64.624174,457.933 70.045054,470.58301 69.847054,476.25101 69.847054,479.26301 66.682854,475.88501 66.959254,474.77701 67.212254,473.76201 68.588754,473.57601 69.630754,474.30601

        #z0 = P(0, -0)
        #c0 = P(2.08914, -0)
        #c1 = P(3.99436, -4.44597)
        #z1 = P(3.92477, -6.43805)
        #c2 = P(3.92477, -7.49664)
        #c3 = P(2.81268, -6.30941)
        #z2 = P(2.90983, -5.91999)
        #c4 = P(2.99874, -5.56326)
        #c5 = P(3.48253, -5.49789)
        z3 = P(3.84875, -5.75446)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.08914, 0)
        #z1 = z0 + P(3.92477, -6.43805)
        #c1 = z1 + P(0.0695891, 1.99207)
        #c2 = z1 + P(0, -1.0586)
        #z2 = z1 + P(-1.01495, 0.518052)
        #c3 = z2 + P(-0.0971435, -0.389418)
        #c4 = z2 + P(0.0889193, 0.356732)
        #z3 = z2 + P(0.938925, 0.165538)
        #c5 = z3 + P(-0.366221, 0.256566)

        z0 = P(0, -0)
        c0 = z0 + PP(2.08914, 0)
        z1 = z0 + PP(7.54004, -58)
        c1 = z1 + PP(1.99329, 87)
        c2 = z1 + PP(1.0586, -90)
        #z2 = z1 + PP(1.13951, 152)
        z2 = z3 - PP(0.953406, ta + 45)
        c3 = z2 + PP(0.401351, -104)
        #c4 = z2 + PP(0.367647, 76)
        #z3 = z2 + PP(0.953406, 9)
        #c5 = z3 + PP(0.447151, 144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRsel(cls, ta=None, **kwargs):
        #M 268.503,348.33 C 273.864,352.084 280.89832,358.81948 280.797,364.645 280.74623,366.49898 278.8669,367.45535 277.89835,366.75518 277.01392,366.1158 277.80845,363.57875 278.89821,363.63756 279.95538,363.69461 279.56129,365.217 279.53708,366.74876

        #z0 = P(0, -0)
        #c0 = P(1.88418, -1.31938)
        #c1 = P(4.35646, -3.68663)
        #z1 = P(4.32085, -5.73407)
        #c2 = P(4.303, -6.38567)
        #c3 = P(3.6425, -6.72179)
        #z2 = P(3.30209, -6.47571)
        #c4 = P(2.99125, -6.251)
        #c5 = P(3.27049, -5.35932)
        #z3 = P(3.6535, -5.37999)
        #c6 = P(4.02505, -5.40004)
        #c7 = P(3.88655, -5.9351)
        z4 = P(3.87804, -6.47346)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88418, -1.31938)
        #z1 = z0 + P(4.32085, -5.73407)
        #c1 = z1 + P(0.0356099, 2.04744)
        #c2 = z1 + P(-0.0178436, -0.6516)
        #z2 = z1 + P(-1.01876, -0.741644)
        #c3 = z2 + P(0.340406, -0.246082)
        #c4 = z2 + P(-0.310842, 0.224716)
        #z3 = z2 + P(0.351411, 1.09572)
        #c5 = z3 + P(-0.383007, 0.0206694)
        #c6 = z3 + P(0.371553, -0.0200508)
        #z4 = z3 + P(0.224537, -1.09346)
        #c7 = z4 + P(0.00850884, 0.538352)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30019, -35)
        z1 = z0 + PP(7.17978, -53)
        c1 = z1 + PP(2.04775, 89)
        c2 = z1 + PP(0.651844, -91)
        z2 = z1 + PP(1.26012, -143)
        c3 = z2 + PP(0.420039, -35)
        c4 = z2 + PP(0.383562, 144)
        #z3 = z2 + PP(1.15069, 72)
        z3 = z4 - PP(1.11628, ta + 13)
        c5 = z3 + PP(0.383564, 176)
        #c6 = z3 + PP(0.372093, -3)
        #z4 = z3 + PP(1.11628, -78)
        #c7 = z4 + PP(0.538419, 89)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRsel(cls, ta=None, **kwargs):
        #M 121.738,457.933 C 127.9763,457.933 133.00685,469.26757 132.90585,475.07157 132.87285,476.91957 131.02785,477.90457 130.05285,477.22157 128.56508,476.58257 129.95214,473.61543 131.03614,473.69143 132.29014,473.77943 131.64985,475.84457 131.64985,477.16757

        #z0 = P(0, -0)
        #c0 = P(2.19251, -0)
        #c1 = P(3.96055, -3.98365)
        #z1 = P(3.92505, -6.02352)
        #c2 = P(3.91345, -6.67302)
        #c3 = P(3.26501, -7.01921)
        #z2 = P(2.92234, -6.77916)
        #c4 = P(2.39944, -6.55458)
        #c5 = P(2.88694, -5.51174)
        #z3 = P(3.26792, -5.53846)
        #c6 = P(3.70865, -5.56938)
        #c7 = P(3.48362, -6.2952)
        z4 = P(3.48362, -6.76018)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.19251, 0)
        #z1 = z0 + P(3.92505, -6.02352)
        #c1 = z1 + P(0.0354974, 2.03987)
        #c2 = z1 + P(-0.0115982, -0.649498)
        #z2 = z1 + P(-1.00272, -0.755639)
        #c3 = z2 + P(0.342673, -0.240047)
        #c4 = z2 + P(-0.522891, 0.224583)
        #z3 = z2 + P(0.345587, 1.2407)
        #c5 = z3 + P(-0.380983, 0.026711)
        #c6 = z3 + P(0.440731, -0.0309285)
        #z4 = z3 + P(0.215694, -1.22172)
        #c7 = z4 + P(0, 0.464981)

        z0 = P(0, -0)
        c0 = z0 + PP(2.19251, 0)
        z1 = z0 + PP(7.18949, -56)
        c1 = z1 + PP(2.04018, 89)
        c2 = z1 + PP(0.649601, -91)
        z2 = z1 + PP(1.25556, -142)
        c3 = z2 + PP(0.418387, -35)
        c4 = z2 + PP(0.569081, 156)
        #z3 = z2 + PP(1.28793, 74)
        z3 = z4 - PP(1.24062, ta + 11)
        c5 = z3 + PP(0.381918, 175)
        #c6 = z3 + PP(0.441815, -4)
        #z4 = z3 + PP(1.24062, -79)
        #c7 = z4 + PP(0.464981, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRsw(cls, ta=None, **kwargs):
        #M 268.492,258.172 C 273.515,261.69 280.002,267.89 280.767,273.331 280.982,274.686 280.04124,276.28502 279.05109,275.9527 277.15573,275.31657 279.09413,271.02883 279.45913,269.96883

        #z0 = P(0, -0)
        #c0 = P(1.772, -1.24107)
        #c1 = P(4.06047, -3.42829)
        #z1 = P(4.33035, -5.34776)
        #c2 = P(4.40619, -5.82577)
        #c3 = P(4.07432, -6.38987)
        #z2 = P(3.72501, -6.27264)
        #c4 = P(3.05637, -6.04822)
        #c5 = P(3.7402, -4.5356)
        z3 = P(3.86896, -4.16166)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.772, -1.24107)
        #z1 = z0 + P(4.33035, -5.34776)
        #c1 = z1 + P(-0.269875, 1.91946)
        #c2 = z1 + P(0.0758472, -0.478014)
        #z2 = z1 + P(-0.605335, -0.924877)
        #c3 = z2 + P(0.349303, -0.117235)
        #c4 = z2 + P(-0.668641, 0.224413)
        #z3 = z2 + P(0.143947, 2.11098)
        #c5 = z3 + P(-0.128764, -0.373944)

        z0 = P(0, -0)
        c0 = z0 + PP(2.16339, -35)
        z1 = z0 + PP(6.88116, -51)
        c1 = z1 + PP(1.93834, 98)
        c2 = z1 + PP(0.483994, -80)
        z2 = z1 + PP(1.10536, -123)
        #z2 = z3 - PP(2.11588, ta + 375)
        c3 = z2 + PP(0.368452, -18)
        c4 = z2 + PP(0.705295, 161)
        z3 = z2 + PP(2.11588, 86)
        c5 = z3 + PP(0.395493, -109)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_nerSERCRsw(cls, ta=None, **kwargs):
        #M 58.68,532.203 C 64.707189,532.203 69.041136,543.58023 69.805936,549.02223 70.020436,550.37623 69.169036,551.88723 68.567936,551.80223 66.820936,551.52623 68.849836,547.59523 69.214636,546.53623

        #z0 = P(0, -0)
        #c0 = P(2.11832, -0)
        #c1 = P(3.64152, -3.99864)
        #z1 = P(3.91032, -5.91128)
        #c2 = P(3.98571, -6.38716)
        #c3 = P(3.68648, -6.91822)
        #z2 = P(3.47521, -6.88834)
        #c4 = P(2.86121, -6.79134)
        #c5 = P(3.57429, -5.40975)
        z3 = P(3.7025, -5.03756)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.11832, 0)
        #z1 = z0 + P(3.91032, -5.91128)
        #c1 = z1 + P(-0.268797, 1.91264)
        #c2 = z1 + P(0.0753881, -0.475877)
        #z2 = z1 + P(-0.435107, -0.977058)
        #c3 = z2 + P(0.211263, -0.0298741)
        #c4 = z2 + P(-0.614, 0.0970029)
        #z3 = z2 + P(0.227289, 1.85079)
        #c5 = z3 + P(-0.128213, -0.372196)

        z0 = P(0, -0)
        c0 = z0 + PP(2.11832, 0)
        z1 = z0 + PP(7.08759, -56)
        c1 = z1 + PP(1.93144, 97)
        c2 = z1 + PP(0.481811, -80)
        z2 = z1 + PP(1.06956, -114)
        #z2 = z3 - PP(1.86469, ta + 371)
        c3 = z2 + PP(0.213364, -8)
        c4 = z2 + PP(0.621616, 171)
        #z3 = z2 + PP(1.86469, 82)
        c5 = z3 + PP(0.39366, -109)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SERCRswr(cls, ta=None, **kwargs):
        #M 47.3414,364.975 C 52.7027,368.729 59.7349,375.597 59.6355,381.29 59.6355,382.55403 58.344163,383.81916 57.319717,383.51144 56.347808,383.2195 55.736025,380.98793 56.647664,380.54212 57.634222,380.05966 58.115816,380.88391 58.737376,383.08919

        #z0 = P(0, -0)
        #c0 = P(1.88428, -1.31938)
        #c1 = P(4.35582, -3.73321)
        #z1 = P(4.32088, -5.73407)
        #c2 = P(4.32088, -6.17832)
        #c3 = P(3.86703, -6.62297)
        #z2 = P(3.50698, -6.51481)
        #c4 = P(3.16539, -6.41221)
        #c5 = P(2.95037, -5.6279)
        #z3 = P(3.27078, -5.47122)
        #c6 = P(3.61751, -5.30165)
        #c7 = P(3.78677, -5.59134)
        z4 = P(4.00523, -6.36641)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88428, -1.31938)
        #z1 = z0 + P(4.32088, -5.73407)
        #c1 = z1 + P(0.0349351, 2.00086)
        #c2 = z1 + P(0, -0.444256)
        #z2 = z1 + P(-0.813905, -0.780747)
        #c3 = z2 + P(0.360052, -0.108151)
        #c4 = z2 + P(-0.341587, 0.102605)
        #z3 = z2 + P(-0.2362, 1.0436)
        #c5 = z3 + P(-0.320405, -0.156684)
        #c6 = z3 + P(0.346736, 0.169565)
        #z4 = z3 + P(0.73445, -0.895193)
        #c7 = z4 + P(-0.218453, 0.775067)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30028, -34)
        z1 = z0 + PP(7.1798, -53)
        c1 = z1 + PP(2.00117, 88)
        c2 = z1 + PP(0.444256, -90)
        z2 = z1 + PP(1.12783, -136)
        c3 = z2 + PP(0.375944, -16)
        c4 = z2 + PP(0.356664, 163)
        #z3 = z2 + PP(1.06999, 102)
        z3 = z4 - PP(1.15792, ta + 25)
        c5 = z3 + PP(0.356664, -153)
        #c6 = z3 + PP(0.385977, 26)
        #z4 = z3 + PP(1.15792, -50)
        #c7 = z4 + PP(0.805265, 105)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRswr(cls, ta=None, **kwargs):
        #M 157.39,537.68 C 163.68095,537.68 168.66964,549.71178 168.56964,555.40378 168.56964,558.42678 165.44867,557.13719 164.74948,556.05127 164.34189,555.41823 165.264,554.12326 166.01475,554.1802 167.06889,554.26014 167.01112,555.57973 167.37482,557.04527

        #z0 = P(0, -0)
        #c0 = P(2.21102, -0)
        #c1 = P(3.96434, -4.22869)
        #z1 = P(3.92919, -6.2292)
        #c2 = P(3.92919, -7.29166)
        #c3 = P(2.8323, -6.83842)
        #z2 = P(2.58656, -6.45676)
        #c4 = P(2.44331, -6.23428)
        #c5 = P(2.7674, -5.77915)
        #z3 = P(3.03125, -5.79916)
        #c6 = P(3.40174, -5.82725)
        #c7 = P(3.38144, -6.29104)
        z4 = P(3.50926, -6.80612)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.21102, 0)
        #z1 = z0 + P(3.92919, -6.2292)
        #c1 = z1 + P(0.035146, 2.00051)
        #c2 = z1 + P(0, -1.06246)
        #z2 = z1 + P(-1.34263, -0.227567)
        #c3 = z2 + P(0.245737, -0.381657)
        #c4 = z2 + P(-0.143252, 0.222488)
        #z3 = z2 + P(0.444692, 0.657606)
        #c5 = z3 + P(-0.263859, 0.0200121)
        #c6 = z3 + P(0.370488, -0.0280957)
        #z4 = z3 + P(0.47801, -1.00696)
        #c7 = z4 + P(-0.127826, 0.515079)

        z0 = P(0, -0)
        c0 = z0 + PP(2.21102, 0)
        z1 = z0 + PP(7.36488, -57)
        c1 = z1 + PP(2.00082, 88)
        c2 = z1 + PP(1.06246, -90)
        z2 = z1 + PP(1.36178, -170)
        c3 = z2 + PP(0.453926, -57)
        c4 = z2 + PP(0.264617, 122)
        #z3 = z2 + PP(0.793849, 55)
        z3 = z4 - PP(1.11466, ta + 13)
        c5 = z3 + PP(0.264616, 175)
        #c6 = z3 + PP(0.371552, -4)
        #z4 = z3 + PP(1.11466, -64)
        #c7 = z4 + PP(0.530703, 103)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRswl(cls, ta=None, **kwargs):
        #M202.687 276.548C208.048 280.302 215.08 287.17 214.981 292.863C214.981 295.886 210.567 294.821 212.346 293.328C213.226 292.615 214.051 291.79 214.764 290.91

        #z0 = P(0, -0)
        #c0 = P(1.88418, -1.31938)
        #c1 = P(4.35564, -3.73321)
        #z1 = P(4.32085, -5.73407)
        #c2 = P(4.32085, -6.79653)
        #c3 = P(2.7695, -6.42223)
        #z2 = P(3.39475, -5.8975)
        #c4 = P(3.70404, -5.64691)
        #c5 = P(3.99399, -5.35695)
        z3 = P(4.24458, -5.04767)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.88418, -1.31938)
        #z1 = z0 + P(4.32085, -5.73407)
        #c1 = z1 + P(0.0347945, 2.00086)
        #c2 = z1 + P(0, -1.06246)
        #z2 = z1 + P(-0.926097, -0.163429)
        #c3 = z2 + P(-0.625247, -0.52473)
        #c4 = z2 + P(0.309285, 0.250591)
        #z3 = z2 + P(0.84983, 0.84983)
        #c5 = z3 + P(-0.250591, -0.309285)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30019, -35)
        z1 = z0 + PP(7.17978, -53)
        c1 = z1 + PP(2.00116, 89)
        c2 = z1 + PP(1.06246, -90)
        z2 = z1 + PP(0.940406, -169)
        #z2 = z3 - PP(1.20184, ta + 353)
        c3 = z2 + PP(0.816257, -139)
        c4 = z2 + PP(0.398061, 39)
        #z3 = z2 + PP(1.20184, 44)
        c5 = z3 + PP(0.398061, -129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_nerSERCRswl(cls, ta=None, **kwargs):
        #M 120.202,537.68 C 126.34074,537.68 131.43368,549.65788 131.33468,555.34988 131.33468,558.37288 127.07808,557.47751 128.69968,555.81488 129.48713,555.0075 130.29884,554.21615 131.11768,553.39688

        #z0 = P(0, -0)
        #c0 = P(2.15752, -0)
        #c1 = P(3.94748, -4.20974)
        #z1 = P(3.91269, -6.21025)
        #c2 = P(3.91269, -7.27272)
        #c3 = P(2.41667, -6.95803)
        #z2 = P(2.98659, -6.37368)
        #c4 = P(3.26335, -6.08992)
        #c5 = P(3.54863, -5.81179)
        z3 = P(3.83642, -5.52385)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.15752, 0)
        #z1 = z0 + P(3.91269, -6.21025)
        #c1 = z1 + P(0.0347945, 2.00051)
        #c2 = z1 + P(0, -1.06246)
        #z2 = z1 + P(-0.926097, -0.163429)
        #c3 = z2 + P(-0.569927, -0.584348)
        #c4 = z2 + P(0.276757, 0.283762)
        #z3 = z2 + P(0.84983, 0.84983)
        #c5 = z3 + P(-0.287789, -0.287941)

        z0 = P(0, -0)
        c0 = z0 + PP(2.15752, 0)
        z1 = z0 + PP(7.34005, -57)
        c1 = z1 + PP(2.00081, 89)
        c2 = z1 + PP(1.06246, -90)
        z2 = z1 + PP(0.940406, -169)
        #z2 = z3 - PP(1.20184, ta + 359)
        c3 = z2 + PP(0.816259, -134)
        c4 = z2 + PP(0.396378, 45)
        #z3 = z2 + PP(1.20184, 45)
        c5 = z3 + PP(0.407103, -134)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SERCRNE(cls, ta=None, **kwargs):
        #M 254.122,129.732 C 259.528,133.378 266.751,140.098 266.652,145.77 266.652,148.781 261.765,147.307 263.511,145.789 264.316,145.09 265.568,144.24477 266.47885,143.69336 267.34105,143.17141 268.31808,142.53463 269.41551,141.77744

        #z0 = P(0, -0)
        #c0 = P(1.90712, -1.28623)
        #c1 = P(4.45523, -3.65689)
        #z1 = P(4.42031, -5.65785)
        #c2 = P(4.42031, -6.72006)
        #c3 = P(2.69628, -6.20007)
        #z2 = P(3.31223, -5.66455)
        #c4 = P(3.59622, -5.41796)
        #c5 = P(4.03789, -5.11978)
        #z3 = P(4.35922, -4.92526)
        #c6 = P(4.66339, -4.74113)
        #c7 = P(5.00806, -4.51648)
        #z4 = P(5.39521, -4.24936)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.90712, -1.28623)
        #z1 = z0 + P(4.42031, -5.65785)
        #c1 = z1 + P(0.034925, 2.00096)
        #c2 = z1 + P(0, -1.06221)
        #z2 = z1 + P(-1.10807, -0.00670278)
        #c3 = z2 + P(-0.61595, -0.535517)
        #c4 = z2 + P(0.283986, 0.246592)
        #z3 = z2 + P(1.04699, 0.739295)
        #c5 = z3 + P(-0.321328, -0.194525)
        #c6 = z3 + P(0.304165, 0.184132)
        #z4 = z3 + P(1.03599, 0.675894)
        #c7 = z4 + P(-0.387149, -0.26712)

        z0 = P(0, -0)
        c0 = z0 + PP(2.30032, -33)
        z1 = z0 + PP(7.17986, -52)
        c1 = z1 + PP(2.00126, 89)
        c2 = z1 + PP(1.06221, -90)
        z2 = z1 + PP(1.1081, -179)
        c3 = z2 + PP(0.816194, -138)
        c4 = z2 + PP(0.376106, 40)
        z3 = z2 + PP(1.2817, 35)
        #z3 = z4 - PP(1.23697, ta + 358)
        c5 = z3 + PP(0.375621, -148)
        c6 = z3 + PP(0.355557, 31)
        z4 = z3 + PP(1.23697, 33)
        c7 = z4 + PP(0.470359, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_nerSERCRNE(cls, ta=None, **kwargs):
        #M 58.68,247.45 C 64.9403,247.45 69.8749,259.38 69.677,265.049 69.677,268.06 64.9011,266.673 66.5935,265.095 67.4628,264.284 68.532021,263.58079 69.515913,262.91577 70.450398,262.28415 71.318715,261.81349 72.407594,261.17593

        #z0 = P(0, -0)
        #c0 = P(2.20849, -0)
        #c1 = P(3.94931, -4.20864)
        #z1 = P(3.8795, -6.20854)
        #c2 = P(3.8795, -7.27075)
        #c3 = P(2.19467, -6.78145)
        #z2 = P(2.79171, -6.22476)
        #c4 = P(3.09838, -5.93866)
        #c5 = P(3.47557, -5.69058)
        #z3 = P(3.82267, -5.45598)
        #c6 = P(4.15233, -5.23316)
        #c7 = P(4.45866, -5.06712)
        #z4 = P(4.84279, -4.8422)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.20849, 0)
        #z1 = z0 + P(3.8795, -6.20854)
        #c1 = z1 + P(0.0698147, 1.9999)
        #c2 = z1 + P(0, -1.06221)
        #z2 = z1 + P(-1.08779, -0.0162278)
        #c3 = z2 + P(-0.597041, -0.556683)
        #c4 = z2 + P(0.30667, 0.286103)
        #z3 = z2 + P(1.03096, 0.768784)
        #c5 = z3 + P(-0.347095, -0.234604)
        #c6 = z3 + P(0.329666, 0.222821)
        #z4 = z3 + P(1.02012, 0.613777)
        #c7 = z4 + P(-0.384132, -0.224917)

        z0 = P(0, -0)
        c0 = z0 + PP(2.20849, 0)
        z1 = z0 + PP(7.32096, -58)
        c1 = z1 + PP(2.00112, 88)
        c2 = z1 + PP(1.06221, -90)
        z2 = z1 + PP(1.08791, -179)
        c3 = z2 + PP(0.816305, -137)
        c4 = z2 + PP(0.419406, 43)
        z3 = z2 + PP(1.28605, 36)
        #z3 = z4 - PP(1.19053, ta + 360)
        c5 = z3 + PP(0.418944, -145)
        c6 = z3 + PP(0.397906, 34)
        z4 = z3 + PP(1.19053, 31)
        c7 = z4 + PP(0.445135, -149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

class CharRin(CharRi):
    def __init__(self, name='rin', kana='りん',
                 model='SER8CR1NE1F', head_type='SER',
                 tail_type='SERCR1NE1F'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.head_ligature = {'NER'}

    def get_paths(self):
        if getattr(self.before, 'tail_type', '') == 'NER':
            return [self.path_nerSERCRNE()]
        else:
            return [self.path_SERCRNE()]

class CharRiku(CharRi):
    def __init__(self, name='riku', kana='りく',
                 model='BSER8CR1', head_type='BSER',
                 tail_type='SERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)
