import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharHe(WasedaChar):
    def __init__(self, name='he', kana='„Å∏',
                 model='SEL16CL1', head_type='SEL',
                 tail_type='SELCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_SELCL(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 47.3414,82.2775 51.378983,101.40203 69.9338,97.8084 70.709796,97.658108 70.981496,96.750748 70.8069,96.151314 70.664889,95.663753 70.160115,95.214202 69.484064,95.395636 67.880642,95.825951 66.470871,96.988138 65.35235,98.1448

        #z0 = P(0, -0)
        #c0 = P(0, -8.29456)
        #c1 = P(1.41905, -15.0161)
        #z1 = P(7.94032, -13.753)
        #c2 = P(8.21305, -13.7002)
        #c3 = P(8.30855, -13.3813)
        #z2 = P(8.24718, -13.1706)
        #c4 = P(8.19727, -12.9993)
        #c5 = P(8.01986, -12.8413)
        #z3 = P(7.78226, -12.9051)
        #c6 = P(7.21872, -13.0563)
        #c7 = P(6.72324, -13.4648)
        z4 = P(6.33013, -13.8713)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.29456)
        #z1 = z0 + P(7.94032, -13.753)
        #c1 = z1 + P(-6.52127, -1.26302)
        #c2 = z1 + P(0.272731, 0.0528216)
        #z2 = z1 + P(0.30686, 0.582399)
        #c3 = z2 + P(0.0613635, -0.210677)
        #c4 = z2 + P(-0.0499112, 0.171358)
        #z3 = z2 + P(-0.464924, 0.26559)
        #c5 = z3 + P(0.237605, 0.0637668)
        #c6 = z3 + P(-0.563538, -0.151238)
        #z4 = z3 + P(-1.45213, -0.966221)
        #c7 = z4 + P(0.393115, 0.40652)

        z0 = P(0, -0)
        c0 = z0 + PP(8.29456, -90)
        z1 = z0 + PP(15.8806, -60)
        c1 = z1 + PP(6.64246, -169)
        c2 = z1 + PP(0.2778, 10)
        z2 = z1 + PP(0.658295, 62)
        c3 = z2 + PP(0.219432, -73)
        c4 = z2 + PP(0.178479, 106)
        z3 = z2 + PP(0.535437, 150)
        #z3 = z4 - PP(1.74421, ta + -11)
        c5 = z3 + PP(0.246013, 15)
        c6 = z3 + PP(0.58348, -164)
        #z4 = z3 + PP(1.74421, -146)
        c7 = z4 + PP(0.565507, 45)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SELCLe(cls, ta=None, **kwargs):
        #M 47.3414,154.69 C 47.3414,178.202 50.929259,197.30312 69.428695,193.7952 71.050553,193.48766 71.03831,192.19833 70.785501,191.42699 69.929417,188.81502 65.973369,189.35871 65.74486,191.0286 65.502021,192.80321 67.644362,192.18799 71.018411,192.05988

        #z0 = P(0, -0)
        #c0 = P(0, -8.26352)
        #c1 = P(1.26099, -14.9768)
        #z1 = P(7.7628, -13.7439)
        #c2 = P(8.33282, -13.6358)
        #c3 = P(8.32851, -13.1827)
        #z2 = P(8.23966, -12.9116)
        #c4 = P(7.93878, -11.9936)
        #c5 = P(6.54839, -12.1847)
        #z3 = P(6.46808, -12.7716)
        #c6 = P(6.38273, -13.3953)
        #c7 = P(7.13568, -13.179)
        z4 = P(8.32152, -13.134)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.26352)
        #z1 = z0 + P(7.7628, -13.7439)
        #c1 = z1 + P(-6.50181, -1.23289)
        #c2 = z1 + P(0.570018, 0.108088)
        #z2 = z1 + P(0.476863, 0.832331)
        #c3 = z2 + P(0.0888522, -0.271095)
        #c4 = z2 + P(-0.300879, 0.918003)
        #z3 = z2 + P(-1.77158, 0.140018)
        #c5 = z3 + P(0.0803117, 0.586899)
        #c6 = z3 + P(-0.0853482, -0.623704)
        #z4 = z3 + P(1.85344, -0.362454)
        #c7 = z4 + P(-1.18584, -0.0450255)

        z0 = P(0, -0)
        c0 = z0 + PP(8.26352, -90)
        z1 = z0 + PP(15.7847, -60)
        c1 = z1 + PP(6.61767, -169)
        c2 = z1 + PP(0.580175, 10)
        z2 = z1 + PP(0.959256, 60)
        c3 = z2 + PP(0.285285, -71)
        c4 = z2 + PP(0.966052, 108)
        #z3 = z2 + PP(1.77711, 175)
        z3 = z4 - PP(1.88855, ta + 346)
        c5 = z3 + PP(0.592369, 82)
        #c6 = z3 + PP(0.629517, -97)
        #z4 = z3 + PP(1.88855, -11)
        #c7 = z4 + PP(1.1867, -177)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SELCLer(cls, ta=None, **kwargs):
        #M 173.943,154.69 C 173.943,178.202 178.10151,197.89723 196.451,193.675 197.88573,193.34487 198.95872,191.07231 198.04821,190.16488 196.8793,188.99992 193.1534,190.6284 193.54887,192.23061 193.8511,193.45505 194.11233,194.01595 197.327,192.028

        #z0 = P(0, -0)
        #c0 = P(0, -8.26352)
        #c1 = P(1.46155, -15.1856)
        #z1 = P(7.91066, -13.7017)
        #c2 = P(8.41491, -13.5856)
        #c3 = P(8.79202, -12.7869)
        #z2 = P(8.47201, -12.468)
        #c4 = P(8.06119, -12.0586)
        #c5 = P(6.75168, -12.6309)
        #z3 = P(6.89068, -13.194)
        #c6 = P(6.9969, -13.6244)
        #c7 = P(7.08871, -13.8215)
        z4 = P(8.21854, -13.1228)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.26352)
        #z1 = z0 + P(7.91066, -13.7017)
        #c1 = z1 + P(-6.44911, -1.48394)
        #c2 = z1 + P(0.50425, 0.116027)
        #z2 = z1 + P(0.561355, 1.23367)
        #c3 = z2 + P(0.320008, -0.318925)
        #c4 = z2 + P(-0.410825, 0.409437)
        #z3 = z2 + P(-1.58134, -0.726021)
        #c5 = z3 + P(-0.138992, 0.563113)
        #c6 = z3 + P(0.106222, -0.430342)
        #z4 = z3 + P(1.32786, 0.0712093)
        #c7 = z4 + P(-1.12983, -0.698685)

        z0 = P(0, -0)
        c0 = z0 + PP(8.26352, -90)
        z1 = z0 + PP(15.8213, -60)
        c1 = z1 + PP(6.61764, -167)
        c2 = z1 + PP(0.517427, 12)
        z2 = z1 + PP(1.35538, 65)
        c3 = z2 + PP(0.451794, -44)
        c4 = z2 + PP(0.580013, 135)
        #z3 = z2 + PP(1.74004, -155)
        z3 = z4 - PP(1.32977, ta + 331)
        c5 = z3 + PP(0.580012, 103)
        #c6 = z3 + PP(0.443257, -76)
        #z4 = z3 + PP(1.32977, 3)
        #c7 = z4 + PP(1.32841, -148)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SELCLel(cls, ta=None, **kwargs):
        #M 116.312,154.69 C 116.312,178.202 120.33964,197.2867 138.819,193.675 139.89313,193.46507 140.44492,191.43874 139.9364,190.40528 139.39583,189.30667 137.17783,188.23528 136.45778,189.22558 135.68986,190.28172 136.49524,191.59668 138.79845,192.36682

        #z0 = P(0, -0)
        #c0 = P(0, -8.26352)
        #c1 = P(1.41555, -14.971)
        #z1 = P(7.91031, -13.7017)
        #c2 = P(8.28782, -13.6279)
        #c3 = P(8.48175, -12.9157)
        #z2 = P(8.30303, -12.5525)
        #c4 = P(8.11304, -12.1664)
        #c5 = P(7.3335, -11.7898)
        #z3 = P(7.08043, -12.1379)
        #c6 = P(6.81054, -12.5091)
        #c7 = P(7.0936, -12.9712)
        z4 = P(7.90308, -13.2419)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.26352)
        #z1 = z0 + P(7.91031, -13.7017)
        #c1 = z1 + P(-6.49475, -1.26937)
        #c2 = z1 + P(0.377514, 0.073782)
        #z2 = z1 + P(0.392721, 1.14918)
        #c3 = z2 + P(0.178724, -0.36322)
        #c4 = z2 + P(-0.189989, 0.386117)
        #z3 = z2 + P(-1.2226, 0.414617)
        #c5 = z3 + P(0.253069, 0.348051)
        #c6 = z3 + P(-0.269893, -0.371191)
        #z4 = z3 + P(0.822652, -1.10402)
        #c7 = z4 + P(-0.809486, 0.270673)

        z0 = P(0, -0)
        c0 = z0 + PP(8.26352, -90)
        z1 = z0 + PP(15.8211, -60)
        c1 = z1 + PP(6.61764, -168)
        c2 = z1 + PP(0.384656, 11)
        z2 = z1 + PP(1.21443, 71)
        c3 = z2 + PP(0.40481, -63)
        c4 = z2 + PP(0.430328, 116)
        #z3 = z2 + PP(1.29099, 161)
        z3 = z4 - PP(1.37681, ta + -34)
        c5 = z3 + PP(0.430329, 53)
        #c6 = z3 + PP(0.458939, -126)
        #z4 = z3 + PP(1.37681, -53)
        #c7 = z4 + PP(0.853541, 161)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SELCLne(cls, ta=None, **kwargs):
        #M 47.3414,250.703 C 47.3414,274.216 51.3663,293.281 69.8494,289.688 70.867241,289.45506 70.992801,288.60279 70.7254,288.041 70.28154,287.10848 66.79685,289.05595 65.2851,290.024

        #z0 = P(0, -0)
        #c0 = P(0, -8.26388)
        #c1 = P(1.41459, -14.9645)
        #z1 = P(7.91066, -13.7017)
        #c2 = P(8.26839, -13.6198)
        #c3 = P(8.31252, -13.3203)
        #z2 = P(8.21854, -13.1228)
        #c4 = P(8.06254, -12.7951)
        #c5 = P(6.83781, -13.4795)
        z3 = P(6.30649, -13.8198)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.26388)
        #z1 = z0 + P(7.91066, -13.7017)
        #c1 = z1 + P(-6.49607, -1.2628)
        #c2 = z1 + P(0.35773, 0.0818691)
        #z2 = z1 + P(0.307879, 0.578854)
        #c3 = z2 + P(0.0939807, -0.197447)
        #c4 = z2 + P(-0.155999, 0.327743)
        #z3 = z2 + P(-1.91205, -0.696945)
        #c5 = z3 + P(0.531319, 0.340231)

        z0 = P(0, -0)
        c0 = z0 + PP(8.26388, -90)
        z1 = z0 + PP(15.8213, -60)
        c1 = z1 + PP(6.61767, -168)
        c2 = z1 + PP(0.366979, 12)
        z2 = z1 + PP(0.655638, 61)
        #z2 = z3 - PP(2.03511, ta + -11)
        c3 = z2 + PP(0.218672, -64)
        #c4 = z2 + PP(0.362976, 115)
        #z3 = z2 + PP(2.03511, -159)
        #c5 = z3 + PP(0.630918, 32)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_SELCLner(cls, ta=None, **kwargs):
        #M157.773 250.703C157.773 274.216 161.798 293.281 180.281 289.688C181.056 289.552 181.339 288.636 181.157 288.041C181.017 287.554 180.516 287.101 179.842 287.282C178.252 287.738 176.85 288.89 175.716 290.024

        #z0 = P(0, -0)
        #c0 = P(0, -8.26388)
        #c1 = P(1.41463, -14.9645)
        #z1 = P(7.91066, -13.7017)
        #c2 = P(8.18304, -13.6539)
        #c3 = P(8.2825, -13.3319)
        #z2 = P(8.21854, -13.1228)
        #c4 = P(8.16933, -12.9516)
        #c5 = P(7.99325, -12.7924)
        #z3 = P(7.75637, -12.8561)
        #c6 = P(7.19755, -13.0163)
        #c7 = P(6.7048, -13.4212)
        z4 = P(6.30624, -13.8198)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.26388)
        #z1 = z0 + P(7.91066, -13.7017)
        #c1 = z1 + P(-6.49603, -1.2628)
        #c2 = z1 + P(0.272381, 0.0477985)
        #z2 = z1 + P(0.307879, 0.578854)
        #c3 = z2 + P(0.0639657, -0.209119)
        #c4 = z2 + P(-0.0492044, 0.171161)
        #z3 = z2 + P(-0.46217, 0.266758)
        #c5 = z3 + P(0.236884, 0.0636142)
        #c6 = z3 + P(-0.558821, -0.160266)
        #z4 = z3 + P(-1.45012, -0.963703)
        #c7 = z4 + P(0.398555, 0.398555)

        z0 = P(0, -0)
        c0 = z0 + PP(8.26388, -90)
        z1 = z0 + PP(15.8213, -60)
        c1 = z1 + PP(6.61764, -168)
        c2 = z1 + PP(0.276544, 9)
        z2 = z1 + PP(0.655638, 61)
        c3 = z2 + PP(0.218683, -72)
        c4 = z2 + PP(0.178093, 106)
        z3 = z2 + PP(0.53363, 150)
        #z3 = z4 - PP(1.74114, ta + -11)
        c5 = z3 + PP(0.245277, 15)
        c6 = z3 + PP(0.581349, -163)
        #z4 = z3 + PP(1.74114, -146)
        c7 = z4 + PP(0.563643, 45)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_SELCLnel(cls, ta=None, **kwargs):
        #M 102.922,250.703 C 102.922,262.4595 103.92825,273.104 107.24488,280.36025 110.5615,287.6165 119.155,292.34056 125.43,289.688 126.421,289.26908 127.02139,287.46132 126.37455,286.60157 125.23984,285.09337 123.63294,284.2582 122.47511,285.83628 121.16596,287.62058 123.35646,288.27148 126.5846,287.90297

        #z0 = P(0, -0)
        #c0 = P(0, -4.13194)
        #c1 = P(0.353657, -7.87305)
        #z1 = P(1.51932, -10.4233)
        #c2 = P(2.68498, -12.9736)
        #c3 = P(5.70525, -14.6339)
        #z2 = P(7.91066, -13.7017)
        #c4 = P(8.25896, -13.5544)
        #c5 = P(8.46997, -12.9191)
        #z3 = P(8.24263, -12.6169)
        #c6 = P(7.84383, -12.0868)
        #c7 = P(7.27906, -11.7933)
        #z4 = P(6.87213, -12.3479)
        #c8 = P(6.41202, -12.975)
        #c9 = P(7.18189, -13.2038)
        z5 = P(8.31645, -13.0743)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.13194)
        #z1 = z0 + P(1.51932, -10.4233)
        #c1 = z1 + P(-1.16566, 2.55028)
        #c2 = z1 + P(1.16566, -2.55028)
        #z2 = z1 + P(6.39134, -3.27833)
        #c3 = z2 + P(-2.20541, -0.932268)
        #c4 = z2 + P(0.348297, 0.147234)
        #z3 = z2 + P(0.331971, 1.08476)
        #c5 = z3 + P(0.227338, -0.302168)
        #c6 = z3 + P(-0.398805, 0.530072)
        #z4 = z3 + P(-1.3705, 0.268969)
        #c7 = z4 + P(0.406931, 0.554632)
        #c8 = z4 + P(-0.460114, -0.62711)
        #z5 = z4 + P(1.44432, -0.726359)
        #c9 = z5 + P(-1.13456, -0.129516)

        z0 = P(0, -0)
        c0 = z0 + PP(4.13194, -90)
        z1 = z0 + PP(10.5335, -81)
        c1 = z1 + PP(2.80405, 114)
        c2 = z1 + PP(2.80405, -65)
        z2 = z1 + PP(7.18308, -27)
        c3 = z2 + PP(2.39436, -157)
        c4 = z2 + PP(0.378138, 22)
        z3 = z2 + PP(1.13442, 72)
        c5 = z3 + PP(0.378138, -53)
        c6 = z3 + PP(0.663341, 126)
        #z4 = z3 + PP(1.39664, 168)
        z4 = z5 - PP(1.61668, ta + 327)
        c7 = z4 + PP(0.687902, 53)
        #c8 = z4 + PP(0.777799, -126)
        #z5 = z4 + PP(1.61668, -26)
        #c9 = z5 + PP(1.14193, -173)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLs(cls, ta=None, **kwargs):
        #M 47.3414,332.14 C 47.3414,343.896 48.347625,354.5405 51.664238,361.79687 54.98085,369.05325 62.240052,372.29206 68.75269,371.53627 69.520676,371.44714 70.469492,371.08199 70.451222,369.95681 70.432248,368.78828 67.628847,365.40401 67.628847,368.16965 67.628847,369.68462 67.644312,369.92243 67.644312,371.60708

        #z0 = P(0, -0)
        #c0 = P(0, -4.13176)
        #c1 = P(0.353648, -7.87288)
        #z1 = P(1.5193, -10.4232)
        #c2 = P(2.68496, -12.9735)
        #c3 = P(5.23628, -14.1118)
        #z2 = P(7.52521, -13.8462)
        #c4 = P(7.79513, -13.8149)
        #c5 = P(8.1286, -13.6865)
        #z3 = P(8.12218, -13.2911)
        #c6 = P(8.11551, -12.8804)
        #c7 = P(7.13022, -11.691)
        #z4 = P(7.13022, -12.663)
        #c8 = P(7.13022, -13.1954)
        #c9 = P(7.13566, -13.279)
        z5 = P(7.13566, -13.8711)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.13176)
        #z1 = z0 + P(1.5193, -10.4232)
        #c1 = z1 + P(-1.16566, 2.55032)
        #c2 = z1 + P(1.16566, -2.55033)
        #z2 = z1 + P(6.00591, -3.42301)
        #c3 = z2 + P(-2.28893, -0.26563)
        #c4 = z2 + P(0.269916, 0.0313256)
        #z3 = z2 + P(0.596966, 0.555117)
        #c5 = z3 + P(0.00642117, -0.395456)
        #c6 = z3 + P(-0.0066686, 0.410691)
        #z4 = z3 + P(-0.991952, 0.628115)
        #c7 = z4 + P(0, 0.972011)
        #c8 = z4 + P(0, -0.532451)
        #z5 = z4 + P(0.00543533, -1.20812)
        #c9 = z5 + P(0, 0.592087)

        z0 = P(0, -0)
        c0 = z0 + PP(4.13176, -90)
        z1 = z0 + PP(10.5333, -81)
        c1 = z1 + PP(2.80409, 114)
        c2 = z1 + PP(2.80409, -65)
        z2 = z1 + PP(6.91288, -29)
        c3 = z2 + PP(2.30429, -173)
        c4 = z2 + PP(0.271728, 6)
        z3 = z2 + PP(0.815183, 42)
        c5 = z3 + PP(0.395508, -89)
        c6 = z3 + PP(0.410746, 90)
        #z4 = z3 + PP(1.17409, 147)
        z4 = z5 - PP(1.20813, ta + 1)
        c7 = z4 + PP(0.972011, 90)
        #c8 = z4 + PP(0.532451, -90)
        #z5 = z4 + PP(1.20813, -89)
        #c9 = z5 + PP(0.592087, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLsl(cls, ta=None, **kwargs):
        #M 107.808,332.14 C 107.808,343.896 108.814,354.5405 112.1305,361.79687 115.447,369.05325 123.81589,373.16523 130.316,371.125 130.90957,370.93869 131.42948,370.05201 131.192,369.477 130.83438,368.61112 129.40246,368.32515 128.50611,368.64945 127.26323,369.09913 126.66354,370.00068 125.87226,371.61349

        #z0 = P(0, -0)
        #c0 = P(0, -4.13176)
        #c1 = P(0.353569, -7.87288)
        #z1 = P(1.51919, -10.4232)
        #c2 = P(2.6848, -12.9735)
        #c3 = P(5.62613, -14.4187)
        #z2 = P(7.91066, -13.7017)
        #c4 = P(8.11927, -13.6362)
        #c5 = P(8.302, -13.3246)
        #z3 = P(8.21854, -13.1225)
        #c6 = P(8.09285, -12.8181)
        #c7 = P(7.58959, -12.7176)
        #z4 = P(7.27456, -12.8316)
        #c8 = P(6.83773, -12.9897)
        #c9 = P(6.62697, -13.3065)
        z5 = P(6.34886, -13.8733)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.13176)
        #z1 = z0 + P(1.51919, -10.4232)
        #c1 = z1 + P(-1.16562, 2.55032)
        #c2 = z1 + P(1.16562, -2.55033)
        #z2 = z1 + P(6.39147, -3.27846)
        #c3 = z2 + P(-2.28453, -0.717059)
        #c4 = z2 + P(0.208616, 0.0654805)
        #z3 = z2 + P(0.307879, 0.579206)
        #c5 = z3 + P(0.0834647, -0.202093)
        #c6 = z3 + P(-0.125689, 0.304322)
        #z4 = z3 + P(-0.943983, 0.290851)
        #c7 = z4 + P(0.315031, 0.113978)
        #c8 = z4 + P(-0.436822, -0.158044)
        #z5 = z4 + P(-0.925693, -1.04174)
        #c9 = z5 + P(0.278103, 0.566838)

        z0 = P(0, -0)
        c0 = z0 + PP(4.13176, -90)
        z1 = z0 + PP(10.5333, -81)
        c1 = z1 + PP(2.80407, 114)
        c2 = z1 + PP(2.80407, -65)
        z2 = z1 + PP(7.18326, -27)
        c3 = z2 + PP(2.39442, -162)
        c4 = z2 + PP(0.218651, 17)
        z3 = z2 + PP(0.655949, 62)
        c5 = z3 + PP(0.21865, -67)
        c6 = z3 + PP(0.329256, 112)
        #z4 = z3 + PP(0.987774, 162)
        z4 = z5 - PP(1.3936, ta + -14)
        c7 = z4 + PP(0.335016, 19)
        #c8 = z4 + PP(0.464534, -160)
        #z5 = z4 + PP(1.3936, -131)
        #c9 = z5 + PP(0.631385, 63)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLsr(cls, ta=None, **kwargs):
        #M 168.274,332.14 C 168.274,355.652 172.299,374.718 190.782,371.125 191.557,370.988 191.89935,370.05039 191.658,369.477 191.12051,368.20005 188.61716,367.29582 187.66977,368.30673 186.91201,369.1153 188.14709,370.18923 188.81054,371.4293

        #z0 = P(0, -0)
        #c0 = P(0, -8.26352)
        #c1 = P(1.41463, -14.9645)
        #z1 = P(7.91066, -13.7017)
        #c2 = P(8.18304, -13.6535)
        #c3 = P(8.30336, -13.324)
        #z2 = P(8.21854, -13.1225)
        #c4 = P(8.02963, -12.6737)
        #c5 = P(7.1498, -12.3559)
        #z3 = P(6.81683, -12.7112)
        #c6 = P(6.55051, -12.9953)
        #c7 = P(6.98459, -13.3728)
        z4 = P(7.21777, -13.8086)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.26352)
        #z1 = z0 + P(7.91066, -13.7017)
        #c1 = z1 + P(-6.49603, -1.2628)
        #c2 = z1 + P(0.272381, 0.04815)
        #z2 = z1 + P(0.307879, 0.579206)
        #c3 = z2 + P(0.0848248, -0.201524)
        #c4 = z2 + P(-0.188906, 0.448797)
        #z3 = z2 + P(-1.4017, 0.411303)
        #c5 = z3 + P(0.33297, 0.355294)
        #c6 = z3 + P(-0.266322, -0.28418)
        #z4 = z3 + P(0.400935, -1.09746)
        #c7 = z4 + P(-0.233176, 0.435835)

        z0 = P(0, -0)
        c0 = z0 + PP(8.26352, -90)
        z1 = z0 + PP(15.8213, -60)
        c1 = z1 + PP(6.61764, -168)
        c2 = z1 + PP(0.276605, 10)
        z2 = z1 + PP(0.655949, 62)
        c3 = z2 + PP(0.218648, -67)
        c4 = z2 + PP(0.486933, 112)
        #z3 = z2 + PP(1.4608, 163)
        z3 = z4 - PP(1.1684, ta + -7)
        c5 = z3 + PP(0.486932, 46)
        #c6 = z3 + PP(0.389469, -133)
        #z4 = z3 + PP(1.1684, -69)
        #c7 = z4 + PP(0.49429, 118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SELCLse(cls, ta=None, **kwargs):
        #M 47.3414,450.83 C 47.3414,462.586 48.347625,473.2305 51.664238,480.48687 54.98085,487.74325 63.349118,491.85436 69.8494,489.815 70.44271,489.62886 70.891884,488.76712 70.7254,488.168 70.403223,487.00859 68.595808,485.59603 67.628846,486.31229 66.57452,487.09326 67.906109,488.8963 68.580442,490.13172

        #z0 = P(0, -0)
        #c0 = P(0, -4.13176)
        #c1 = P(0.353648, -7.87288)
        #z1 = P(1.5193, -10.4232)
        #c2 = P(2.68496, -12.9735)
        #c3 = P(5.62607, -14.4184)
        #z2 = P(7.91066, -13.7017)
        #c4 = P(8.11918, -13.6362)
        #c5 = P(8.27705, -13.3334)
        #z3 = P(8.21854, -13.1228)
        #c6 = P(8.10531, -12.7153)
        #c7 = P(7.47007, -12.2189)
        #z4 = P(7.13022, -12.4706)
        #c8 = P(6.75967, -12.7451)
        #c9 = P(7.22767, -13.3788)
        z5 = P(7.46467, -13.813)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.13176)
        #z1 = z0 + P(1.5193, -10.4232)
        #c1 = z1 + P(-1.16566, 2.55032)
        #c2 = z1 + P(1.16566, -2.55033)
        #z2 = z1 + P(6.39135, -3.27846)
        #c3 = z2 + P(-2.28459, -0.716753)
        #c4 = z2 + P(0.208525, 0.0654207)
        #z3 = z2 + P(0.307879, 0.578854)
        #c5 = z3 + P(0.0585124, -0.210567)
        #c6 = z3 + P(-0.113232, 0.407486)
        #z4 = z3 + P(-1.08831, 0.652208)
        #c7 = z4 + P(0.339848, 0.251737)
        #c8 = z4 + P(-0.370553, -0.27448)
        #z5 = z4 + P(0.334448, -1.34238)
        #c9 = z5 + P(-0.237001, 0.434201)

        z0 = P(0, -0)
        c0 = z0 + PP(4.13176, -90)
        z1 = z0 + PP(10.5333, -81)
        c1 = z1 + PP(2.80409, 114)
        c2 = z1 + PP(2.80409, -65)
        z2 = z1 + PP(7.18316, -27)
        c3 = z2 + PP(2.39438, -162)
        c4 = z2 + PP(0.218546, 17)
        z3 = z2 + PP(0.655638, 61)
        c5 = z3 + PP(0.218545, -74)
        c6 = z3 + PP(0.422926, 105)
        #z4 = z3 + PP(1.26878, 149)
        z4 = z5 - PP(1.38341, ta + -14)
        c7 = z4 + PP(0.422928, 36)
        #c8 = z4 + PP(0.461139, -143)
        #z5 = z4 + PP(1.38341, -76)
        #c9 = z5 + PP(0.494671, 118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLser(cls, ta=None, **kwargs):
        #M 99.3037,450.83 C 99.3037,462.586 100.31002,473.2305 103.62672,480.48687 106.94343,487.74325 115.20778,491.48757 121.812,489.815 122.43031,489.65841 123.11243,488.77333 122.89364,488.23655 122.28353,486.73976 118.55559,486.83566 118.08287,488.36862 117.80914,489.25626 119.07658,488.86763 120.34163,490.00063

        #z0 = P(0, -0)
        #c0 = P(0, -4.13176)
        #c1 = P(0.353681, -7.87288)
        #z1 = P(1.51937, -10.4232)
        #c2 = P(2.68506, -12.9735)
        #c3 = P(5.58965, -14.2895)
        #z2 = P(7.91076, -13.7017)
        #c4 = P(8.12808, -13.6466)
        #c5 = P(8.36781, -13.3356)
        #z3 = P(8.29092, -13.1469)
        #c6 = P(8.07649, -12.6208)
        #c7 = P(6.76627, -12.6545)
        #z4 = P(6.60012, -13.1933)
        #c8 = P(6.50392, -13.5053)
        #c9 = P(6.94937, -13.3687)
        z5 = P(7.39399, -13.7669)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.13176)
        #z1 = z0 + P(1.51937, -10.4232)
        #c1 = z1 + P(-1.16569, 2.55032)
        #c2 = z1 + P(1.16569, -2.55033)
        #z2 = z1 + P(6.3914, -3.27846)
        #c3 = z2 + P(-2.32112, -0.587841)
        #c4 = z2 + P(0.217311, 0.0550351)
        #z3 = z2 + P(0.380153, 0.554762)
        #c5 = z3 + P(0.0768959, -0.188657)
        #c6 = z3 + P(-0.214429, 0.526062)
        #z4 = z3 + P(-1.69079, -0.0464173)
        #c7 = z4 + P(0.166142, 0.538774)
        #c8 = z4 + P(-0.0962051, -0.31197)
        #z5 = z4 + P(0.793864, -0.573586)
        #c9 = z5 + P(-0.444614, 0.398204)

        z0 = P(0, -0)
        c0 = z0 + PP(4.13176, -90)
        z1 = z0 + PP(10.5334, -81)
        c1 = z1 + PP(2.8041, 114)
        c2 = z1 + PP(2.8041, -65)
        z2 = z1 + PP(7.18319, -27)
        c3 = z2 + PP(2.3944, -165)
        c4 = z2 + PP(0.224172, 14)
        z3 = z2 + PP(0.672515, 55)
        c5 = z3 + PP(0.203726, -67)
        c6 = z3 + PP(0.568085, 112)
        #z4 = z3 + PP(1.69143, -178)
        z4 = z5 - PP(0.979398, ta + 7)
        c7 = z4 + PP(0.563809, 72)
        #c8 = z4 + PP(0.326467, -107)
        #z5 = z4 + PP(0.979398, -35)
        #c9 = z5 + PP(0.596865, 138)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLsel(cls, ta=None, **kwargs):
        #M 156.935,450.83 C 156.935,462.586 157.94125,473.2305 161.25788,480.48687 164.5745,487.74325 173.07573,492.23788 179.443,489.815 181.78367,488.92433 179.85014,486.22854 178.11392,487.13483 177.14918,487.68651 177.16536,489.05001 177.12907,490.3201

        #z0 = P(0, -0)
        #c0 = P(0, -4.13176)
        #c1 = P(0.353657, -7.87288)
        #z1 = P(1.51932, -10.4232)
        #c2 = P(2.68498, -12.9735)
        #c3 = P(5.67282, -14.5532)
        #z2 = P(7.91066, -13.7017)
        #c4 = P(8.73331, -13.3886)
        #c5 = P(8.05375, -12.4412)
        #z3 = P(7.44354, -12.7597)
        #c6 = P(7.10447, -12.9536)
        #c7 = P(7.11016, -13.4328)
        z4 = P(7.09741, -13.8792)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.13176)
        #z1 = z0 + P(1.51932, -10.4232)
        #c1 = z1 + P(-1.16566, 2.55032)
        #c2 = z1 + P(1.16566, -2.55033)
        #z2 = z1 + P(6.39134, -3.27846)
        #c3 = z2 + P(-2.23784, -0.851545)
        #c4 = z2 + P(0.822652, 0.313035)
        #z3 = z2 + P(-0.467118, 0.941972)
        #c5 = z3 + P(0.610212, 0.318525)
        #c6 = z3 + P(-0.339067, -0.193893)
        #z4 = z3 + P(-0.346135, -1.11949)
        #c7 = z4 + P(0.0127545, 0.446386)

        z0 = P(0, -0)
        c0 = z0 + PP(4.13176, -90)
        z1 = z0 + PP(10.5333, -81)
        c1 = z1 + PP(2.80409, 114)
        c2 = z1 + PP(2.80409, -65)
        z2 = z1 + PP(7.18314, -27)
        c3 = z2 + PP(2.39438, -159)
        c4 = z2 + PP(0.880197, 20)
        #z3 = z2 + PP(1.05143, 116)
        z3 = z4 - PP(1.17178, ta + -15)
        c5 = z3 + PP(0.688343, 27)
        #c6 = z3 + PP(0.390591, -150)
        #z4 = z3 + PP(1.17178, -107)
        #c7 = z4 + PP(0.446568, 88)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SELCLsw(cls, ta=None, **kwargs):
        #M 47.3414,563.794 C 47.3414,575.55 48.347008,586.19132 51.663312,593.4461 54.979616,600.70089 63.348228,604.81887 69.8494,602.779 70.442984,602.59275 70.760978,601.7521 70.7254,601.131 70.683903,600.40656 70.216109,599.3609 69.490846,599.33806 67.811961,599.28518 67.165865,601.79039 66.3775,603.3004

        #z0 = P(0, -0)
        #c0 = P(0, -4.13176)
        #c1 = P(0.353431, -7.87176)
        #z1 = P(1.51898, -10.4215)
        #c2 = P(2.68453, -12.9713)
        #c3 = P(5.62576, -14.4186)
        #z2 = P(7.91066, -13.7017)
        #c4 = P(8.11928, -13.6362)
        #c5 = P(8.23104, -13.3407)
        #z3 = P(8.21854, -13.1225)
        #c6 = P(8.20395, -12.8678)
        #c7 = P(8.03954, -12.5003)
        #z4 = P(7.78464, -12.4923)
        #c8 = P(7.19458, -12.4737)
        #c9 = P(6.9675, -13.3542)
        z5 = P(6.69043, -13.8849)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.13176)
        #z1 = z0 + P(1.51898, -10.4215)
        #c1 = z1 + P(-1.16555, 2.54976)
        #c2 = z1 + P(1.16555, -2.54977)
        #z2 = z1 + P(6.39168, -3.28014)
        #c3 = z2 + P(-2.2849, -0.716932)
        #c4 = z2 + P(0.208621, 0.0654594)
        #z3 = z2 + P(0.307879, 0.579206)
        #c5 = z3 + P(0.0125042, -0.218292)
        #c6 = z3 + P(-0.0145845, 0.254612)
        #z4 = z3 + P(-0.433896, 0.630146)
        #c7 = z4 + P(0.254901, -0.00802734)
        #c8 = z4 + P(-0.590061, 0.0185852)
        #z5 = z4 + P(-1.09422, -1.3926)
        #c9 = z5 + P(0.277079, 0.530708)

        z0 = P(0, -0)
        c0 = z0 + PP(4.13176, -90)
        z1 = z0 + PP(10.5316, -81)
        c1 = z1 + PP(2.80353, 114)
        c2 = z1 + PP(2.80354, -65)
        z2 = z1 + PP(7.18421, -27)
        c3 = z2 + PP(2.39474, -162)
        c4 = z2 + PP(0.21865, 17)
        z3 = z2 + PP(0.655949, 62)
        c5 = z3 + PP(0.21865, -86)
        c6 = z3 + PP(0.255029, 93)
        #z4 = z3 + PP(0.765082, 124)
        z4 = z5 - PP(1.77106, ta + -10)
        c7 = z4 + PP(0.255027, -1)
        #c8 = z4 + PP(0.590353, 178)
        #z5 = z4 + PP(1.77106, -128)
        #c9 = z5 + PP(0.598685, 62)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLswr(cls, ta=None, **kwargs):
        #M 103.93,563.794 C 103.93,575.55 104.936,586.1945 108.2525,593.45087 111.569,600.70725 119.93789,604.81924 126.438,602.779 127.03157,602.59269 127.52527,601.71615 127.314,601.131 126.98538,600.22082 125.41271,599.46286 124.62812,600.02928 123.78205,600.64007 124.92487,602.02139 124.84411,603.15232

        #z0 = P(0, -0)
        #c0 = P(0, -4.13176)
        #c1 = P(0.353569, -7.87288)
        #z1 = P(1.51919, -10.4232)
        #c2 = P(2.6848, -12.9735)
        #c3 = P(5.62613, -14.4187)
        #z2 = P(7.91066, -13.7017)
        #c4 = P(8.11927, -13.6362)
        #c5 = P(8.29279, -13.3281)
        #z3 = P(8.21854, -13.1225)
        #c6 = P(8.10304, -12.8026)
        #c7 = P(7.55031, -12.5362)
        #z4 = P(7.27456, -12.7352)
        #c8 = P(6.9772, -12.9499)
        #c9 = P(7.37885, -13.4354)
        z5 = P(7.35047, -13.8329)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.13176)
        #z1 = z0 + P(1.51919, -10.4232)
        #c1 = z1 + P(-1.16562, 2.55032)
        #c2 = z1 + P(1.16562, -2.55033)
        #z2 = z1 + P(6.39147, -3.27846)
        #c3 = z2 + P(-2.28453, -0.717062)
        #c4 = z2 + P(0.208616, 0.0654805)
        #z3 = z2 + P(0.307879, 0.579206)
        #c5 = z3 + P(0.0742529, -0.205657)
        #c6 = z3 + P(-0.115497, 0.319892)
        #z4 = z3 + P(-0.943979, 0.38721)
        #c7 = z4 + P(0.275752, 0.199074)
        #c8 = z4 + P(-0.29736, -0.214668)
        #z5 = z4 + P(0.0759118, -1.09762)
        #c9 = z5 + P(0.0283839, 0.397477)

        z0 = P(0, -0)
        c0 = z0 + PP(4.13176, -90)
        z1 = z0 + PP(10.5333, -81)
        c1 = z1 + PP(2.80407, 114)
        c2 = z1 + PP(2.80407, -65)
        z2 = z1 + PP(7.18326, -27)
        c3 = z2 + PP(2.39442, -162)
        c4 = z2 + PP(0.218651, 17)
        z3 = z2 + PP(0.655949, 62)
        c5 = z3 + PP(0.218651, -70)
        c6 = z3 + PP(0.340103, 109)
        #z4 = z3 + PP(1.02031, 157)
        z4 = z5 - PP(1.10025, ta + 9)
        c7 = z4 + PP(0.340102, 35)
        #c8 = z4 + PP(0.366749, -144)
        #z5 = z4 + PP(1.10025, -86)
        #c9 = z5 + PP(0.398489, 85)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SELCLswl(cls, ta=None, **kwargs):
        #M 154.495,563.794 C 154.495,587.306 158.6448,606.96317 177.003,602.779 178.82332,602.36412 177.72226,600.25488 176.565,600.372 174.91931,600.53855 172.38217,602.17613 171.24917,603.30913

        #z0 = P(0, -0)
        #c0 = P(0, -8.26352)
        #c1 = P(1.45849, -15.1722)
        #z1 = P(7.91066, -13.7017)
        #c2 = P(8.55043, -13.5558)
        #c3 = P(8.16345, -12.8145)
        #z2 = P(7.75672, -12.8557)
        #c4 = P(7.17833, -12.9142)
        #c5 = P(6.28662, -13.4898)
        z3 = P(5.88842, -13.888)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.26352)
        #z1 = z0 + P(7.91066, -13.7017)
        #c1 = z1 + P(-6.45217, -1.47057)
        #c2 = z1 + P(0.639769, 0.145814)
        #z2 = z1 + P(-0.153939, 0.845964)
        #c3 = z2 + P(0.40673, 0.041163)
        #c4 = z2 + P(-0.578394, -0.0585356)
        #z3 = z2 + P(-1.8683, -1.03228)
        #c5 = z3 + P(0.398204, 0.398204)

        z0 = P(0, -0)
        c0 = z0 + PP(8.26352, -90)
        z1 = z0 + PP(15.8213, -60)
        c1 = z1 + PP(6.61763, -167)
        c2 = z1 + PP(0.656176, 12)
        z2 = z1 + PP(0.859856, 100)
        #z2 = z3 - PP(2.13452, ta + -16)
        c3 = z2 + PP(0.408808, 5)
        #c4 = z2 + PP(0.581348, -174)
        #z3 = z2 + PP(2.13452, -151)
        #c5 = z3 + PP(0.563146, 45)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SELCLE(cls, ta=None, **kwwargs):
        #M 253.084,152.622 C 253.084,176.046 257.042,194.951 275.456,191.372 277.076,191.087 277.17421,190.02143 277.27512,189.041 277.32772,188.5299 277.07118,187.84914 276.59419,187.65815 275.71835,187.30746 274.45666,187.43738 273.93696,188.63271 273.29456,190.11027 274.69423,189.874 277.10523,189.874 278.1259,189.874 279.06209,189.91624 280.08276,189.91624

        #z0 = P(0, -0)
        #c0 = P(0, -8.26347)
        #c1 = P(1.39629, -14.9327)
        #z1 = P(7.89234, -13.6701)
        #c2 = P(8.46384, -13.5696)
        #c3 = P(8.49849, -13.1937)
        #z2 = P(8.53409, -12.8478)
        #c4 = P(8.55265, -12.6675)
        #c5 = P(8.46214, -12.4274)
        #z3 = P(8.29387, -12.36)
        #c6 = P(7.9849, -12.2363)
        #c7 = P(7.5398, -12.2821)
        #z4 = P(7.35646, -12.7038)
        #c8 = P(7.12984, -13.225)
        #c9 = P(7.62361, -13.1417)
        #z5 = P(8.47416, -13.1417)
        #c10 = P(8.83423, -13.1417)
        #c11 = P(9.16449, -13.1566)
        z6 = P(9.52456, -13.1566)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -8.26347)
        #z1 = z0 + P(7.89234, -13.6701)
        #c1 = z1 + P(-6.49605, -1.26259)
        #c2 = z1 + P(0.5715, 0.100542)
        #z2 = z1 + P(0.641745, 0.822325)
        #c3 = z2 + P(-0.0355988, -0.345874)
        #c4 = z2 + P(0.0185561, 0.180305)
        #z3 = z2 + P(-0.240217, 0.487839)
        #c5 = z3 + P(0.168271, -0.067377)
        #c6 = z3 + P(-0.308977, 0.123716)
        #z4 = z3 + P(-0.937412, -0.343803)
        #c7 = z4 + P(0.183339, 0.421686)
        #c8 = z4 + P(-0.226624, -0.52125)
        #z5 = z4 + P(1.1177, -0.4379)
        #c9 = z5 + P(-0.850547, 0)
        #c10 = z5 + P(0.36007, 0)
        #z6 = z5 + P(1.05041, -0.0149013)
        #c11 = z6 + P(-0.36007, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(8.26347, -90)
        z1 = z0 + PP(15.7849, -60)
        c1 = z1 + PP(6.61761, -169)
        c2 = z1 + PP(0.580277, 9)
        z2 = z1 + PP(1.0431, 52)
        c3 = z2 + PP(0.347701, -95)
        c4 = z2 + PP(0.181257, 84)
        z3 = z2 + PP(0.543775, 116)
        c5 = z3 + PP(0.181259, -21)
        c6 = z3 + PP(0.332825, 158)
        z4 = z3 + PP(0.998469, -159)
        c7 = z4 + PP(0.459817, 66)
        c8 = z4 + PP(0.568384, -113)
        z5 = z4 + PP(1.20042, -21)
        #z5 = z6 - PP(1.05051, ta + 0)
        c9 = z5 + PP(0.850547, 180)
        c10 = z5 + PP(0.36007, 0)
        z6 = z5 + PP(1.05051, 0)
        c11 = z6 + PP(0.36007, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            #curve(),
            endknot(*z6)])

class CharHen(CharHe):
    def __init__(self, name='hen', kana='„Å∏„Çì',
                 model='SEL16CL1E1F', head_type='SEL',
                 tail_type='EF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_SELCLE()]

class CharHeku(CharHe):
    def __init__(self, name='heku', kana='„Å∏„Åè',
                 model='BSEL16CL1', head_type='BSEL',
                 tail_type='SELCL1'):
        super().__init__(name, kana, model, head_type, tail_type)
