import math
from ..waseda.char import WasedaChar
#from ..waseda.fu import CharFu, CharFutsu
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharMe(WasedaChar):
    def __init__(self, name='me', kana='„ÇÅ',
                 model='ER16CR1', head_type='ER',
                 tail_type='ERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_ERCR(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 57.6016,55.3434 92.175339,50.283057 92.3712,55.5284 92.402744,56.373168 92.130492,57.268687 91.48906,57.731793 90.855286,58.18937 89.541093,58.5025 89.148293,57.874 88.515493,56.8208 90.353161,55.28368 91.173874,54.17056

        #z0 = P(0, -0)
        #c0 = P(3.60605, 1.1717)
        #c1 = P(15.7573, 2.9502)
        #z1 = P(15.8262, 1.10668)
        #c2 = P(15.8373, 0.809775)
        #c3 = P(15.7416, 0.495036)
        #z2 = P(15.5161, 0.332273)
        #c4 = P(15.2934, 0.171453)
        #c5 = P(14.8315, 0.0614)
        #z3 = P(14.6934, 0.282293)
        #c6 = P(14.471, 0.65245)
        #c7 = P(15.1169, 1.19269)
        z4 = P(15.4054, 1.5839)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60605, 1.1717)
        #z1 = z0 + P(15.8262, 1.10668)
        #c1 = z1 + P(-0.0688373, 1.84353)
        #c2 = z1 + P(0.0110865, -0.296902)
        #z2 = z1 + P(-0.310037, -0.774404)
        #c3 = z2 + P(0.225438, 0.162763)
        #c4 = z2 + P(-0.222746, -0.16082)
        #z3 = z2 + P(-0.822686, -0.0499801)
        #c5 = z3 + P(0.138053, -0.220893)
        #c6 = z3 + P(-0.222404, 0.370158)
        #z4 = z3 + P(0.71191, 1.30161)
        #c7 = z4 + P(-0.288448, -0.391217)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79163, 18)
        z1 = z0 + PP(15.8648, 4)
        c1 = z1 + PP(1.84481, 92)
        c2 = z1 + PP(0.297109, -87)
        z2 = z1 + PP(0.834161, -111)
        c3 = z2 + PP(0.278054, 35)
        c4 = z2 + PP(0.274734, -144)
        z3 = z2 + PP(0.824202, -176)
        #z3 = z4 - PP(1.48358, ta + 367)
        c5 = z3 + PP(0.260485, -57)
        c6 = z3 + PP(0.431833, 120)
        z4 = z3 + PP(1.48358, 61)
        c7 = z4 + PP(0.486058, -126)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_ERCRe(cls, ta=None, **kwargs):
        #M 47.3414,110.756 C 57.6016,107.422 92.188,102.362 92.3712,107.607 92.4154,108.452 92.05686,109.25945 91.399787,109.59341 90.521383,110.03987 89.116058,109.83747 88.489144,109.07728 88.190238,108.71483 87.938373,107.90387 88.511802,107.66805 89.085231,107.43223 90.875233,107.22442 92.290548,107.22442

        #z0 = P(0, -0)
        #c0 = P(3.60605, 1.17177)
        #c1 = P(15.7618, 2.95015)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8417, 0.809764)
        #c3 = P(15.7157, 0.525977)
        #z2 = P(15.4848, 0.408604)
        #c4 = P(15.176, 0.251691)
        #c5 = P(14.6821, 0.322826)
        #z3 = P(14.4618, 0.590003)
        #c6 = P(14.3567, 0.717389)
        #c7 = P(14.2682, 1.00241)
        #z4 = P(14.4697, 1.08529)
        #c8 = P(14.6713, 1.16817)
        #c9 = P(15.3004, 1.24121)
        z5 = P(15.7978, 1.24121)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60605, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0643874, 1.84341)
        #c2 = z1 + P(0.0155345, -0.296984)
        #z2 = z1 + P(-0.341413, -0.698143)
        #c3 = z2 + P(0.230935, 0.117374)
        #c4 = z2 + P(-0.308724, -0.156913)
        #z3 = z2 + P(-1.02297, 0.181399)
        #c5 = z3 + P(0.220335, -0.267176)
        #c6 = z3 + P(-0.105053, 0.127387)
        #z4 = z3 + P(0.00796338, 0.495288)
        #c7 = z4 + P(-0.201537, -0.0828813)
        #c8 = z4 + P(0.201537, 0.0828813)
        #z5 = z4 + P(1.32808, 0.155918)
        #c9 = z5 + P(-0.497426, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79165, 18)
        z1 = z0 + PP(15.8648, 4)
        c1 = z1 + PP(1.84453, 92)
        c2 = z1 + PP(0.29739, -87)
        z2 = z1 + PP(0.777153, -116)
        c3 = z2 + PP(0.259051, 26)
        c4 = z2 + PP(0.346312, -153)
        z3 = z2 + PP(1.03893, 169)
        c5 = z3 + PP(0.34631, -50)
        c6 = z3 + PP(0.165117, 129)
        #z4 = z3 + PP(0.495352, 89)
        z4 = z5 - PP(1.3372, ta + 6)
        c7 = z4 + PP(0.217914, -157)
        #c8 = z4 + PP(0.217914, 22)
        #z5 = z4 + PP(1.3372, 6)
        #c9 = z5 + PP(0.497426, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_ERCRer(cls, ta=None, **kwargs):
        #M 225.657,110.756 C 235.917,107.422 270.686,102.41601 270.686,107.607 270.731,108.452 270.24002,108.93914 269.68005,109.25824 269.02518,109.63142 267.78299,109.94603 267.419,109.286 266.81588,108.19236 268.21501,106.71333 269.457,106.142

        #z0 = P(0, -0)
        #c0 = P(3.60598, 1.17177)
        #c1 = P(15.8259, 2.93117)
        #z1 = P(15.8259, 1.10675)
        #c2 = P(15.8417, 0.809764)
        #c3 = P(15.6691, 0.638553)
        #z2 = P(15.4723, 0.526403)
        #c4 = P(15.2422, 0.395245)
        #c5 = P(14.8056, 0.284672)
        #z3 = P(14.6777, 0.516646)
        #c6 = P(14.4657, 0.901017)
        #c7 = P(14.9574, 1.42084)
        z4 = P(15.3939, 1.62164)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60598, 1.17177)
        #z1 = z0 + P(15.8259, 1.10675)
        #c1 = z1 + P(0, 1.82442)
        #c2 = z1 + P(0.0158157, -0.296984)
        #z2 = z1 + P(-0.353551, -0.580345)
        #c3 = z2 + P(0.196807, 0.112151)
        #c4 = z2 + P(-0.230161, -0.131158)
        #z3 = z2 + P(-0.794668, -0.00975653)
        #c5 = z3 + P(0.127928, -0.231974)
        #c6 = z3 + P(-0.211972, 0.384371)
        #z4 = z3 + P(0.716275, 1.10499)
        #c7 = z4 + P(-0.43651, -0.2008)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79159, 18)
        z1 = z0 + PP(15.8645, 4)
        c1 = z1 + PP(1.82442, 90)
        c2 = z1 + PP(0.297404, -86)
        z2 = z1 + PP(0.679557, -121)
        c3 = z2 + PP(0.226519, 29)
        c4 = z2 + PP(0.264908, -150)
        #z3 = z2 + PP(0.794728, -179)
        z3 = z4 - PP(1.31683, ta + 392)
        c5 = z3 + PP(0.26491, -61)
        #c6 = z3 + PP(0.438945, 118)
        #z4 = z3 + PP(1.31683, 57)
        #c7 = z4 + PP(0.48048, -155)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRel(cls, ta=None, **kwargs):
        #M 142.168,110.756 C 152.428,107.422 187.015,102.362 187.198,107.607 187.242,108.452 187.08837,109.46249 186.39092,109.82982 185.50283,110.29757 184.02262,109.91771 183.47554,109.07617 183.01241,108.36374 183.14766,106.96756 183.89413,106.56158 184.94008,105.99272 186.43589,107.51627 187.17057,107.98405

        #z0 = P(0, -0)
        #c0 = P(3.60598, 1.17177)
        #c1 = P(15.7619, 2.95015)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8417, 0.809764)
        #c3 = P(15.7877, 0.454617)
        #z2 = P(15.5426, 0.325515)
        #c4 = P(15.2305, 0.16112)
        #c5 = P(14.7102, 0.294625)
        #z3 = P(14.5179, 0.590393)
        #c6 = P(14.3552, 0.840783)
        #c7 = P(14.4027, 1.33148)
        #z4 = P(14.6651, 1.47417)
        #c8 = P(15.0327, 1.6741)
        #c9 = P(15.5584, 1.13864)
        z5 = P(15.8166, 0.974229)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60598, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0643172, 1.84341)
        #c2 = z1 + P(0.0154642, -0.296984)
        #z2 = z1 + P(-0.283656, -0.781232)
        #c3 = z2 + P(0.245126, 0.129102)
        #c4 = z2 + P(-0.312128, -0.164395)
        #z3 = z2 + P(-1.02464, 0.264878)
        #c5 = z3 + P(0.192277, -0.295768)
        #c6 = z3 + P(-0.162772, 0.250391)
        #z4 = z3 + P(0.147118, 0.883777)
        #c7 = z4 + P(-0.262354, -0.142686)
        #c8 = z4 + P(0.367609, 0.199931)
        #z5 = z4 + P(1.15154, -0.499941)
        #c9 = z5 + P(-0.258211, 0.164406)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79159, 18)
        z1 = z0 + PP(15.8649, 4)
        c1 = z1 + PP(1.84453, 91)
        c2 = z1 + PP(0.297386, -87)
        z2 = z1 + PP(0.831134, -109)
        c3 = z2 + PP(0.277045, 27)
        c4 = z2 + PP(0.352774, -152)
        z3 = z2 + PP(1.05832, 165)
        c5 = z3 + PP(0.352773, -56)
        c6 = z3 + PP(0.298647, 123)
        #z4 = z3 + PP(0.895939, 80)
        z4 = z5 - PP(1.25538, ta + 10)
        c7 = z4 + PP(0.298645, -151)
        #c8 = z4 + PP(0.418461, 28)
        #z5 = z4 + PP(1.25538, -23)
        #c9 = z5 + PP(0.306108, 147)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_ERCRne(cls, ta=None, **kwargs):
        #M 47.3414,162.835 C 57.6016,159.502 92.3712,154.52878 92.3712,159.686 92.4154,160.531 91.827059,160.81348 91.3108,161.094 90.637029,161.4601 89.394907,161.92196 89.016029,161.25529 88.420629,160.20762 90.119272,159.0368 91.079216,158.28676

        #z0 = P(0, -0)
        #c0 = P(3.60605, 1.17142)
        #c1 = P(15.8262, 2.9193)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8417, 0.809764)
        #c3 = P(15.6349, 0.710483)
        #z2 = P(15.4535, 0.611892)
        #c4 = P(15.2167, 0.483222)
        #c5 = P(14.7801, 0.320897)
        #z3 = P(14.647, 0.555205)
        #c6 = P(14.4377, 0.923419)
        #c7 = P(15.0347, 1.33491)
        z4 = P(15.3721, 1.59852)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60605, 1.17142)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(0, 1.81256)
        #c2 = z1 + P(0.0155345, -0.296984)
        #z2 = z1 + P(-0.372688, -0.494856)
        #c3 = z2 + P(0.181444, 0.0985915)
        #c4 = z2 + P(-0.236803, -0.128669)
        #z3 = z2 + P(-0.80652, -0.056687)
        #c5 = z3 + P(0.13316, -0.234308)
        #c6 = z3 + P(-0.209259, 0.368214)
        #z4 = z3 + P(0.725127, 1.04332)
        #c7 = z4 + P(-0.337382, -0.263609)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79154, 17)
        z1 = z0 + PP(15.8648, 4)
        c1 = z1 + PP(1.81256, 90)
        c2 = z1 + PP(0.29739, -87)
        z2 = z1 + PP(0.619498, -126)
        c3 = z2 + PP(0.2065, 28)
        c4 = z2 + PP(0.269503, -151)
        #z3 = z2 + PP(0.80851, -175)
        z3 = z4 - PP(1.27056, ta + 376)
        c5 = z3 + PP(0.269503, -60)
        #c6 = z3 + PP(0.423522, 119)
        #z4 = z3 + PP(1.27056, 55)
        #c7 = z4 + PP(0.428154, -141)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRner(cls, ta=None, **kwargs):
        #M 209.486,162.835 C 219.746,159.502 254.32051,154.44145 254.516,159.686 254.54752,160.53156 254.39512,160.86212 253.98162,161.20371 253.5751,161.53955 252.81633,161.7826 252.41718,161.43804 251.55301,160.69205 251.90445,159.20136 252.42453,158.0132

        #z0 = P(0, -0)
        #c0 = P(3.60598, 1.17142)
        #c1 = P(15.7575, 2.95)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8373, 0.809567)
        #c3 = P(15.7838, 0.693388)
        #z2 = P(15.6384, 0.573333)
        #c4 = P(15.4955, 0.455299)
        #c5 = P(15.2289, 0.369876)
        #z3 = P(15.0886, 0.490975)
        #c6 = P(14.7849, 0.753161)
        #c7 = P(14.9084, 1.27708)
        z4 = P(15.0912, 1.69467)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60598, 1.17142)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0687069, 1.84325)
        #c2 = z1 + P(0.011078, -0.29718)
        #z2 = z1 + P(-0.187813, -0.533414)
        #c3 = z2 + P(0.145329, 0.120055)
        #c4 = z2 + P(-0.142875, -0.118034)
        #z3 = z2 + P(-0.549838, -0.0823576)
        #c5 = z3 + P(0.140285, -0.121099)
        #c6 = z3 + P(-0.303721, 0.262186)
        #z4 = z3 + P(0.00258323, 1.20369)
        #c7 = z4 + P(-0.182787, -0.417591)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79148, 17)
        z1 = z0 + PP(15.8649, 4)
        c1 = z1 + PP(1.84453, 92)
        c2 = z1 + PP(0.297387, -87)
        z2 = z1 + PP(0.565513, -109)
        c3 = z2 + PP(0.188504, 39)
        c4 = z2 + PP(0.185325, -140)
        #z3 = z2 + PP(0.555972, -171)
        z3 = z4 - PP(1.2037, ta + 382)
        c5 = z3 + PP(0.185324, -40)
        #c6 = z3 + PP(0.401233, 139)
        #z4 = z3 + PP(1.2037, 89)
        #c7 = z4 + PP(0.455843, -113)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRnel(cls, ta=None, **kwargs):
        #M 128.779,162.835 C 139.039,159.502 173.61351,154.44145 173.809,159.686 173.84052,160.53156 172.87612,160.96956 172.17749,161.00623 171.18901,161.05811 169.56956,160.3731 169.68624,159.39016 169.80965,158.35047 171.5042,158.52152 172.6483,158.34519

        #z0 = P(0, -0)
        #c0 = P(3.60598, 1.17142)
        #c1 = P(15.7575, 2.95)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8373, 0.809567)
        #c3 = P(15.4984, 0.655627)
        #z2 = P(15.2528, 0.642739)
        #c4 = P(14.9054, 0.624506)
        #c5 = P(14.3362, 0.865259)
        #z3 = P(14.3773, 1.21072)
        #c6 = P(14.4206, 1.57613)
        #c7 = P(15.0162, 1.51602)
        z4 = P(15.4183, 1.57799)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60598, 1.17142)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0687069, 1.84325)
        #c2 = z1 + P(0.011078, -0.29718)
        #z2 = z1 + P(-0.57341, -0.464008)
        #c3 = z2 + P(0.24554, 0.012888)
        #c4 = z2 + P(-0.347411, -0.0182337)
        #z3 = z2 + P(-0.875574, 0.567984)
        #c5 = z3 + P(-0.0410083, -0.345464)
        #c6 = z3 + P(0.0433737, 0.365409)
        #z4 = z3 + P(1.04105, 0.367265)
        #c7 = z4 + P(-0.402105, -0.0619729)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79148, 17)
        z1 = z0 + PP(15.8649, 4)
        c1 = z1 + PP(1.84453, 92)
        c2 = z1 + PP(0.297387, -87)
        z2 = z1 + PP(0.737633, -141)
        c3 = z2 + PP(0.245878, 3)
        c4 = z2 + PP(0.347889, -176)
        #z3 = z2 + PP(1.04366, 147)
        z3 = z4 - PP(1.10393, ta + 370)
        c5 = z3 + PP(0.347889, -96)
        #c6 = z3 + PP(0.367975, 83)
        #z4 = z3 + PP(1.10393, 19)
        #c7 = z4 + PP(0.406853, -171)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRs(cls, ta=None, **kwargs):
        #M 47.3414,200.338 C 57.6016,197.004 92.175332,191.94346 92.3712,197.189 92.402736,198.03357 92.282395,198.44321 91.840242,198.79106 91.421237,199.1207 90.687173,199.22247 90.24628,198.92273 89.192526,198.20635 89.137643,196.46703 89.137643,195.26441

        #z0 = P(0, -0)
        #c0 = P(3.60605, 1.17177)
        #c1 = P(15.7573, 2.95034)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8373, 0.809915)
        #c3 = P(15.795, 0.665943)
        #z2 = P(15.6396, 0.543687)
        #c4 = P(15.4923, 0.427832)
        #c5 = P(15.2343, 0.392064)
        #z3 = P(15.0793, 0.497411)
        #c6 = P(14.709, 0.749189)
        #c7 = P(14.6897, 1.36049)
        z4 = P(14.6897, 1.78316)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60605, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0688397, 1.8436)
        #c2 = z1 + P(0.0110836, -0.296832)
        #z2 = z1 + P(-0.18661, -0.56306)
        #c3 = z2 + P(0.155399, 0.122255)
        #c4 = z2 + P(-0.147263, -0.115855)
        #z3 = z2 + P(-0.560214, -0.0462767)
        #c5 = z3 + P(0.154956, -0.105347)
        #c6 = z3 + P(-0.370352, 0.251779)
        #z4 = z3 + P(-0.389641, 1.28575)
        #c7 = z4 + P(0, -0.422673)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79165, 18)
        z1 = z0 + PP(15.8648, 4)
        c1 = z1 + PP(1.84488, 92)
        c2 = z1 + PP(0.297039, -87)
        z2 = z1 + PP(0.593178, -108)
        c3 = z2 + PP(0.197725, 38)
        c4 = z2 + PP(0.187374, -141)
        z3 = z2 + PP(0.562122, -175)
        #z3 = z4 - PP(1.3435, ta + 376)
        c5 = z3 + PP(0.187375, -34)
        #c6 = z3 + PP(0.447832, 145)
        #z4 = z3 + PP(1.3435, 106)
        #c7 = z4 + PP(0.422673, -90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta+180)])

    @classmethod
    def path_ERCRsl(cls, ta=None, **kwargs):
        #M 133.664,200.338 C 143.924,197.004 178.511,191.943 178.694,197.189 178.738,198.033 178.34508,198.55757 177.80119,198.90252 177.26579,199.24208 176.34045,199.43517 175.90071,198.97846 175.07257,198.11835 175.5339,196.65859 176.17911,195.40733

        #z0 = P(0, -0)
        #c0 = P(3.60598, 1.17177)
        #c1 = P(15.7619, 2.95051)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8417, 0.810115)
        #c3 = P(15.7036, 0.62575)
        #z2 = P(15.5125, 0.504514)
        #c4 = P(15.3243, 0.385172)
        #c5 = P(14.9991, 0.317309)
        #z3 = P(14.8445, 0.477824)
        #c6 = P(14.5535, 0.780118)
        #c7 = P(14.7156, 1.29316)
        #z4 = P(14.9424, 1.73293)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60598, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0643172, 1.84376)
        #c2 = z1 + P(0.0154642, -0.296632)
        #z2 = z1 + P(-0.313787, -0.602234)
        #c3 = z2 + P(0.191156, 0.121236)
        #c4 = z2 + P(-0.188172, -0.119342)
        #z3 = z2 + P(-0.667942, -0.0266899)
        #c5 = z3 + P(0.154551, -0.160515)
        #c6 = z3 + P(-0.291058, 0.302294)
        #z4 = z3 + P(0.0978464, 1.25511)
        #c7 = z4 + P(-0.226765, -0.439768)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79159, 18)
        z1 = z0 + PP(15.8649, 4)
        c1 = z1 + PP(1.84488, 91)
        c2 = z1 + PP(0.297035, -87)
        z2 = z1 + PP(0.679078, -117)
        c3 = z2 + PP(0.226359, 32)
        c4 = z2 + PP(0.222825, -147)
        z3 = z2 + PP(0.668475, -177)
        #z3 = z4 - PP(1.25892, ta + 382)
        c5 = z3 + PP(0.222825, -46)
        #c6 = z3 + PP(0.419639, 133)
        z4 = z3 + PP(1.25892, 85)
        #c7 = z4 + PP(0.494791, -117)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta+180)])

    @classmethod
    def path_ERCRsr(cls, ta=None, **kwargs):
        #M 219.987,200.338 C 230.247,197.004 264.82148,191.94345 265.017,197.189 265.04848,198.03356 264.81811,198.36447 264.34712,198.54027 263.82834,198.7339 263.24555,198.24698 262.81452,197.89937 261.93976,197.19388 261.56629,196.23878 260.88452,195.13506

        #z0 = P(0, -0)
        #c0 = P(3.60598, 1.17177)
        #c1 = P(15.7575, 2.95035)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8373, 0.809918)
        #c3 = P(15.7563, 0.693617)
        #z2 = P(15.5908, 0.63183)
        #c4 = P(15.4085, 0.563777)
        #c5 = P(15.2036, 0.73491)
        #z3 = P(15.0522, 0.857081)
        #c6 = P(14.7447, 1.10503)
        #c7 = P(14.6135, 1.44071)
        #z4 = P(14.3738, 1.82862)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60598, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0687174, 1.8436)
        #c2 = z1 + P(0.011064, -0.296829)
        #z2 = z1 + P(-0.235436, -0.474917)
        #c3 = z2 + P(0.165534, 0.0617866)
        #c4 = z2 + P(-0.18233, -0.0680532)
        #z3 = z2 + P(-0.538647, 0.225251)
        #c5 = z3 + P(0.15149, -0.122171)
        #c6 = z3 + P(-0.307443, 0.247951)
        #z4 = z3 + P(-0.678318, 0.971544)
        #c7 = z4 + P(0.239615, -0.387913)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79159, 18)
        z1 = z0 + PP(15.8649, 4)
        c1 = z1 + PP(1.84488, 92)
        c2 = z1 + PP(0.297035, -87)
        z2 = z1 + PP(0.530072, -116)
        c3 = z2 + PP(0.176689, 20)
        c4 = z2 + PP(0.194617, -159)
        z3 = z2 + PP(0.583848, 157)
        #z3 = z4 - PP(1.18491, ta + 362)
        c5 = z3 + PP(0.194615, -38)
        #c6 = z3 + PP(0.39497, 141)
        z4 = z3 + PP(1.18491, 124)
        #c7 = z4 + PP(0.455952, -58)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta+180)])

    @classmethod
    def path_ERCRse(cls, ta=None, **kwargs):
        #M 47.3414,275.094 C 57.6016,271.76 92.188,266.699 92.3712,271.945 92.4154,272.789 91.854771,273.13065 91.3108,273.352 90.415422,273.71634 88.773626,273.82156 88.444263,272.91273 88.161139,272.13149 89.263436,271.05419 90.094331,271.04413 90.992296,271.03326 91.355116,271.98588 91.925972,273.01979

        #z0 = P(0, -0)
        #c0 = P(3.60605, 1.17177)
        #c1 = P(15.7618, 2.95051)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8417, 0.810115)
        #c3 = P(15.6447, 0.690039)
        #z2 = P(15.4535, 0.612243)
        #c4 = P(15.1388, 0.484192)
        #c5 = P(14.5618, 0.447212)
        #z3 = P(14.446, 0.766629)
        #c6 = P(14.3465, 1.0412)
        #c7 = P(14.7339, 1.41983)
        #z4 = P(15.0259, 1.42337)
        #c8 = P(15.3415, 1.42719)
        #c9 = P(15.4691, 1.09238)
        z5 = P(15.6697, 0.729002)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60605, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0643874, 1.84376)
        #c2 = z1 + P(0.0155345, -0.296632)
        #z2 = z1 + P(-0.372688, -0.494504)
        #c3 = z2 + P(0.191184, 0.0777956)
        #c4 = z2 + P(-0.314689, -0.128051)
        #z3 = z2 + P(-1.00747, 0.154386)
        #c5 = z3 + P(0.115758, -0.319417)
        #c6 = z3 + P(-0.0995067, 0.274575)
        #z4 = z3 + P(0.579933, 0.656738)
        #c7 = z4 + P(-0.292026, -0.00353569)
        #c8 = z4 + P(0.315599, 0.00382037)
        #z5 = z4 + P(0.643748, -0.694365)
        #c9 = z5 + P(-0.200633, 0.363378)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79165, 18)
        z1 = z0 + PP(15.8648, 4)
        c1 = z1 + PP(1.84488, 92)
        c2 = z1 + PP(0.297039, -87)
        z2 = z1 + PP(0.619218, -127)
        c3 = z2 + PP(0.206406, 22)
        c4 = z2 + PP(0.339745, -157)
        z3 = z2 + PP(1.01923, 171)
        c5 = z3 + PP(0.339746, -70)
        c6 = z3 + PP(0.292049, 109)
        #z4 = z3 + PP(0.876143, 48)
        z4 = z5 - PP(0.946866, ta + 15)
        c7 = z4 + PP(0.292048, -179)
        #c8 = z4 + PP(0.315622, 0)
        #z5 = z4 + PP(0.946866, -47)
        #c9 = z5 + PP(0.415087, 118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_ERCRser(cls, ta=None, **kwargs):
        #M 125.16,275.094 C 135.421,271.76 170.007,266.699 170.19,271.945 170.234,272.789 170.00327,273.29742 169.50205,273.65014 168.74836,274.18053 167.41521,274.38484 166.73935,273.75829 166.16763,273.22827 166.07299,271.941 166.65387,271.42103 167.54171,270.62629 169.4389,271.47906 170.19,271.945

        #z0 = P(0, -0)
        #c0 = P(3.60633, 1.17177)
        #c1 = P(15.7619, 2.95051)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8417, 0.810115)
        #c3 = P(15.7606, 0.631426)
        #z2 = P(15.5845, 0.507459)
        #c4 = P(15.3196, 0.321048)
        #c5 = P(14.851, 0.249241)
        #z3 = P(14.6135, 0.469448)
        #c6 = P(14.4125, 0.655729)
        #c7 = P(14.3793, 1.10815)
        #z4 = P(14.5834, 1.2909)
        #c8 = P(14.8955, 1.57022)
        #c9 = P(15.5623, 1.27051)
        z5 = P(15.8262, 1.10675)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60633, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0643172, 1.84376)
        #c2 = z1 + P(0.0154642, -0.296632)
        #z2 = z1 + P(-0.241787, -0.599288)
        #c3 = z2 + P(0.176159, 0.123967)
        #c4 = z2 + P(-0.264892, -0.186411)
        #z3 = z2 + P(-0.970978, -0.0380104)
        #c5 = z3 + P(0.237538, -0.220207)
        #c6 = z3 + P(-0.200937, 0.186281)
        #z4 = z3 + P(-0.0300428, 0.821453)
        #c7 = z4 + P(-0.204156, -0.182749)
        #c8 = z4 + P(0.31204, 0.279319)
        #z5 = z4 + P(1.24281, -0.184154)
        #c9 = z5 + P(-0.263982, 0.163759)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79192, 17)
        z1 = z0 + PP(15.8649, 4)
        c1 = z1 + PP(1.84488, 91)
        c2 = z1 + PP(0.297035, -87)
        z2 = z1 + PP(0.646225, -111)
        c3 = z2 + PP(0.215406, 35)
        c4 = z2 + PP(0.323908, -144)
        z3 = z2 + PP(0.971722, -177)
        c5 = z3 + PP(0.323906, -42)
        c6 = z3 + PP(0.274, 137)
        #z4 = z3 + PP(0.822002, 92)
        z4 = z5 - PP(1.25638, ta + 24)
        c7 = z4 + PP(0.274001, -138)
        #c8 = z4 + PP(0.418794, 41)
        #z5 = z4 + PP(1.25638, -8)
        #c9 = z5 + PP(0.31065, 148)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_ERCRsel(cls, ta=None, **kwargs):
        #M 208.649,275.094 C 218.909,271.76 253.48769,266.69926 253.678,271.945 253.73446,273.50129 252.67296,274.10346 251.52714,273.623 250.37986,273.14193 250.43931,271.27794 250.51072,270.03188

        #z0 = P(0, -0)
        #c0 = P(3.60598, 1.17177)
        #c1 = P(15.759, 2.95041)
        #z1 = P(15.8259, 1.10675)
        #c2 = P(15.8457, 0.559774)
        #c3 = P(15.4727, 0.348135)
        #z2 = P(15.0699, 0.516997)
        #c4 = P(14.6667, 0.686074)
        #c5 = P(14.6876, 1.34119)
        #z3 = P(14.7127, 1.77913)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60598, 1.17177)
        #z1 = z0 + P(15.8259, 1.10675)
        #c1 = z1 + P(-0.0668863, 1.84367)
        #c2 = z1 + P(0.0198434, -0.546973)
        #z2 = z1 + P(-0.755941, -0.58975)
        #c3 = z2 + P(0.40271, -0.168862)
        #c4 = z2 + P(-0.403223, 0.169077)
        #z3 = z2 + P(-0.357231, 1.26213)
        #c5 = z3 + P(-0.0250977, -0.43794)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79159, 18)
        z1 = z0 + PP(15.8645, 4)
        c1 = z1 + PP(1.84488, 92)
        c2 = z1 + PP(0.547333, -87)
        z2 = z1 + PP(0.958776, -142)
        #z2 = z3 - PP(1.31172, ta + 378)
        c3 = z2 + PP(0.43668, -22)
        #c4 = z2 + PP(0.437236, 157)
        z3 = z2 + PP(1.31172, 105)
        #c5 = z3 + PP(0.438659, -93)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRsw(cls, ta=None, **kwargs):
        #M 47.3414,344.124 C 57.6016,340.79 92.093667,335.73314 92.3712,340.975 92.478539,343.00234 91.331078,343.92013 90.305054,343.53391 89.004284,343.04428 90.232717,340.61376 90.475017,339.36776

        #z0 = P(0, -0)
        #c0 = P(3.60605, 1.17177)
        #c1 = P(15.7286, 2.94905)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8639, 0.394218)
        #c3 = P(15.4606, 0.0716521)
        #z2 = P(15.1, 0.207393)
        #c4 = P(14.6428, 0.379478)
        #c5 = P(15.0746, 1.23371)
        #z3 = P(15.1597, 1.67163)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60605, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0975417, 1.8423)
        #c2 = z1 + P(0.0377254, -0.712529)
        #z2 = z1 + P(-0.726167, -0.899354)
        #c3 = z2 + P(0.360606, -0.135741)
        #c4 = z2 + P(-0.457168, 0.172085)
        #z3 = z2 + P(0.0597352, 1.46423)
        #c5 = z3 + P(-0.0851587, -0.437919)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79165, 18)
        z1 = z0 + PP(15.8648, 4)
        c1 = z1 + PP(1.84488, 93)
        c2 = z1 + PP(0.713527, -86)
        z2 = z1 + PP(1.15592, -128)
        #z2 = z3 - PP(1.46545, ta + 368)
        c3 = z2 + PP(0.385308, -20)
        #c4 = z2 + PP(0.488484, 159)
        z3 = z2 + PP(1.46545, 87)
        #c5 = z3 + PP(0.446122, -101)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRswr(cls, ta=None, **kwargs):
        #M 129.786,344.124 C 140.046,340.79 174.75363,335.72618 174.816,340.975 174.83213,342.33234 174.52922,342.83317 173.84242,342.79457 172.56235,342.72261 172.65214,340.68544 172.41933,339.22126

        #z0 = P(0, -0)
        #c0 = P(3.60598, 1.17177)
        #c1 = P(15.8043, 2.9515)
        #z1 = P(15.8262, 1.10675)
        #c2 = P(15.8319, 0.629697)
        #c3 = P(15.7254, 0.453675)
        #z2 = P(15.4841, 0.467241)
        #c4 = P(15.0342, 0.492532)
        #c5 = P(15.0657, 1.20852)
        #z3 = P(14.9839, 1.72312)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.60598, 1.17177)
        #z1 = z0 + P(15.8262, 1.10675)
        #c1 = z1 + P(-0.0219206, 1.84475)
        #c2 = z1 + P(0.00566905, -0.477051)
        #z2 = z1 + P(-0.342174, -0.639506)
        #c3 = z2 + P(0.241383, -0.0135664)
        #c4 = z2 + P(-0.449893, 0.0252911)
        #z3 = z2 + P(-0.500159, 1.25588)
        #c5 = z3 + P(0.0818234, -0.514601)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79159, 18)
        z1 = z0 + PP(15.8649, 4)
        c1 = z1 + PP(1.84488, 90)
        c2 = z1 + PP(0.477084, -89)
        z2 = z1 + PP(0.725294, -118)
        #z2 = z3 - PP(1.35181, ta + 371)
        c3 = z2 + PP(0.241764, -3)
        #c4 = z2 + PP(0.450604, 176)
        z3 = z2 + PP(1.35181, 111)
        #c5 = z3 + PP(0.521065, -80)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_ERCRswl(cls, ta=None, **kwargs):
        return cls.path_ERCR()

    @classmethod
    def path_ERCRNE(cls, ta=None, **kwargs):
        #M 380.146,110.925 C 390.424,107.783 425.008,102.65 425.008,107.788 425.052,108.63 424.55916,109.03395 424.03845,109.36513 423.45711,109.73487 422.37035,110.16994 421.98484,109.59893 421.30498,108.59196 422.56248,107.35467 423.721,106.394 424.40222,105.82912 425.08343,105.26423 425.76465,104.69935

        #z0 = P(0, -0)
        #c0 = P(3.62585, 1.10843)
        #c1 = P(15.8263, 2.91924)
        #z1 = P(15.8263, 1.10666)
        #c2 = P(15.8418, 0.809625)
        #c3 = P(15.668, 0.66712)
        #z2 = P(15.4843, 0.550287)
        #c4 = P(15.2792, 0.419851)
        #c5 = P(14.8958, 0.266368)
        #z3 = P(14.7598, 0.467808)
        #c6 = P(14.52, 0.823045)
        #c7 = P(14.9636, 1.25953)
        #z4 = P(15.3723, 1.59844)
        #c8 = P(15.6126, 1.79771)
        #c9 = P(15.8529, 1.99699)
        z5 = P(16.0932, 2.19627)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.62585, 1.10843)
        #z1 = z0 + P(15.8263, 1.10666)
        #c1 = z1 + P(0, 1.81257)
        #c2 = z1 + P(0.0155222, -0.297039)
        #z2 = z1 + P(-0.342036, -0.556376)
        #c3 = z2 + P(0.183695, 0.116833)
        #c4 = z2 + P(-0.205084, -0.130436)
        #z3 = z2 + P(-0.724468, -0.0824794)
        #c5 = z3 + P(0.135999, -0.20144)
        #c6 = z3 + P(-0.23984, 0.355237)
        #z4 = z3 + P(0.612479, 1.13063)
        #c7 = z4 + P(-0.4087, -0.338903)
        #c8 = z4 + P(0.240319, 0.199277)
        #z5 = z4 + P(0.720954, 0.597835)
        #c9 = z5 + P(-0.240319, -0.199277)

        z0 = P(0, -0)
        c0 = z0 + PP(3.79149, 16)
        z1 = z0 + PP(15.865, 3)
        c1 = z1 + PP(1.81257, 90)
        c2 = z1 + PP(0.297444, -87)
        z2 = z1 + PP(0.653103, -121)
        c3 = z2 + PP(0.217701, 32)
        c4 = z2 + PP(0.243049, -147)
        z3 = z2 + PP(0.729148, -173)
        c5 = z3 + PP(0.243051, -55)
        c6 = z3 + PP(0.428621, 124)
        z4 = z3 + PP(1.28587, 61)
        #z4 = z5 - PP(0.93658, ta + 359)
        c7 = z4 + PP(0.530934, -140)
        c8 = z4 + PP(0.312193, 39)
        z5 = z4 + PP(0.93658, 39)
        c9 = z5 + PP(0.312193, -140)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

class CharMen(CharMe):
    def __init__(self, name='men', kana='„ÇÅ„Çì',
                 model='ER16CR1NE1F', head_type='ER',
                 tail_type='ERCR1NE1F'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_ERCRNE()]

#class CharMeku(CharMe):
#    def __init__(self, name='meku', kana='„ÇÅ„Åè',
#                 model='BER16CR1', head_type='BER',
#                 tail_type='ERCR1'):
#        super().__init__(name, kana, model, head_type, tail_type)
#
#class CharMetsu(CharMe):
#    def __init__(self, name='metsu', kana='„ÇÅ„Å§',
#                 model='CR1ER16CR1', head_type='CR1ER',
#                 tail_type='ERCR1'):
#        super().__init__(name, kana, model, head_type, tail_type)
#
#class CharMondai(CharMe, CharFutsu):
#    def __init__(self, name='mondai', kana='„ÇÇ„Çì„Å†„ÅÑ',
#                 model='ER16CR1|XNE4F', head_type='ER|XNE', tail_type='ERCR1|NEF'):
#        super().__init__(name, kana, model, head_type, tail_type)
#
#    def get_paths(self):
#        if getattr(self.before, 'name', '') == 'no_joshi':
#            self.model = 'XNE4F' 
#            self.head_type = 'XNE'
#            self.tail_type = 'NEF'
#            return super(CharFutsu, self).get_paths()
#        else:
#            self.model = 'ER16CR1' 
#            self.head_type = 'ER'
#            self.tail_type = 'ERCR1'
#            return super(WasedaChar, self).get_paths()
#
#    def set_next_head(self, flick_len=2.0, dz=P(0, 0)):
#        if getattr(self.before, 'name', '') == 'no_joshi':
#            self.to_flick = True
#            super(CharFu, self).set_next_head()
#        else:
#            super(WasedaChar, self).set_next_head()
