import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)


class CharRu(WasedaChar):
    def __init__(self, name='ru', kana='る',
                 model='SER8CR4', head_type='SER',
                 tail_type='SERCR4'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.head_ligature = {'NER'}

    @classmethod
    def path_SERCR(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 52.7471,62.3234 63.598023,69.968491 60.1494,74.4937 57.44131,78.047197 54.044187,76.237778 54.994999,72.793249 55.696019,70.253646 57.198824,68.929175 58.342724,67.658775

        z0 = P(0, -0)
        c0 = P(1.90701, -1.2863)
        c1 = P(5.73498, -3.98332)
        z1 = P(4.51838, -5.57971)
        c2 = P(3.56302, -6.8333)
        c3 = P(2.36459, -6.19498)
        z2 = P(2.70002, -4.97983)
        c4 = P(2.94732, -4.08391)
        c5 = P(3.47748, -3.61667)
        z3 = P(3.88102, -3.1685)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SERCRe(cls, ta=None, **kwargs):
        #M 47.3414,125.182 C 52.7471,128.829 60.0693,135.551 59.8714,141.22 59.8714,144.878 51.77329,141.24179 52.54629,136.85779 53.03749,134.54779 55.406693,134.995 57.7323,134.995

        #z0 = P(0, -0)
        #c0 = P(1.89989, -1.28177)
        #c1 = P(4.47335, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.92235)
        #c3 = P(1.55763, -5.64437)
        #z2 = P(1.82931, -4.10357)
        #c4 = P(2.00195, -3.2917)
        #c5 = P(2.83463, -3.44888)
        z3 = P(3.65198, -3.44888)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89989, -1.28177)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695539, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-2.57448, 1.53314)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172637, 0.811872)
        #z3 = z2 + P(1.82267, 0.654696)
        #c5 = z3 + P(-0.817358, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29184, -34)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(1.28564, -90)
        #z2 = z1 + PP(2.99641, 149)
        z2 = z3 - PP(1.93669, ta + 19)
        c3 = z2 + PP(1.56457, -99)
        #c4 = z2 + PP(0.830024, 77)
        #z3 = z2 + PP(1.93669, 19)
        #c5 = z3 + PP(0.817358, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRer(cls, ta=None, **kwargs):
        #M 158.837,125.182 C 164.243,128.829 171.565,135.551 171.367,141.22 171.05588,145.02107 164.66888,143.86165 165.91,140.89139 166.69047,139.02359 168.1329,137.83002 170.05399,136.45204

        #z0 = P(0, -0)
        #c0 = P(1.89999, -1.28177)
        #c1 = P(4.47338, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.29445, -6.97264)
        #c3 = P(2.04967, -6.56515)
        #z2 = P(2.48588, -5.52122)
        #c4 = P(2.76018, -4.86476)
        #c5 = P(3.26714, -4.44527)
        z3 = P(3.94232, -3.96097)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89999, -1.28177)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(-0.109346, -1.33592)
        #z2 = z1 + P(-1.91792, 0.115493)
        #c3 = z2 + P(-0.436204, -1.04393)
        #c4 = z2 + P(0.274304, 0.656457)
        #z3 = z2 + P(1.45645, 1.56025)
        #c5 = z3 + P(-0.675186, -0.484305)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29192, -34)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.34039, -94)
        #z2 = z1 + PP(1.92139, 176)
        z2 = z3 - PP(2.13439, ta + 370)
        c3 = z2 + PP(1.1314, -112)
        #c4 = z2 + PP(0.711462, 67)
        #z3 = z2 + PP(2.13439, 46)
        #c5 = z3 + PP(0.83092, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRel(cls, ta=None, **kwargs):
        #M 108.759,125.182 C 114.164,128.829 121.487,135.551 121.289,141.22 121.289,144.878 114.60982,141.16709 115.38282,136.78309 115.87382,134.47309 117.96123,136.06696 120.27621,137.04206

        #z0 = P(0, -0)
        #c0 = P(1.89964, -1.28177)
        #c1 = P(4.47338, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.92235)
        #c3 = P(2.05633, -5.61812)
        #z2 = P(2.32801, -4.07732)
        #c4 = P(2.50057, -3.26545)
        #c5 = P(3.23421, -3.82563)
        z3 = P(4.04784, -4.16834)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89964, -1.28177)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-2.07579, 1.5594)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172567, 0.811872)
        #z3 = z2 + P(1.71983, -0.0910176)
        #c5 = z3 + P(-0.813623, 0.342709)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29163, -34)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28564, -90)
        #z2 = z1 + PP(2.59627, 143)
        z2 = z3 - PP(1.72224, ta + 20)
        c3 = z2 + PP(1.56457, -99)
        #c4 = z2 + PP(0.83001, 78)
        #z3 = z2 + PP(1.72224, -3)
        #c5 = z3 + PP(0.882854, 157)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRne(cls, ta=None, **kwargs):
        #M 47.3414,191.687 C 52.7471,195.334 60.0693,202.056 59.8714,207.725 59.8714,211.384 55.784997,211.23044 54.624973,209.75687 53.082578,207.79758 57.26204,204.87147 58.888872,203.61038

        #z0 = P(0, -0)
        #c0 = P(1.89989, -1.28177)
        #c1 = P(4.47335, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.92271)
        #c3 = P(2.96759, -6.86874)
        #z2 = P(2.55988, -6.35083)
        #c4 = P(2.01779, -5.66222)
        #c5 = P(3.48671, -4.63381)
        z3 = P(4.05847, -4.19059)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89989, -1.28177)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695539, 1.99243)
        #c2 = z1 + P(0, -1.28599)
        #z2 = z1 + P(-1.84391, -0.714121)
        #c3 = z2 + P(0.407702, -0.517901)
        #c4 = z2 + P(-0.54209, 0.688612)
        #z3 = z2 + P(1.49859, 2.16024)
        #c5 = z3 + P(-0.571766, -0.443223)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29184, -34)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(1.28599, -90)
        #z2 = z1 + PP(1.97736, -158)
        z2 = z3 - PP(2.62915, ta + 377)
        c3 = z2 + PP(0.659122, -51)
        #c4 = z2 + PP(0.876383, 128)
        #z3 = z2 + PP(2.62915, 55)
        #c5 = z3 + PP(0.723438, -142)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRner(cls, ta=None, **kwargs):
        #M 95.3696,191.687 C 100.775,195.334 108.097,202.056 107.9,207.725 107.9,211.384 104.2228,209.23386 103.92091,207.61773 103.49771,205.35222 104.68239,202.49842 105.24054,200.83073

        #z0 = P(0, -0)
        #c0 = P(1.89978, -1.28177)
        #c1 = P(4.47317, -3.64429)
        #z1 = P(4.40393, -5.63671)
        #c2 = P(4.40393, -6.92271)
        #c3 = P(3.11154, -6.16702)
        #z2 = P(3.00544, -5.59901)
        #c4 = P(2.8567, -4.80278)
        #c5 = P(3.27307, -3.79978)
        z3 = P(3.46924, -3.21365)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89978, -1.28177)
        #z1 = z0 + P(4.40393, -5.63671)
        #c1 = z1 + P(0.0692376, 1.99243)
        #c2 = z1 + P(0, -1.28599)
        #z2 = z1 + P(-1.39849, 0.0377011)
        #c3 = z2 + P(0.106102, -0.568005)
        #c4 = z2 + P(-0.148738, 0.796236)
        #z3 = z2 + P(0.463797, 2.38536)
        #c5 = z3 + P(-0.196167, -0.586126)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29175, -34)
        z1 = z0 + PP(7.15312, -51)
        c1 = z1 + PP(1.99363, 88)
        c2 = z1 + PP(1.28599, -90)
        #z2 = z1 + PP(1.399, 178)
        z2 = z3 - PP(2.43003, ta + 366)
        c3 = z2 + PP(0.57783, -79)
        #c4 = z2 + PP(0.810009, 100)
        #z3 = z2 + PP(2.43003, 78)
        #c5 = z3 + PP(0.618082, -108)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRnel(cls, ta=None, **kwargs):
        #M 151.481,191.687 C 156.887,195.334 164.209,202.056 164.011,207.725 164.011,211.384 157.25953,207.00265 157.89377,204.81836 158.33896,203.28516 160.72491,203.88603 162.86923,203.28526

        #z0 = P(0, -0)
        #c0 = P(1.89999, -1.28177)
        #c1 = P(4.47338, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.92271)
        #c3 = P(2.03092, -5.38284)
        #z2 = P(2.25383, -4.61515)
        #c4 = P(2.4103, -4.07629)
        #c5 = P(3.24886, -4.28747)
        z3 = P(4.00251, -4.07632)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89999, -1.28177)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28599)
        #z2 = z1 + P(-2.14996, 1.02157)
        #c3 = z2 + P(-0.22291, -0.76769)
        #c4 = z2 + P(0.156466, 0.538858)
        #z3 = z2 + P(1.74867, 0.538823)
        #c5 = z3 + P(-0.753642, -0.211147)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29192, -34)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28599, -90)
        #z2 = z1 + PP(2.38032, 154)
        z2 = z3 - PP(1.82981, ta + 361)
        c3 = z2 + PP(0.799398, -106)
        #c4 = z2 + PP(0.561115, 73)
        #z3 = z2 + PP(1.82981, 17)
        #c5 = z3 + PP(0.782662, -164)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SERCRs(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 52.7471,62.3234 60.0693,69.046 59.8714,74.7148 59.8714,76.775966 57.790452,77.597104 56.305,77.432246 54.922674,77.278833 53.590008,75.627758 53.621425,74.2373 53.66402,72.352125 55.940792,69.28755 57.451735,70.074364 59.247188,71.009337 58.53237,74.216499 58.53237,77.06186

        #z0 = P(0, -0)
        #c0 = P(1.89989, -1.28149)
        #c1 = P(4.47335, -3.64422)
        #z1 = P(4.40379, -5.63657)
        #c2 = P(4.40379, -6.36099)
        #c3 = P(3.67242, -6.64959)
        #z2 = P(3.15035, -6.59165)
        #c4 = P(2.66451, -6.53773)
        #c5 = P(2.19613, -5.95744)
        #z3 = P(2.20718, -5.46875)
        #c6 = P(2.22215, -4.80619)
        #c7 = P(3.02234, -3.72911)
        #z4 = P(3.55338, -4.00565)
        #c8 = P(4.18441, -4.33425)
        #c9 = P(3.93318, -5.46144)
        z5 = P(3.93318, -6.46147)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89989, -1.28149)
        #z1 = z0 + P(4.40379, -5.63657)
        #c1 = z1 + P(0.0695539, 1.99236)
        #c2 = z1 + P(0, -0.724417)
        #z2 = z1 + P(-1.25345, -0.955073)
        #c3 = z2 + P(0.522077, -0.057941)
        #c4 = z2 + P(-0.485832, 0.0539185)
        #z3 = z2 + P(-0.943169, 1.1229)
        #c5 = z3 + P(-0.0110418, -0.48869)
        #c6 = z3 + P(0.0149704, 0.662563)
        #z4 = z3 + P(1.3462, 1.4631)
        #c7 = z4 + P(-0.531036, 0.276534)
        #c8 = z4 + P(0.63103, -0.328605)
        #z5 = z4 + P(0.3798, -2.45582)
        #c9 = z5 + P(0, 1.00003)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29168, -34)
        z1 = z0 + PP(7.15293, -51)
        c1 = z1 + PP(1.99357, 88)
        c2 = z1 + PP(0.724417, -90)
        z2 = z1 + PP(1.57585, -142)
        c3 = z2 + PP(0.525282, -6)
        c4 = z2 + PP(0.488815, 173)
        z3 = z2 + PP(1.46645, 130)
        c5 = z3 + PP(0.488815, -91)
        c6 = z3 + PP(0.662732, 88)
        #z4 = z3 + PP(1.9882, 47)
        z4 = z5 - PP(2.48502, ta + 9)
        c7 = z4 + PP(0.598724, 152)
        #c8 = z4 + PP(0.711463, -27)
        #z5 = z4 + PP(2.48502, -81)
        #c9 = z5 + PP(1.00003, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SERCRsl(cls, ta=None, **kwargs):
        #M 47.3414,426.08 C 52.7471,429.726 60.0693,436.449 59.8714,442.118 59.8714,445.776 53.931201,446.12964 54.704201,441.74564 55.195401,439.43564 55.934722,436.97837 57.129111,435.10896

        #z0 = P(0, -0)
        #c0 = P(1.89989, -1.28142)
        #c1 = P(4.47335, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.92235)
        #c3 = P(2.31605, -7.04664)
        #z2 = P(2.58773, -5.50584)
        #c4 = P(2.76037, -4.69397)
        #c5 = P(3.02021, -3.83034)
        #z3 = P(3.43999, -3.17332)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89989, -1.28142)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695539, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-1.81606, 0.13087)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172637, 0.811872)
        #z3 = z2 + P(0.852259, 2.33253)
        #c5 = z3 + P(-0.41978, -0.657023)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29164, -33)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(1.28564, -90)
        z2 = z1 + PP(1.82077, 175)
        #z2 = z3 - PP(2.48335, ta + 371)
        c3 = z2 + PP(1.56457, -99)
        #c4 = z2 + PP(0.830024, 77)
        z3 = z2 + PP(2.48335, 69)
        #c5 = z3 + PP(0.779675, -122)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_SERCRsr(cls, ta=None, **kwargs):
        #M 136.691,336.898 C 142.096,340.544 149.419,347.267 149.221,352.936 149.221,354.88049 147.05523,356.62225 145.50436,356.11779 142.9743,355.29481 141.42301,349.80108 143.65516,348.35332 145.61731,347.08068 147.31692,349.21692 149.22433,352.62079

        #z0 = P(0, -0)
        #c0 = P(1.89964, -1.28142)
        #c1 = P(4.47338, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.32012)
        #c3 = P(3.64261, -6.93228)
        #z2 = P(3.09754, -6.75499)
        #c4 = P(2.20833, -6.46574)
        #c5 = P(1.66311, -4.53491)
        #z3 = P(2.44762, -4.02609)
        #c6 = P(3.13724, -3.5788)
        #c7 = P(3.73458, -4.32961)
        z4 = P(4.40496, -5.52593)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89964, -1.28142)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -0.68341)
        #z2 = z1 + P(-1.30625, -1.11827)
        #c3 = z2 + P(0.545069, -0.177297)
        #c4 = z2 + P(-0.889215, 0.289244)
        #z3 = z2 + P(-0.64992, 2.7289)
        #c5 = z3 + P(-0.784511, -0.50883)
        #c6 = z3 + P(0.689617, 0.447282)
        #z4 = z3 + P(1.95734, -1.49984)
        #c7 = z4 + P(-0.670378, 1.19632)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29144, -34)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(0.68341, -90)
        z2 = z1 + PP(1.71954, -139)
        c3 = z2 + PP(0.573179, -18)
        c4 = z2 + PP(0.935075, 161)
        #z3 = z2 + PP(2.80523, 103)
        z3 = z4 - PP(2.46591, ta + 24)
        c5 = z3 + PP(0.935075, -147)
        #c6 = z3 + PP(0.821969, 32)
        #z4 = z3 + PP(2.46591, -37)
        #c7 = z4 + PP(1.37135, 119)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRse(cls, ta=None, **kwargs):
        #M 102.091,250.754 C 107.497,254.4 114.819,261.123 114.621,266.791 114.621,268.45496 112.94347,269.66232 111.74305,269.26389 109.38272,268.48048 107.98056,263.25971 110.11473,261.98289 111.8053,260.97148 113.4716,263.781 114.58696,265.84656

        #z0 = P(0, -0)
        #c0 = P(1.89999, -1.28142)
        #c1 = P(4.47338, -3.64429)
        #z1 = P(4.40379, -5.63636)
        #c2 = P(4.40379, -6.22118)
        #c3 = P(3.81421, -6.64552)
        #z2 = P(3.39231, -6.50548)
        #c4 = P(2.56275, -6.23015)
        #c5 = P(2.06994, -4.39526)
        #z3 = P(2.82002, -3.9465)
        #c6 = P(3.41419, -3.59103)
        #c7 = P(3.99982, -4.57847)
        z4 = P(4.39183, -5.30443)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89999, -1.28142)
        #z1 = z0 + P(4.40379, -5.63636)
        #c1 = z1 + P(0.0695891, 1.99207)
        #c2 = z1 + P(0, -0.584815)
        #z2 = z1 + P(-1.01148, -0.869122)
        #c3 = z2 + P(0.421899, -0.140032)
        #c4 = z2 + P(-0.829561, 0.275337)
        #z3 = z2 + P(-0.572289, 2.55898)
        #c5 = z3 + P(-0.750075, -0.448751)
        #c6 = z3 + P(0.594168, 0.35547)
        #z4 = z3 + P(1.57181, -1.35792)
        #c7 = z4 + P(-0.392004, 0.725961)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29173, -33)
        z1 = z0 + PP(7.15276, -51)
        c1 = z1 + PP(1.99329, 87)
        c2 = z1 + PP(0.584815, -90)
        z2 = z1 + PP(1.33359, -139)
        c3 = z2 + PP(0.444531, -18)
        c4 = z2 + PP(0.874061, 161)
        #z3 = z2 + PP(2.62219, 102)
        z3 = z4 - PP(2.07715, ta + 22)
        c5 = z3 + PP(0.874065, -149)
        #c6 = z3 + PP(0.692383, 30)
        #z4 = z3 + PP(2.07715, -40)
        #c7 = z4 + PP(0.825038, 118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRser(cls, ta=None, **kwargs):
        #M 146.501,250.754 C 151.906,254.4 159.229,261.123 159.031,266.791 159.031,268.50872 157.62211,269.36842 156.49191,269.1401 154.26545,268.69032 152.19962,264.65756 153.67864,262.93363 154.80838,261.6168 156.31203,262.95291 158.69106,264.33674

        #z0 = P(0, -0)
        #c0 = P(1.89964, -1.28142)
        #c1 = P(4.47338, -3.64429)
        #z1 = P(4.40379, -5.63636)
        #c2 = P(4.40379, -6.24007)
        #c3 = P(3.90862, -6.54222)
        #z2 = P(3.5114, -6.46198)
        #c4 = P(2.72889, -6.3039)
        #c5 = P(2.00284, -4.88654)
        #z3 = P(2.52265, -4.28065)
        #c6 = P(2.91971, -3.81784)
        #c7 = P(3.44818, -4.28743)
        z4 = P(4.28432, -4.77379)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89964, -1.28142)
        #z1 = z0 + P(4.40379, -5.63636)
        #c1 = z1 + P(0.0695891, 1.99207)
        #c2 = z1 + P(0, -0.60371)
        #z2 = z1 + P(-0.892388, -0.825614)
        #c3 = z2 + P(0.39722, -0.0802453)
        #c4 = z2 + P(-0.782511, 0.15808)
        #z3 = z2 + P(-0.988752, 2.18133)
        #c5 = z3 + P(-0.519816, -0.605892)
        #c6 = z3 + P(0.397058, 0.462813)
        #z4 = z3 + P(1.76166, -0.493137)
        #c7 = z4 + P(-0.836134, 0.486361)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29144, -34)
        z1 = z0 + PP(7.15276, -51)
        c1 = z1 + PP(1.99329, 87)
        c2 = z1 + PP(0.60371, -90)
        z2 = z1 + PP(1.21573, -137)
        c3 = z2 + PP(0.405244, -11)
        c4 = z2 + PP(0.798319, 168)
        #z3 = z2 + PP(2.39495, 114)
        z3 = z4 - PP(1.82938, ta + 16)
        c5 = z3 + PP(0.79832, -130)
        #c6 = z3 + PP(0.609796, 49)
        #z4 = z3 + PP(1.82938, -15)
        #c7 = z4 + PP(0.967298, 149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRsel(cls, ta=None, **kwargs):
        #M 47.3414,336.898 C 52.7471,340.544 60.0693,347.267 59.8714,352.936 59.8714,354.96733 57.741366,356.2289 56.373584,355.6661 53.765999,354.59316 53.667773,348.76247 56.178583,347.93155 58.78649,347.06849 58.809277,351.25335 58.668575,355.19843

        #z0 = P(0, -0)
        #c0 = P(1.89989, -1.28142)
        #c1 = P(4.47335, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.35064)
        #c3 = P(3.65517, -6.79404)
        #z2 = P(3.17445, -6.59623)
        #c4 = P(2.25799, -6.21914)
        #c5 = P(2.22347, -4.16989)
        #z3 = P(3.10592, -3.87785)
        #c6 = P(4.02249, -3.57452)
        #c7 = P(4.0305, -5.04533)
        z4 = P(3.98105, -6.43187)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89989, -1.28142)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695539, 1.99243)
        #c2 = z1 + P(0, -0.713931)
        #z2 = z1 + P(-1.22934, -0.959521)
        #c3 = z2 + P(0.48072, -0.197802)
        #c4 = z2 + P(-0.916462, 0.377095)
        #z3 = z2 + P(-0.068535, 2.71838)
        #c5 = z3 + P(-0.882449, -0.292035)
        #c6 = z3 + P(0.916575, 0.303331)
        #z4 = z3 + P(0.875132, -2.55402)
        #c7 = z4 + P(0.0494511, 1.38654)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29164, -33)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(0.713931, -90)
        z2 = z1 + PP(1.55947, -142)
        c3 = z2 + PP(0.519825, -22)
        c4 = z2 + PP(0.991011, 157)
        #z3 = z2 + PP(2.71925, 91)
        z3 = z4 - PP(2.69979, ta + 22)
        c5 = z3 + PP(0.929516, -161)
        #c6 = z3 + PP(0.965463, 18)
        #z4 = z3 + PP(2.69979, -71)
        #c7 = z4 + PP(1.38742, 87)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SERCRsw(cls, ta=None, **kwargs):
        #M 84.6758,426.08 C 90.0816,429.726 97.4038,436.449 97.2058,442.118 97.2058,445.776 93.64956,443.60126 93.33265,441.64 93.032316,439.78132 93.273559,436.94543 94.112045,434.64171

        #z0 = P(0, -0)
        #c0 = P(1.89992, -1.28142)
        #c1 = P(4.47338, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.92235)
        #c3 = P(3.15392, -6.15802)
        #z2 = P(3.04254, -5.46872)
        #c4 = P(2.93698, -4.81546)
        #c5 = P(3.02177, -3.81876)
        #z3 = P(3.31646, -3.0091)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89992, -1.28142)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-1.36126, 0.167998)
        #c3 = z2 + P(0.111381, -0.689304)
        #c4 = z2 + P(-0.105555, 0.653251)
        #z3 = z2 + P(0.273926, 2.45962)
        #c5 = z3 + P(-0.294694, -0.809665)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29167, -33)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28564, -90)
        z2 = z1 + PP(1.37158, 172)
        #z2 = z3 - PP(2.47482, ta + 373)
        c3 = z2 + PP(0.698245, -80)
        #c4 = z2 + PP(0.661725, 99)
        z3 = z2 + PP(2.47482, 83)
        #c5 = z3 + PP(0.861628, -110)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_SERCRswr(cls, ta=None, **kwargs):
        #M 105.534,434.291 C 110.982,437.829 118.215,444.622 118.018,450.269 118.018,452.301 116.86593,452.79387 115.70469,452.88952 113.75829,453.04986 111.26009,451.35634 111.16076,449.19085 111.07262,447.26938 112.93901,445.16745 114.59284,445.48413 116.3036,445.81172 117.53259,449.4828 117.94844,451.06126

        #z0 = P(0, -0)
        #c0 = P(1.91475, -1.24347)
        #c1 = P(4.45686, -3.63093)
        #z1 = P(4.38763, -5.61563)
        #c2 = P(4.38763, -6.32979)
        #c3 = P(3.98272, -6.50302)
        #z2 = P(3.57459, -6.53663)
        #c4 = P(2.89051, -6.59299)
        #c5 = P(2.01249, -5.99778)
        #z3 = P(1.97758, -5.2367)
        #c6 = P(1.9466, -4.56138)
        #c7 = P(2.60256, -3.82264)
        #z4 = P(3.18382, -3.93394)
        #c8 = P(3.78508, -4.04907)
        #c9 = P(4.21702, -5.33931)
        z5 = P(4.36318, -5.89407)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.91475, -1.24347)
        #z1 = z0 + P(4.38763, -5.61563)
        #c1 = z1 + P(0.0692376, 1.98469)
        #c2 = z1 + P(0, -0.714166)
        #z2 = z1 + P(-0.813036, -0.921008)
        #c3 = z2 + P(0.408129, 0.0336171)
        #c4 = z2 + P(-0.684082, -0.0563531)
        #z3 = z2 + P(-1.59701, 1.29993)
        #c5 = z3 + P(0.0349105, -0.761083)
        #c6 = z3 + P(-0.0309777, 0.67532)
        #z4 = z3 + P(1.20624, 1.30276)
        #c7 = z4 + P(-0.581255, 0.1113)
        #c8 = z4 + P(0.601263, -0.115135)
        #z5 = z4 + P(1.17936, -1.96014)
        #c9 = z5 + P(-0.146155, 0.554765)

        z0 = P(0, -0)
        c0 = z0 + PP(2.28309, -33)
        z1 = z0 + PP(7.12647, -51)
        c1 = z1 + PP(1.9859, 88)
        c2 = z1 + PP(0.714166, -90)
        z2 = z1 + PP(1.22853, -131)
        c3 = z2 + PP(0.409511, 4)
        c4 = z2 + PP(0.686399, -175)
        z3 = z2 + PP(2.05919, 140)
        c5 = z3 + PP(0.761883, -87)
        c6 = z3 + PP(0.67603, 92)
        #z4 = z3 + PP(1.77544, 47)
        z4 = z5 - PP(2.28758, ta + 18)
        c7 = z4 + PP(0.591815, 169)
        #c8 = z4 + PP(0.612188, -10)
        #z5 = z4 + PP(2.28758, -58)
        #c9 = z5 + PP(0.573695, 104)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_SERCRswl(cls, ta=None, **kwargs):
        #M119.538 426.08C124.944 429.726 132.266 436.449 132.068 442.118C132.068 445.776 125.837 446.024 126.61 441.64C127.101 439.33 128.127 437.154 129.929 435.892

        #z0 = P(0, -0)
        #c0 = P(1.89999, -1.28142)
        #c1 = P(4.47338, -3.64429)
        #z1 = P(4.40379, -5.63671)
        #c2 = P(4.40379, -6.92235)
        #c3 = P(2.21385, -7.00952)
        #z2 = P(2.48552, -5.46872)
        #c4 = P(2.65809, -4.65684)
        #c5 = P(3.01869, -3.89207)
        #z3 = P(3.65202, -3.44852)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.89999, -1.28142)
        #z1 = z0 + P(4.40379, -5.63671)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-1.91827, 0.167998)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172567, 0.811872)
        #z3 = z2 + P(1.1665, 2.02019)
        #c5 = z3 + P(-0.633331, -0.443542)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29173, -33)
        z1 = z0 + PP(7.15304, -52)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28564, -90)
        z2 = z1 + PP(1.92561, 174)
        #z2 = z3 - PP(2.33278, ta + 383)
        c3 = z2 + PP(1.56457, -99)
        c4 = z2 + PP(0.83001, 78)
        z3 = z2 + PP(2.33278, 59)
        c5 = z3 + PP(0.7732, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_nerSERCR(cls, ta=None, **kwargs):
        #M 87.5194,490.318 C 93.863368,490.318 98.979398,501.47925 98.781398,507.14825 98.781398,510.80625 92.551098,511.05425 93.324098,506.67025 93.815298,504.35925 95.3303,501.94438 97.132,500.68238

        #z0 = P(0, -0)
        #c0 = P(2.22965, -0)
        #c1 = P(4.02773, -3.92273)
        #z1 = P(3.95814, -5.91516)
        #c2 = P(3.95814, -7.2008)
        #c3 = P(1.76844, -7.28796)
        #z2 = P(2.04012, -5.74716)
        #c4 = P(2.21276, -4.93494)
        #c5 = P(2.74522, -4.08621)
        #z3 = P(3.37844, -3.64266)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.22965, 0)
        #z1 = z0 + P(3.95814, -5.91516)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-1.91802, 0.167998)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172637, 0.812224)
        #z3 = z2 + P(1.33832, 2.1045)
        #c5 = z3 + P(-0.633225, -0.443542)

        z0 = P(0, -0)
        c0 = z0 + PP(2.22965, 0)
        z1 = z0 + PP(7.1173, -56)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28564, -90)
        z2 = z1 + PP(1.92537, 174)
        #z2 = z3 - PP(2.494, ta + 381)
        c3 = z2 + PP(1.56457, -99)
        c4 = z2 + PP(0.830368, 78)
        z3 = z2 + PP(2.494, 57)
        c5 = z3 + PP(0.773113, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_nerSERCRe(cls, ta=None, **kwargs):
        #M 47.3414,125.182 C 53.241146,125.182 59.972737,137.96507 59.774837,143.63407 59.774837,147.29207 51.676727,143.65586 52.449727,139.27186 52.940927,136.96186 56.018943,137.28174 58.34455,137.28174

        #z0 = P(0, -0)
        #c0 = P(2.07352, -0)
        #c1 = P(4.43941, -4.49274)
        #z1 = P(4.36985, -6.48516)
        #c2 = P(4.36985, -7.7708)
        #c3 = P(1.52369, -6.49282)
        #z2 = P(1.79537, -4.95202)
        #c4 = P(1.96801, -4.14015)
        #c5 = P(3.04981, -4.25257)
        z3 = P(3.86717, -4.25257)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.07352, 0)
        #z1 = z0 + P(4.36985, -6.48516)
        #c1 = z1 + P(0.0695539, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-2.57448, 1.53314)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172637, 0.811872)
        #z3 = z2 + P(2.07179, 0.699447)
        #c5 = z3 + P(-0.817358, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.07352, 0)
        z1 = z0 + PP(7.82004, -56)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(1.28564, -90)
        #z2 = z1 + PP(2.99641, 149)
        z2 = z3 - PP(2.18668, ta + 18)
        c3 = z2 + PP(1.56457, -99)
        #c4 = z2 + PP(0.830024, 77)
        #z3 = z2 + PP(2.18668, 18)
        #c5 = z3 + PP(0.817358, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRer(cls, ta=None, **kwargs):
        #M 158.837,125.182 C 164.8957,125.182 170.35018,136.76582 170.15218,142.43482 169.84106,146.23589 163.45406,145.07647 164.69518,142.10621 165.47565,140.23841 167.43558,138.8469 169.35667,137.46892

        #z0 = P(0, -0)
        #c0 = P(2.12939, -0)
        #c1 = P(4.04642, -4.07125)
        #z1 = P(3.97683, -6.06367)
        #c2 = P(3.86749, -7.3996)
        #c3 = P(1.62271, -6.99211)
        #z2 = P(2.05892, -5.94818)
        #c4 = P(2.33322, -5.29172)
        #c5 = P(3.02206, -4.80266)
        z3 = P(3.69724, -4.31836)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.12939, 0)
        #z1 = z0 + P(3.97683, -6.06367)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(-0.109346, -1.33592)
        #z2 = z1 + P(-1.91792, 0.115493)
        #c3 = z2 + P(-0.436204, -1.04393)
        #c4 = z2 + P(0.274304, 0.656457)
        #z3 = z2 + P(1.63833, 1.62982)
        #c5 = z3 + P(-0.675186, -0.484305)

        z0 = P(0, -0)
        c0 = z0 + PP(2.12939, 0)
        z1 = z0 + PP(7.25144, -56)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.34039, -94)
        #z2 = z1 + PP(1.92139, 176)
        z2 = z3 - PP(2.31094, ta + 368)
        c3 = z2 + PP(1.1314, -112)
        #c4 = z2 + PP(0.711462, 67)
        #z3 = z2 + PP(2.31094, 44)
        #c5 = z3 + PP(0.83092, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRel(cls, ta=None, **kwargs):
        #M 108.759,125.182 C 114.70875,125.182 120.14246,137.6425 119.94446,143.3115 119.94446,146.9695 113.26528,143.25859 114.03828,138.87459 114.52928,136.56459 117.16509,138.49117 119.48007,139.46627

        #z0 = P(0, -0)
        #c0 = P(2.0911, -0)
        #c1 = P(4.00083, -4.37937)
        #z1 = P(3.93124, -6.37179)
        #c2 = P(3.93124, -7.65743)
        #c3 = P(1.58378, -6.3532)
        #z2 = P(1.85546, -4.8124)
        #c4 = P(2.02802, -4.00052)
        #c5 = P(2.9544, -4.67764)
        z3 = P(3.76803, -5.02035)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.0911, 0)
        #z1 = z0 + P(3.93124, -6.37179)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-2.07579, 1.5594)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172567, 0.811872)
        #z3 = z2 + P(1.91257, -0.207952)
        #c5 = z3 + P(-0.813623, 0.342709)

        z0 = P(0, -0)
        c0 = z0 + PP(2.0911, 0)
        z1 = z0 + PP(7.48695, -58)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28564, -90)
        #z2 = z1 + PP(2.59627, 143)
        z2 = z3 - PP(1.92384, ta + 17)
        c3 = z2 + PP(1.56457, -99)
        #c4 = z2 + PP(0.83001, 78)
        #z3 = z2 + PP(1.92384, -6)
        #c5 = z3 + PP(0.882854, 157)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRne(cls, ta=None, **kwargs):
        #M 47.3414,191.687 C 53.578481,191.687 58.739793,202.63766 58.541893,208.30666 58.541893,211.96566 54.39577,211.85721 53.295466,210.33853 52.026658,208.58728 56.299112,205.0731 57.939116,203.96795

        #z0 = P(0, -0)
        #c0 = P(2.19208, -0)
        #c1 = P(4.00608, -3.84872)
        #z1 = P(3.93652, -5.84114)
        #c2 = P(3.93652, -7.12714)
        #c3 = P(2.47933, -7.08902)
        #z2 = P(2.09262, -6.55526)
        #c4 = P(1.64668, -5.93977)
        #c5 = P(3.14828, -4.70468)
        z3 = P(3.72467, -4.31626)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.19208, 0)
        #z1 = z0 + P(3.93652, -5.84114)
        #c1 = z1 + P(0.0695539, 1.99243)
        #c2 = z1 + P(0, -1.28599)
        #z2 = z1 + P(-1.84391, -0.714121)
        #c3 = z2 + P(0.386713, -0.533755)
        #c4 = z2 + P(-0.445935, 0.615494)
        #z3 = z2 + P(1.63206, 2.239)
        #c5 = z3 + P(-0.576396, -0.388416)

        z0 = P(0, -0)
        c0 = z0 + PP(2.19208, 0)
        z1 = z0 + PP(7.0438, -56)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(1.28599, -90)
        #z2 = z1 + PP(1.97736, -158)
        z2 = z3 - PP(2.77069, ta + 379)
        c3 = z2 + PP(0.659122, -54)
        #c4 = z2 + PP(0.76006, 125)
        #z3 = z2 + PP(2.77069, 53)
        #c5 = z3 + PP(0.695053, -146)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRner(cls, ta=None, **kwargs):
        #M 95.3696,191.687 C 101.27907,191.687 106.81404,203.60906 106.61704,209.27806 106.61704,212.93706 102.93984,210.78692 102.63795,209.17079 102.21475,206.90528 104.13745,203.21797 104.91531,201.72853

        #z0 = P(0, -0)
        #c0 = P(2.07694, -0)
        #c1 = P(4.02226, -4.19013)
        #z1 = P(3.95302, -6.18255)
        #c2 = P(3.95302, -7.46854)
        #c3 = P(2.66064, -6.71286)
        #z2 = P(2.55453, -6.14485)
        #c4 = P(2.4058, -5.34861)
        #c5 = P(3.08155, -4.05267)
        z3 = P(3.35493, -3.52919)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.07694, 0)
        #z1 = z0 + P(3.95302, -6.18255)
        #c1 = z1 + P(0.0692376, 1.99243)
        #c2 = z1 + P(0, -1.28599)
        #z2 = z1 + P(-1.39849, 0.0377011)
        #c3 = z2 + P(0.106102, -0.568005)
        #c4 = z2 + P(-0.148738, 0.796236)
        #z3 = z2 + P(0.800401, 2.61566)
        #c5 = z3 + P(-0.273387, -0.523478)

        z0 = P(0, -0)
        c0 = z0 + PP(2.07694, 0)
        z1 = z0 + PP(7.33828, -57)
        c1 = z1 + PP(1.99363, 88)
        c2 = z1 + PP(1.28599, -90)
        #z2 = z1 + PP(1.399, 178)
        z2 = z3 - PP(2.73538, ta + 369)
        c3 = z2 + PP(0.57783, -79)
        #c4 = z2 + PP(0.810009, 100)
        #z3 = z2 + PP(2.73538, 72)
        #c5 = z3 + PP(0.590567, -117)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRnel(cls, ta=None, **kwargs):
        #M 151.481,191.687 C 157.7887,191.687 162.94109,204.21891 162.74309,209.88791 162.74309,213.54691 155.99162,209.16556 156.62586,206.98127 157.07105,205.44807 159.96404,205.82684 162.10836,205.22607

        #z0 = P(0, -0)
        #c0 = P(2.2169, -0)
        #c1 = P(4.02776, -4.40446)
        #z1 = P(3.95817, -6.39689)
        #c2 = P(3.95817, -7.68288)
        #c3 = P(1.5853, -6.14301)
        #z2 = P(1.80821, -5.37532)
        #c4 = P(1.96468, -4.83646)
        #c5 = P(2.98145, -4.96959)
        z3 = P(3.73509, -4.75844)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.2169, 0)
        #z1 = z0 + P(3.95817, -6.39689)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28599)
        #z2 = z1 + P(-2.14996, 1.02157)
        #c3 = z2 + P(-0.22291, -0.76769)
        #c4 = z2 + P(0.156466, 0.538858)
        #z3 = z2 + P(1.92688, 0.616882)
        #c5 = z3 + P(-0.753642, -0.211147)

        z0 = P(0, -0)
        c0 = z0 + PP(2.2169, 0)
        z1 = z0 + PP(7.52245, -58)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28599, -90)
        #z2 = z1 + PP(2.38032, 154)
        z2 = z3 - PP(2.02322, ta + 361)
        c3 = z2 + PP(0.799398, -106)
        #c4 = z2 + PP(0.561115, 73)
        #z3 = z2 + PP(2.02322, 17)
        #c5 = z3 + PP(0.782662, -164)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_nerSERCRs(cls, ta=None, **kwargs):
        #M 97.9505,336.898 C 104.34101,336.898 109.28367,348.85132 109.16327,354.5225 109.11797,356.65636 106.11819,357.46747 104.53812,355.26668 103.28647,353.52336 103.5417,348.74823 106.2079,349.01421 108.17183,349.21011 108.5967,352.32534 108.5967,355.88451

        #z0 = P(0, -0)
        #c0 = P(2.24601, -0)
        #c1 = P(3.98315, -4.20111)
        #z1 = P(3.94084, -6.1943)
        #c2 = P(3.92492, -6.94427)
        #c3 = P(2.87062, -7.22934)
        #z2 = P(2.31528, -6.45585)
        #c4 = P(1.87538, -5.84315)
        #c5 = P(1.96508, -4.16488)
        #z3 = P(2.90214, -4.25836)
        #c6 = P(3.59239, -4.32721)
        #c7 = P(3.74171, -5.42209)
        z4 = P(3.74171, -6.673)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.24601, 0)
        #z1 = z0 + P(3.94084, -6.1943)
        #c1 = z1 + P(0.0423158, 1.99319)
        #c2 = z1 + P(-0.0159211, -0.749966)
        #z2 = z1 + P(-1.62555, -0.261549)
        #c3 = z2 + P(0.555331, -0.773489)
        #c4 = z2 + P(-0.439905, 0.612707)
        #z3 = z2 + P(0.586861, 2.19749)
        #c5 = z3 + P(-0.937062, 0.0934813)
        #c6 = z3 + P(0.690243, -0.068851)
        #z4 = z3 + P(0.839567, -2.41463)
        #c7 = z4 + P(0, 1.25091)

        z0 = P(0, -0)
        c0 = z0 + PP(2.24601, 0)
        z1 = z0 + PP(7.34164, -57)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(0.750135, -91)
        z2 = z1 + PP(1.64646, -170)
        c3 = z2 + PP(0.952197, -54)
        c4 = z2 + PP(0.754272, 125)
        #z3 = z2 + PP(2.27451, 75)
        z3 = z4 - PP(2.55643, ta + 20)
        c5 = z3 + PP(0.941714, 174)
        #c6 = z3 + PP(0.693668, -5)
        #z4 = z3 + PP(2.55643, -70)
        #c7 = z4 + PP(1.25091, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRsl(cls, ta=None, **kwargs):
        #M 47.3414,426.08 C 53.50203,426.08 58.843469,437.23703 58.645569,442.90603 58.645569,446.56403 52.950746,447.044 53.723746,442.66 54.214946,440.35 55.716038,437.25968 56.910427,435.39027

        #z0 = P(0, -0)
        #c0 = P(2.16521, -0)
        #c1 = P(4.04252, -3.92125)
        #z1 = P(3.97296, -5.91367)
        #c2 = P(3.97296, -7.19931)
        #c3 = P(1.97146, -7.368)
        #z2 = P(2.24314, -5.8272)
        #c4 = P(2.41578, -5.01533)
        #c5 = P(2.94335, -3.92921)
        #z3 = P(3.36313, -3.27219)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.16521, 0)
        #z1 = z0 + P(3.97296, -5.91367)
        #c1 = z1 + P(0.0695539, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-1.72982, 0.0864697)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172637, 0.811872)
        #z3 = z2 + P(1.11999, 2.55502)
        #c5 = z3 + P(-0.41978, -0.657023)

        z0 = P(0, -0)
        c0 = z0 + PP(2.16521, 0)
        z1 = z0 + PP(7.12432, -56)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(1.28564, -90)
        z2 = z1 + PP(1.73198, 177)
        #z2 = z3 - PP(2.78971, ta + 368)
        c3 = z2 + PP(1.56457, -99)
        c4 = z2 + PP(0.830024, 77)
        z3 = z2 + PP(2.78971, 66)
        c5 = z3 + PP(0.779675, -122)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_nerSERCRsr(cls, ta=None, **kwargs):
        #M 136.691,336.898 C 143.09726,336.898 148.23437,347.57875 148.03637,353.24775 148.03637,355.19224 145.8706,356.934 144.31973,356.42954 141.78966,355.60656 140.21339,350.07355 142.47053,348.66507 144.50936,347.3928 146.12896,349.84388 148.03637,353.24775

        #z0 = P(0, -0)
        #c0 = P(2.25154, -0)
        #c1 = P(4.05703, -3.75386)
        #z1 = P(3.98744, -5.74628)
        #c2 = P(3.98744, -6.42969)
        #c3 = P(3.22626, -7.04185)
        #z2 = P(2.68119, -6.86455)
        #c4 = P(1.79197, -6.57531)
        #c5 = P(1.23798, -4.63068)
        #z3 = P(2.03127, -4.13565)
        #c6 = P(2.74784, -3.6885)
        #c7 = P(3.31706, -4.54996)
        z4 = P(3.98744, -5.74628)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.25154, 0)
        #z1 = z0 + P(3.98744, -5.74628)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -0.68341)
        #z2 = z1 + P(-1.30625, -1.11827)
        #c3 = z2 + P(0.545069, -0.177297)
        #c4 = z2 + P(-0.889218, 0.289244)
        #z3 = z2 + P(-0.64992, 2.7289)
        #c5 = z3 + P(-0.793294, -0.495024)
        #c6 = z3 + P(0.716567, 0.447152)
        #z4 = z3 + P(1.95617, -1.61063)
        #c7 = z4 + P(-0.670378, 1.19632)

        z0 = P(0, -0)
        c0 = z0 + PP(2.25154, 0)
        z1 = z0 + PP(6.99424, -55)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(0.68341, -90)
        z2 = z1 + PP(1.71954, -139)
        c3 = z2 + PP(0.573179, -18)
        c4 = z2 + PP(0.935078, 161)
        #z3 = z2 + PP(2.80523, 103)
        z3 = z4 - PP(2.53391, ta + 22)
        c5 = z3 + PP(0.935075, -148)
        #c6 = z3 + PP(0.844638, 31)
        #z4 = z3 + PP(2.53391, -39)
        #c7 = z4 + PP(1.37135, 119)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRse(cls, ta=None, **kwargs):
        #M 102.091,250.754 C 108.30712,250.754 113.59192,262.10467 113.39392,267.77267 113.39392,269.43663 111.71639,270.64399 110.51597,270.24556 108.15563,269.46214 106.74516,264.22737 108.88765,262.96456 110.61471,261.9466 112.27149,264.89 113.38685,266.95556

        #z0 = P(0, -0)
        #c0 = P(2.18472, -0)
        #c1 = P(4.04211, -3.98931)
        #z1 = P(3.97252, -5.98138)
        #c2 = P(3.97252, -6.56619)
        #c3 = P(3.38294, -6.99053)
        #z2 = P(2.96104, -6.8505)
        #c4 = P(2.13147, -6.57516)
        #c5 = P(1.63575, -4.73535)
        #z3 = P(2.38875, -4.29152)
        #c6 = P(2.99574, -3.93375)
        #c7 = P(3.57803, -4.96824)
        z4 = P(3.97004, -5.6942)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.18472, 0)
        #z1 = z0 + P(3.97252, -5.98138)
        #c1 = z1 + P(0.0695891, 1.99207)
        #c2 = z1 + P(0, -0.584815)
        #z2 = z1 + P(-1.01148, -0.869122)
        #c3 = z2 + P(0.421899, -0.140032)
        #c4 = z2 + P(-0.829565, 0.275341)
        #z3 = z2 + P(-0.572289, 2.55898)
        #c5 = z3 + P(-0.752999, -0.443827)
        #c6 = z3 + P(0.606992, 0.357772)
        #z4 = z3 + P(1.58129, -1.40268)
        #c7 = z4 + P(-0.392004, 0.725961)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18472, 0)
        z1 = z0 + PP(7.18038, -56)
        c1 = z1 + PP(1.99329, 87)
        c2 = z1 + PP(0.584815, -90)
        z2 = z1 + PP(1.33359, -139)
        c3 = z2 + PP(0.444531, -18)
        c4 = z2 + PP(0.874065, 161)
        #z3 = z2 + PP(2.62219, 102)
        z3 = z4 - PP(2.11376, ta + 21)
        c5 = z3 + PP(0.874065, -149)
        #c6 = z3 + PP(0.704585, 30)
        #z4 = z3 + PP(2.11376, -41)
        #c7 = z4 + PP(0.825038, 118)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRser(cls, ta=None, **kwargs):
        #M 146.501,250.754 C 152.68726,250.754 157.99922,262.31862 157.80122,267.98662 157.80122,269.70434 156.39233,270.56403 155.26213,270.33572 153.03568,269.88594 150.9597,265.84441 152.44886,264.12925 153.62877,262.77027 155.25157,264.26214 157.6306,265.64597

        #z0 = P(0, -0)
        #c0 = P(2.17422, -0)
        #c1 = P(4.04116, -4.0645)
        #z1 = P(3.97157, -6.05657)
        #c2 = P(3.97157, -6.66028)
        #c3 = P(3.47641, -6.96243)
        #z2 = P(3.07919, -6.88219)
        #c4 = P(2.29668, -6.72411)
        #c5 = P(1.56705, -5.30367)
        #z3 = P(2.09043, -4.70086)
        #c6 = P(2.50513, -4.22324)
        #c7 = P(3.07547, -4.74757)
        z4 = P(3.91161, -5.23393)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.17422, 0)
        #z1 = z0 + P(3.97157, -6.05657)
        #c1 = z1 + P(0.0695891, 1.99207)
        #c2 = z1 + P(0, -0.60371)
        #z2 = z1 + P(-0.892388, -0.825614)
        #c3 = z2 + P(0.39722, -0.0802418)
        #c4 = z2 + P(-0.782508, 0.15808)
        #z3 = z2 + P(-0.988752, 2.18133)
        #c5 = z3 + P(-0.52338, -0.60281)
        #c6 = z3 + P(0.414691, 0.477627)
        #z4 = z3 + P(1.82117, -0.533066)
        #c7 = z4 + P(-0.836134, 0.486361)

        z0 = P(0, -0)
        c0 = z0 + PP(2.17422, 0)
        z1 = z0 + PP(7.24262, -56)
        c1 = z1 + PP(1.99329, 87)
        c2 = z1 + PP(0.60371, -90)
        z2 = z1 + PP(1.21573, -137)
        c3 = z2 + PP(0.405244, -11)
        c4 = z2 + PP(0.798316, 168)
        #z3 = z2 + PP(2.39495, 114)
        z3 = z4 - PP(1.89759, ta + 15)
        c5 = z3 + PP(0.798315, -130)
        #c6 = z3 + PP(0.632532, 49)
        #z4 = z3 + PP(1.89759, -16)
        #c7 = z4 + PP(0.967298, 149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRsel(cls, ta=None, **kwargs):
        #M 47.3414,336.898 C 53.587534,336.898 58.806946,347.9805 58.609046,353.6495 58.609046,355.68083 56.479012,356.9424 55.11123,356.3796 52.503645,355.30666 52.405419,349.47597 54.916229,348.64505 57.524136,347.78199 57.545342,352.01956 57.40464,355.96464

        #z0 = P(0, -0)
        #c0 = P(2.19527, -0)
        #c1 = P(4.02968, -3.89505)
        #z1 = P(3.96013, -5.88748)
        #c2 = P(3.96013, -6.60141)
        #c3 = P(3.2115, -7.0448)
        #z2 = P(2.73078, -6.847)
        #c4 = P(1.81432, -6.46991)
        #c5 = P(1.7798, -4.42065)
        #z3 = P(2.66225, -4.12862)
        #c6 = P(3.57882, -3.82529)
        #c7 = P(3.58628, -5.31462)
        z4 = P(3.53683, -6.70116)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.19527, 0)
        #z1 = z0 + P(3.96013, -5.88748)
        #c1 = z1 + P(0.0695539, 1.99243)
        #c2 = z1 + P(0, -0.713931)
        #z2 = z1 + P(-1.22934, -0.959521)
        #c3 = z2 + P(0.48072, -0.197802)
        #c4 = z2 + P(-0.916462, 0.377095)
        #z3 = z2 + P(-0.068535, 2.71838)
        #c5 = z3 + P(-0.882449, -0.292035)
        #c6 = z3 + P(0.916575, 0.303331)
        #z4 = z3 + P(0.874577, -2.57254)
        #c7 = z4 + P(0.0494511, 1.38654)

        z0 = P(0, -0)
        c0 = z0 + PP(2.19527, 0)
        z1 = z0 + PP(7.09542, -56)
        c1 = z1 + PP(1.99364, 88)
        c2 = z1 + PP(0.713931, -90)
        z2 = z1 + PP(1.55947, -142)
        c3 = z2 + PP(0.519825, -22)
        c4 = z2 + PP(0.991011, 157)
        #z3 = z2 + PP(2.71925, 91)
        z3 = z4 - PP(2.71714, ta + 22)
        c5 = z3 + PP(0.929516, -161)
        #c6 = z3 + PP(0.965463, 18)
        #z4 = z3 + PP(2.71714, -71)
        #c7 = z4 + PP(1.38742, 87)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_nerSERCRsw(cls, ta=None, **kwargs):
        #M 84.6758,426.08 C 90.896713,426.08 96.190319,438.03586 95.992319,443.70486 95.992319,447.36286 92.759684,445.16053 92.119169,443.22686 91.654686,441.82462 93.089685,437.45062 93.928171,435.1469

        #z0 = P(0, -0)
        #c0 = P(2.1864, -0)
        #c1 = P(4.04689, -4.20201)
        #z1 = P(3.9773, -6.19443)
        #c2 = P(3.9773, -7.48007)
        #c3 = P(2.84116, -6.70604)
        #z2 = P(2.61605, -6.02643)
        #c4 = P(2.4528, -5.5336)
        #c5 = P(2.95714, -3.99632)
        z3 = P(3.25184, -3.18665)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1864, 0)
        #z1 = z0 + P(3.9773, -6.19443)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-1.36126, 0.167998)
        #c3 = z2 + P(0.225115, -0.679607)
        #c4 = z2 + P(-0.163247, 0.492831)
        #z3 = z2 + P(0.635792, 2.83978)
        #c5 = z3 + P(-0.294694, -0.809665)

        z0 = P(0, -0)
        c0 = z0 + PP(2.1864, 0)
        z1 = z0 + PP(7.36138, -57)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28564, -90)
        z2 = z1 + PP(1.37158, 172)
        #z2 = z3 - PP(2.91008, ta + 367)
        c3 = z2 + PP(0.715921, -71)
        #c4 = z2 + PP(0.519165, 108)
        #z3 = z2 + PP(2.91008, 77)
        #c5 = z3 + PP(0.861628, -110)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])

    @classmethod
    def path_nerSERCRswr(cls, ta=None, **kwargs):
        #M 105.534,434.291 C 111.41384,434.291 116.98578,445.63744 116.78878,451.28444 116.78878,453.31644 115.63671,453.8093 114.47547,453.90496 112.52908,454.06529 110.03087,452.37178 109.93154,450.20629 109.8434,448.28482 111.70979,446.18289 113.36362,446.49957 115.07438,446.82716 116.27007,450.65039 116.68592,452.22885

        #z0 = P(0, -0)
        #c0 = P(2.06653, -0)
        #c1 = P(4.02484, -3.98782)
        #z1 = P(3.9556, -5.97251)
        #c2 = P(3.9556, -6.68668)
        #c3 = P(3.5507, -6.8599)
        #z2 = P(3.14257, -6.89352)
        #c4 = P(2.45849, -6.94987)
        #c5 = P(1.58047, -6.35467)
        #z3 = P(1.54556, -5.59359)
        #c6 = P(1.51458, -4.91827)
        #c7 = P(2.17054, -4.17952)
        #z4 = P(2.7518, -4.29082)
        #c8 = P(3.35306, -4.40596)
        #c9 = P(3.7733, -5.74967)
        z5 = P(3.91945, -6.30443)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.06653, 0)
        #z1 = z0 + P(3.9556, -5.97251)
        #c1 = z1 + P(0.0692376, 1.98469)
        #c2 = z1 + P(0, -0.714166)
        #z2 = z1 + P(-0.813036, -0.921008)
        #c3 = z2 + P(0.408129, 0.0336207)
        #c4 = z2 + P(-0.684078, -0.0563496)
        #z3 = z2 + P(-1.59701, 1.29993)
        #c5 = z3 + P(0.0349105, -0.761083)
        #c6 = z3 + P(-0.0309777, 0.67532)
        #z4 = z3 + P(1.20624, 1.30276)
        #c7 = z4 + P(-0.581255, 0.1113)
        #c8 = z4 + P(0.601263, -0.115135)
        #z5 = z4 + P(1.16766, -2.01361)
        #c9 = z5 + P(-0.146155, 0.554765)

        z0 = P(0, -0)
        c0 = z0 + PP(2.06653, 0)
        z1 = z0 + PP(7.16364, -56)
        c1 = z1 + PP(1.9859, 88)
        c2 = z1 + PP(0.714166, -90)
        z2 = z1 + PP(1.22853, -131)
        c3 = z2 + PP(0.409512, 4)
        c4 = z2 + PP(0.686395, -175)
        z3 = z2 + PP(2.05919, 140)
        c5 = z3 + PP(0.761883, -87)
        c6 = z3 + PP(0.67603, 92)
        #z4 = z3 + PP(1.77544, 47)
        z4 = z5 - PP(2.32767, ta + 17)
        c7 = z4 + PP(0.591815, 169)
        #c8 = z4 + PP(0.612188, -10)
        #z5 = z4 + PP(2.32767, -59)
        #c9 = z5 + PP(0.573695, 104)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_nerSERCRswl(cls, ta=None, **kwargs):
        #M 119.538,426.08 C 125.80084,426.08 131.06392,437.22682 130.86592,442.89582 130.86592,446.55382 124.63492,446.80182 125.40792,442.41782 125.89892,440.10782 127.64948,437.38759 129.45148,436.12559

        #z0 = P(0, -0)
        #c0 = P(2.20114, -0)
        #c1 = P(4.0509, -3.91766)
        #z1 = P(3.98131, -5.91009)
        #c2 = P(3.98131, -7.19573)
        #c3 = P(1.79136, -7.28289)
        #z2 = P(2.06304, -5.74209)
        #c4 = P(2.23561, -4.93022)
        #c5 = P(2.85086, -3.97416)
        z3 = P(3.48419, -3.53062)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.20114, 0)
        #z1 = z0 + P(3.98131, -5.91009)
        #c1 = z1 + P(0.0695891, 1.99243)
        #c2 = z1 + P(0, -1.28564)
        #z2 = z1 + P(-1.91827, 0.167998)
        #c3 = z2 + P(-0.271678, -1.5408)
        #c4 = z2 + P(0.172567, 0.811872)
        #z3 = z2 + P(1.42115, 2.21147)
        #c5 = z3 + P(-0.633331, -0.443542)

        z0 = P(0, -0)
        c0 = z0 + PP(2.20114, 0)
        z1 = z0 + PP(7.126, -56)
        c1 = z1 + PP(1.99364, 87)
        c2 = z1 + PP(1.28564, -90)
        z2 = z1 + PP(1.92561, 174)
        #z2 = z3 - PP(2.62874, ta + 381)
        c3 = z2 + PP(1.56457, -99)
        c4 = z2 + PP(0.83001, 78)
        #z3 = z2 + PP(2.62874, 57)
        c5 = z3 + PP(0.7732, -144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SERCRNE(cls, ta=None, **kwargs):
        #M 251.581,125.182 C 256.967,128.815 264.261,135.512 264.064,141.16 264.064,144.806 259.9225,144.51075 258.7465,143.05875 256.9055,140.78575 260.37566,138.94878 263.085,137.061 264.22655,136.26561 265.3681,135.47021 266.50965,134.67482

        #z0 = P(0, -0)
        #c0 = P(1.90006, -1.28164)
        #c1 = P(4.47322, -3.64419)
        #z1 = P(4.40373, -5.63668)
        #c2 = P(4.40373, -6.92291)
        #c3 = P(2.9427, -6.81875)
        #z2 = P(2.52783, -6.30652)
        #c4 = P(1.87837, -5.50466)
        #c5 = P(3.10256, -4.85661)
        #z3 = P(4.05836, -4.19065)
        #c6 = P(4.46107, -3.91005)
        #c7 = P(4.86378, -3.62945)
        #z4 = P(5.2665, -3.34886)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.90006, -1.28164)
        #z1 = z0 + P(4.40373, -5.63668)
        #c1 = z1 + P(0.0694972, 1.99249)
        #c2 = z1 + P(0, -1.28623)
        #z2 = z1 + P(-1.8759, -0.669837)
        #c3 = z2 + P(0.414867, -0.512233)
        #c4 = z2 + P(-0.649464, 0.801864)
        #z3 = z2 + P(1.53053, 2.11587)
        #c5 = z3 + P(-0.955795, -0.665967)
        #c6 = z3 + P(0.402713, 0.280596)
        #z4 = z3 + P(1.20814, 0.841791)
        #c7 = z4 + P(-0.402713, -0.280596)

        z0 = P(0, -0)
        c0 = z0 + PP(2.29191, -34)
        z1 = z0 + PP(7.15297, -52)
        c1 = z1 + PP(1.9937, 88)
        c2 = z1 + PP(1.28623, -90)
        z2 = z1 + PP(1.9919, -160)
        c3 = z2 + PP(0.659164, -50)
        c4 = z2 + PP(1.03189, 129)
        z3 = z2 + PP(2.6114, 54)
        #z3 = z4 - PP(1.47249, ta + 359)
        c5 = z3 + PP(1.16493, -145)
        c6 = z3 + PP(0.490828, 34)
        z4 = z3 + PP(1.47249, 34)
        c7 = z4 + PP(0.490828, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_nerSERCRNE(cls, ta=None, **kwargs):
        #M 58.68,236.2 C 64.8938,236.2 70.0425,247.106 69.8452,252.753 69.8452,256.399 65.7199,256.301 64.6217,254.789 62.8599,252.364 66.4378,250.396 69.2381,248.435 70.377315,247.7016 71.376293,247.05848 72.351184,246.43087

        #z0 = P(0, -0)
        #c0 = P(2.19209, -0)
        #c1 = P(4.00844, -3.84739)
        #z1 = P(3.93883, -5.83953)
        #c2 = P(3.93883, -7.12576)
        #c3 = P(2.48352, -7.09119)
        #z2 = P(2.0961, -6.55779)
        #c4 = P(1.47458, -5.7023)
        #c5 = P(2.73678, -5.00803)
        #z3 = P(3.72466, -4.31624)
        #c6 = P(4.12655, -4.05751)
        #c7 = P(4.47897, -3.83063)
        #z4 = P(4.82289, -3.60922)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.19209, 0)
        #z1 = z0 + P(3.93883, -5.83953)
        #c1 = z1 + P(0.0696031, 1.99214)
        #c2 = z1 + P(0, -1.28623)
        #z2 = z1 + P(-1.84273, -0.718256)
        #c3 = z2 + P(0.387421, -0.5334)
        #c4 = z2 + P(-0.621524, 0.855486)
        #z3 = z2 + P(1.62856, 2.24155)
        #c5 = z3 + P(-0.987884, -0.691797)
        #c6 = z3 + P(0.40189, 0.258727)
        #z4 = z3 + P(1.09823, 0.707013)
        #c7 = z4 + P(-0.34392, -0.221407)

        z0 = P(0, -0)
        c0 = z0 + PP(2.19209, 0)
        z1 = z0 + PP(7.04376, -55)
        c1 = z1 + PP(1.99335, 87)
        c2 = z1 + PP(1.28623, -90)
        z2 = z1 + PP(1.97777, -158)
        c3 = z2 + PP(0.65925, -54)
        c4 = z2 + PP(1.05743, 125)
        z3 = z2 + PP(2.7707, 54)
        #z3 = z4 - PP(1.30613, ta + 359)
        c5 = z3 + PP(1.20603, -144)
        c6 = z3 + PP(0.47797, 32)
        z4 = z3 + PP(1.30613, 32)
        c7 = z4 + PP(0.409026, -147)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

class CharRun(CharRu):
    def __init__(self, name='run', kana='るん',
                 model='SER8CR4NE1F', head_type='SER',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        if getattr(self.before, 'tail_type', '') == 'NER':
            return [self.path_nerSERCRNE()]
        else:
            return [self.path_SERCRNE()]

class CharRuku(CharRu):
    def __init__(self, name='ruku', kana='るく',
                 model='BSER8CR4', head_type='BSER',
                 tail_type='SERCR4'):
        super().__init__(name, kana, model, head_type, tail_type)
