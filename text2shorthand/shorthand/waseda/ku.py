from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.path import moveto, rcurveto, curveto
from pyx.metapost.path import (
    beginknot, endknot, knot, roughknot,
    line, curve, controlcurve)

class CharKu(WasedaChar):
    def __init__(self, name='ku', kana='„Åè',
                 model='E8CL4', head_type='E', tail_type='ECL4'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_pos_you(self):
        return super().get_pos_you() + P(-2, 0)

    @classmethod
    def path_ECL(cls, ta=None, **kwargs):
        # M 0 0C 6.06807 -0.211902 12.1417 -0.211902 18.2098 0C 23.4644 0.183496 21.1573 -6.77908 18.1963 -4.70577C 16.2504 -3.34319 14.4271 -1.81329 12.7473 -0.133498
        
        #moveto(0, 0), 
        #curveto(6.06807, -0.211902, 12.1417, -0.211902, 18.2098, 0), 
        #curveto(23.4644, 0.183496, 21.1573, -6.77908, 18.1963, -4.70577), 
        #curveto(16.2504, -3.34319, 14.4271, -1.81329, 12.7473, -0.133498)
        z0 = P(0, 0)
        c0 = P(2.13268, 0.0744751)
        c1 = P(4.26732, 0.0744751)
        z1 = P(6.40001, 0)
        c2 = P(8.2468, -0.0644915)
        c3 = P(7.43594, 2.38257)
        z2 = P(6.39527, 1.65389)
        c4 = P(5.71136, 1.175)
        c5 = P(5.07055, 0.637299)
        z3 = P(4.48016, 0.0469192)
        
        #z0 = P(0, 0)
        #c0 = z0 + P(2.13268, 0.0744751)
        #z1 = z0 + P(6.40001, 0)
        #c1 = z1 + P(-2.13269, 0.0744751)
        #c2 = z1 + P(1.84678, -0.0644915)
        #z2 = z1 + P(-0.00474471, 1.65389)
        #c3 = z2 + P(1.04067, 0.728685)
        #c4 = z2 + P(-0.683906, -0.478892)
        #z3 = z2 + P(-1.9151, -1.60697)
        #c5 = z3 + P(0.590382, 0.590379)
        #
        #z0 = P(0, 0)
        #c0 = z0 + PP(2.13398, 2)
        #z1 = z0 + PP(6.40001, 0)
        #c1 = z1 + PP(2.13399, 178)
        #c2 = z1 + PP(1.84791, -2)
        #z2 = z1 + PP(1.6539, 90)
        #c3 = z2 + PP(1.27043, 34)
        #c4 = z2 + PP(0.834904, -144)
        #z3 = z2 + PP(2.5, -139)
        #c5 = z3 + PP(0.834925, 44)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            endknot(*z3)])

    @classmethod
    def path_ECLsw(cls, ta=None, **kwargs):
        #M 70.0186,115.237 C 76.0639,115.026 82.1188,114.92 88.1595,115.237 91.0736,115.339 91.221924,113.84067 90.861163,112.0561 89.975347,107.67425 87.296369,107.02185 85.101048,110.48463 84.077425,112.09924 83.440468,113.38463 82.718,115.104

        #z0 = P(0, -0)
        #c0 = P(2.13265, 0.0744361)
        #c1 = P(4.26868, 0.111831)
        #z1 = P(6.39971, -0)
        #c2 = P(7.42774, -0.0359833)
        #c3 = P(7.48006, 0.492594)
        #z2 = P(7.35279, 1.12215)
        #c4 = P(7.0403, 2.66797)
        #c5 = P(6.09521, 2.89812)
        #z3 = P(5.32075, 1.67653)
        #c6 = P(4.95964, 1.10693)
        #c7 = P(4.73494, 0.653475)
        z4 = P(4.48007, 0.0469194)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.13265, 0.0744361)
        #z1 = z0 + P(6.39971, 0)
        #c1 = z1 + P(-2.13102, 0.111831)
        #c2 = z1 + P(1.02803, -0.0359833)
        #z2 = z1 + P(0.953087, 1.12215)
        #c3 = z2 + P(0.127268, -0.629557)
        #c4 = z2 + P(-0.312496, 1.54582)
        #z3 = z2 + P(-2.03204, 0.55438)
        #c5 = z3 + P(0.77446, 1.22159)
        #c6 = z3 + P(-0.361111, -0.569599)
        #z4 = z3 + P(-0.840686, -1.62961)
        #c7 = z4 + P(0.254871, 0.606556)

        z0 = P(0, -0)
        c0 = z0 + PP(2.13395, 1)
        z1 = z0 + PP(6.39971, 0)
        c1 = z1 + PP(2.13396, 176)
        c2 = z1 + PP(1.02866, -2)
        z2 = z1 + PP(1.47228, 49)
        c3 = z2 + PP(0.642292, -78)
        c4 = z2 + PP(1.57709, 101)
        #z3 = z2 + PP(2.10631, 164)
        z3 = z4 - PP(1.83368, ta + -4)
        c5 = z3 + PP(1.4464, 57)
        #c6 = z3 + PP(0.674421, -122)
        #z4 = z3 + PP(1.83368, -117)
        #c7 = z4 + PP(0.657928, 67)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLswr(cls, ta=None, **kwargs):
        #M75.0041 157.22C82.0919 156.973 89.1829 156.849 96.2643 157.22C97.0201 157.247 97.6123 156.603 97.6672 155.818C98.3397 148.132 85.0995 148.149 87.3504 152.209C88.1805 153.707 88.8814 155.285 89.1789 156.973

        #z0 = P(0, -0)
        #c0 = P(2.50042, 0.0871361)
        #c1 = P(5.00197, 0.130881)
        #z1 = P(7.50013, -0)
        #c2 = P(7.76676, -0.009525)
        #c3 = P(7.97567, 0.217664)
        #z2 = P(7.99504, 0.494594)
        #c4 = P(8.23228, 3.20604)
        #c5 = P(3.56143, 3.20005)
        #z3 = P(4.3555, 1.76777)
        #c6 = P(4.64834, 1.23931)
        #c7 = P(4.8956, 0.682625)
        z4 = P(5.00055, 0.0871361)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50042, 0.0871361)
        #z1 = z0 + P(7.50013, 0)
        #c1 = z1 + P(-2.49816, 0.130881)
        #c2 = z1 + P(0.266629, -0.009525)
        #z2 = z1 + P(0.494912, 0.494594)
        #c3 = z2 + P(-0.0193675, -0.276931)
        #c4 = z2 + P(0.237243, 2.71145)
        #z3 = z2 + P(-3.63954, 1.27318)
        #c5 = z3 + P(-0.794067, 1.43228)
        #c6 = z3 + P(0.292841, -0.528461)
        #z4 = z3 + P(0.645054, -1.68063)
        #c7 = z4 + P(-0.104951, 0.595489)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50194, 1)
        z1 = z0 + PP(7.50013, 0)
        c1 = z1 + PP(2.50159, 177)
        c2 = z1 + PP(0.2668, -2)
        z2 = z1 + PP(0.699687, 44)
        c3 = z2 + PP(0.277607, -94)
        c4 = z2 + PP(2.72181, 84)
        #z3 = z2 + PP(3.8558, 160)
        z3 = z4 - PP(1.80017, ta + 12)
        c5 = z3 + PP(1.63767, 119)
        #c6 = z3 + PP(0.604175, -61)
        #z4 = z3 + PP(1.80017, -69)
        #c7 = z4 + PP(0.604667, 99)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def _path_ECLswr(cls, ta=None, **kwargs):
        ## M 201.374 83.7151C 208.483 83.3426 215.606 83.3426 222.714 83.7151C 223.472 83.7548 224.063 83.0953 224.122 82.3068C 224.702 74.5843 211.52 74.6181 213.85 78.6541C 214.71 80.1439 215.303 81.7726 215.602 83.4667
        #
        #moveto(201.374, 83.7151), 
        #curveto(208.483, 83.3426, 215.606, 83.3426, 222.714, 83.7151), 
        #curveto(223.472, 83.7548, 224.063, 83.0953, 224.122, 82.3068), 
        #curveto(224.702, 74.5843, 211.52, 74.6181, 213.85, 78.6541), 
        #curveto(214.71, 80.1439, 215.303, 81.7726, 215.602, 83.4667)
        #z0 = P(0, -0)
        #c0 = P(2.49853, 0.130919)
        #c1 = P(5.00198, 0.130919)
        #z1 = P(7.50015, -0)
        #c2 = P(7.76656, -0.013953)
        #c3 = P(7.97427, 0.217835)
        #z2 = P(7.99501, 0.494961)
        #c4 = P(8.19886, 3.20911)
        #c5 = P(3.56591, 3.19723)
        #z3 = P(4.38481, 1.77874)
        #c6 = P(4.68707, 1.25513)
        #c7 = P(4.89548, 0.682711)
        z4 = P(5.00057, 0.0873026)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.49853, 0.130919)
        #z1 = z0 + P(7.50015, 0)
        #c1 = z1 + P(-2.49818, 0.130919)
        #c2 = z1 + P(0.266407, -0.013953)
        #z2 = z1 + P(0.494856, 0.494961)
        #c3 = z2 + P(-0.0207361, -0.277126)
        #c4 = z2 + P(0.203847, 2.71415)
        #z3 = z2 + P(-3.6102, 1.28378)
        #c5 = z3 + P(-0.818902, 1.41849)
        #c6 = z3 + P(0.302255, -0.523605)
        #z4 = z3 + P(0.615758, -1.69144)
        #c7 = z4 + P(-0.105087, 0.595408)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.50196, 2)
        z1 = z0 + PP(7.50015, 0)
        c1 = z1 + PP(2.5016, 177)
        c2 = z1 + PP(0.266772, -2)
        z2 = z1 + PP(0.699906, 45)
        c3 = z2 + PP(0.277901, -94)
        c4 = z2 + PP(2.72179, 85)
        z3 = z4 - PP(1.80003, -69)
        #z3 = z2 + PP(3.83166, 160)
        c5 = z3 + PP(1.6379, 119)
        #c6 = z3 + PP(0.604583, -60)
        #z4 = z3 + PP(1.80003, -69)
        #c7 = z4 + PP(0.604611, 100)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLsel(cls, ta=None, **kwargs):
        ## M 169.802 62.3477C 176.91 61.9752 184.033 61.9752 191.141 62.3477C 191.87 62.3859 192.369 61.6959 192.55 60.9394C 193.623 56.4406 188.43 53.8274 185.975 56.752C 184.718 58.2502 184.029 60.1435 184.029 62.0993
        
        #moveto(169.802, 62.3477), 
        #curveto(176.91, 61.9752, 184.033, 61.9752, 191.141, 62.3477), 
        #curveto(191.87, 62.3859, 192.369, 61.6959, 192.55, 60.9394), 
        #curveto(193.623, 56.4406, 188.43, 53.8274, 185.975, 56.752), 
        #curveto(184.718, 58.2502, 184.029, 60.1435, 184.029, 62.0993)
        #z0 = P(0, -0)
        #c0 = P(2.49818, 0.130919)
        #c1 = P(5.00163, 0.130919)
        #z1 = P(7.4998, -0)
        #c2 = P(7.75602, -0.0134258)
        #c3 = P(7.9314, 0.229082)
        #z2 = P(7.99501, 0.494961)
        #c4 = P(8.37213, 2.07611)
        #c5 = P(6.54699, 2.99454)
        #z3 = P(5.68416, 1.96666)
        #c6 = P(5.24238, 1.44011)
        #c7 = P(5.00022, 0.774688)
        z4 = P(5.00022, 0.0873026)
        #
        #z0 = P(0, -0)
        #c0 = z0 + P(2.49818, 0.130919)
        #z1 = z0 + P(7.4998, 0)
        #c1 = z1 + P(-2.49818, 0.130919)
        #c2 = z1 + P(0.256214, -0.0134258)
        #z2 = z1 + P(0.495207, 0.494961)
        #c3 = z2 + P(-0.0636142, -0.265879)
        #c4 = z2 + P(0.377116, 1.58115)
        #z3 = z2 + P(-2.31085, 1.4717)
        #c5 = z3 + P(0.862834, 1.02788)
        #c6 = z3 + P(-0.441785, -0.526557)
        #z4 = z3 + P(-0.683941, -1.87936)
        #c7 = z4 + P(0, 0.687385)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.5016, 2)
        z1 = z0 + PP(7.4998, 0)
        c1 = z1 + PP(2.5016, 177)
        c2 = z1 + PP(0.256566, -2)
        z2 = z1 + PP(0.700154, 44)
        c3 = z2 + PP(0.273384, -103)
        c4 = z2 + PP(1.6255, 76)
        z3 = z4 - PP(1.99994, ta-19)
        #z3 = z2 + PP(2.7397, 147)
        c5 = z3 + PP(1.34202, 49)
        #c6 = z3 + PP(0.68734, -129)
        #z4 = z3 + PP(1.99994, -109)
        #c7 = z4 + PP(0.687385, 90)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLsl(cls, ta=None, **kwargs):
        # M 95.8446 -10.1599C 101.913 -10.3718 107.986 -10.3718 114.054 -10.1599C 121.848 -9.88778 116.599 -21.5321 112.065 -16.128C 110.538 -14.3082 109.173 -12.3585 107.985 -10.3012
        
        #moveto(95.8446, -10.1599), 
        #curveto(101.913, -10.3718, 107.986, -10.3718, 114.054, -10.1599), 
        #curveto(121.848, -9.88778, 116.599, -21.5321, 112.065, -16.128), 
        #curveto(110.538, -14.3082, 109.173, -12.3585, 107.985, -10.3012)
        #z0 = P(0, -0)
        #c0 = P(2.1328, 0.0744743)
        #c1 = P(4.26721, 0.0744743)
        #z1 = P(6.39987, -0)
        #c2 = P(9.13915, -0.0956393)
        #c3 = P(7.29434, 3.99687)
        #z2 = P(5.70082, 2.09755)
        #c4 = P(5.16414, 1.45796)
        #c5 = P(4.6844, 0.77272)
        z3 = P(4.26686, 0.0496613)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.1328, 0.0744743)
        #z1 = z0 + P(6.39987, 0)
        #c1 = z1 + P(-2.13266, 0.0744743)
        #c2 = z1 + P(2.73928, -0.0956393)
        #z2 = z1 + P(-0.699054, 2.09755)
        #c3 = z2 + P(1.59352, 1.89932)
        #c4 = z2 + P(-0.536679, -0.639587)
        #z3 = z2 + P(-1.43396, -2.04789)
        #c5 = z3 + P(0.417534, 0.723058)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.1341, 1)
        z1 = z0 + PP(6.39987, 0)
        c1 = z1 + PP(2.13396, 177)
        c2 = z1 + PP(2.74095, -1)
        z2 = z3 - PP(2.50001, ta-4)
        #z2 = z1 + PP(2.21097, 108)
        c3 = z2 + PP(2.47926, 50)
        #c4 = z2 + PP(0.834923, -130)
        #z3 = z2 + PP(2.50001, -125)
        #c5 = z3 + PP(0.834954, 59)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])


    @classmethod
    def path_ECLswl(cls, ta=None, **kwargs):
        # M 205.664,97.1338 C 211.732,96.9219 217.806,96.9219 223.874,97.1338 226.425,97.2229 225.57854,94.354075 224.69158,93.472662 223.11263,91.9036 220.43933,93.814958 218.18341,94.968979
        
        #moveto(205.664, 97.1338), 
        #curveto(211.732, 96.9219, 217.806, 96.9219, 223.874, 97.1338), 
        #curveto(226.425, 97.2229, 225.57854, 94.354075, 224.69158, 93.472662), 
        #curveto(223.11263, 91.9036, 220.43933, 93.814958, 218.18341, 94.968979)
        #z0 = P(0, -0)
        #c0 = P(2.13266, 0.0744743)
        #c1 = P(4.26743, 0.0744743)
        #z1 = P(6.40008, -0)
        #c2 = P(7.29666, -0.0313151)
        #c3 = P(6.99916, 0.976962)
        #z2 = P(6.68743, 1.28674)
        #c4 = P(6.13249, 1.83821)
        #c5 = P(5.19294, 1.16644)
        z3 = P(4.40007, 0.760848) + P(0.5, 0)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.13266, 0.0744743)
        #z1 = z0 + P(6.40008, 0)
        #c1 = z1 + P(-2.13266, 0.0744743)
        #c2 = z1 + P(0.896574, -0.0313151)
        #z2 = z1 + P(0.287347, 1.28674)
        #c3 = z2 + P(0.311731, -0.309781)
        #c4 = z2 + P(-0.554938, 0.551462)
        #z3 = z2 + P(-2.28736, -0.525895)
        #c5 = z3 + P(0.792865, 0.405592)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.13396, 2)
        z1 = z0 + PP(6.40008, 0)
        c1 = z1 + PP(2.13396, 177)
        c2 = z1 + PP(0.897121, -2)
        #z2 = z1 + PP(1.31844, 77)
        z2 = z3 - PP(2.34704, ta-14)
        c3 = z2 + PP(0.439478, -44)
        #c4 = z2 + PP(0.782347, 135)
        #z3 = z2 + PP(2.34704, -167)
        #c5 = z3 + PP(0.890584, 27)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])



    @classmethod
    def path_ECLne(cls, ta=None, **kwargs):
        # M 41.2001,-0.133498 C 48.028733,-0.27965586 54.857367,-0.43027585 61.686,-0.133498 67.048838,0.0995752 66.1067,-6.33679 63.4817,-5.11273 60.4674,-3.70718 57.5817,-2.1830646 54.8574,-0.27545259
        
        #moveto(41.2001, -0.133498), 
        #curveto(48.028733, -0.27965586, 54.857367, -0.43027585, 61.686, -0.133498), 
        #curveto(67.048838, 0.0995752, 66.1067, -6.33679, 63.4817, -5.11273), 
        #curveto(60.4674, -3.70718, 57.5817, -2.1830646, 54.8574, -0.27545259)
        #z0 = P(0, -0)
        #c0 = P(2.39999, 0.0513686)
        #c1 = P(4.79998, 0.104306)
        #z1 = P(7.19997, -0)
        #c2 = P(9.08479, -0.0819159)
        #c3 = P(8.75367, 2.18021)
        #z2 = P(7.83109, 1.75)
        #c4 = P(6.77168, 1.25601)
        #c5 = P(5.75748, 0.72034)
        z3 = P(4.79999, 0.0498913)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.39999, 0.0513686)
        #z1 = z0 + P(7.19997, 0)
        #c1 = z1 + P(-2.39999, 0.104306)
        #c2 = z1 + P(1.88482, -0.0819159)
        #z2 = z1 + P(0.631117, 1.75)
        #c3 = z2 + P(0.922582, 0.430208)
        #c4 = z2 + P(-1.05941, -0.493994)
        #z3 = z2 + P(-3.0311, -1.70011)
        #c5 = z3 + P(0.957482, 0.670449)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.40054, 1)
        z1 = z0 + PP(7.19997, 0)
        c1 = z1 + PP(2.40226, 177)
        c2 = z1 + PP(1.8866, -2)
        z2 = z3 + PP(3.47533, ta-5)
        #z2 = z1 + PP(1.86032, 70)
        c3 = z2 + PP(1.01796, 25)
        #c4 = z2 + PP(1.16892, -155)
        #z3 = z2 + PP(3.47533, -150)
        #c5 = z3 + PP(1.16888, 35)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            #curve(),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta+180)])


    @classmethod
    def path_ECLs(cls, ta=None, **kwargs):
        # M 81.6171 -21.2927C 88.7254 -21.6652 95.8483 -21.6652 102.957 -21.2927C 103.725 -21.2524 104.338 -21.9086 104.365 -22.701C 104.558 -28.3987 95.3982 -29.5253 95.3982 -26.6431C 95.6952 -24.9586 95.8446 -23.2515 95.8446 -21.541
        
        #moveto(81.6171, -21.2927), 
        #curveto(88.7254, -21.6652, 95.8483, -21.6652, 102.957, -21.2927), 
        #curveto(103.725, -21.2524, 104.338, -21.9086, 104.365, -22.701), 
        #curveto(104.558, -28.3987, 95.3982, -29.5253, 95.3982, -26.6431), 
        #curveto(95.6952, -24.9586, 95.8446, -23.2515, 95.8446, -21.541)
        #z0 = P(0, -0)
        #c0 = P(2.49828, 0.130919)
        #c1 = P(5.0017, 0.130919)
        #z1 = P(7.50012, -0)
        #c2 = P(7.77004, -0.0141638)
        #c3 = P(7.98548, 0.216464)
        #z2 = P(7.99497, 0.494961)
        #c4 = P(8.06281, 2.49747)
        #c5 = P(4.8435, 2.89343)
        #z3 = P(4.8435, 1.88045)
        #c6 = P(4.94789, 1.28842)
        #c7 = P(5.0004, 0.68844)
        z4 = P(5.0004, 0.0872675)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.49828, 0.130919)
        #z1 = z0 + P(7.50012, 0)
        #c1 = z1 + P(-2.49842, 0.130919)
        #c2 = z1 + P(0.269921, -0.0141638)
        #z2 = z1 + P(0.494856, 0.494961)
        #c3 = z2 + P(-0.00948942, -0.278497)
        #c4 = z2 + P(0.0678318, 2.00251)
        #z3 = z2 + P(-3.15147, 1.38549)
        #c5 = z3 + P(0, 1.01298)
        #c6 = z3 + P(0.104384, -0.592034)
        #z4 = z3 + P(0.156892, -1.79318)
        #c7 = z4 + P(0, 0.601172)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.50171, 2)
        z1 = z0 + PP(7.50012, 0)
        c1 = z1 + PP(2.50185, 177)
        c2 = z1 + PP(0.270293, -3)
        z2 = z1 + PP(0.699906, 45)
        c3 = z2 + PP(0.278658, -91)
        c4 = z2 + PP(2.00366, 88)
        z3 = z4 - PP(1.80003, ta+6)
        #z3 = z2 + PP(3.44258, 156)
        c5 = z3 + PP(1.01298, 90)
        #c6 = z3 + PP(0.601166, -80)
        #z4 = z3 + PP(1.80003, -84)
        #c7 = z4 + PP(0.601172, 90)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLse(cls, ta=None, **kwargs):
        ## M 124.631,33.2813 C 131.739,32.9088 138.862,32.9088 145.97,33.2813 146.739,33.3216 147.354,32.6656 147.379,31.873 147.622,24.0254 134.45,25.3979 136.724,29.3369 137.58478,30.568933 138.28009,31.800967 138.858,33.033
        #
        #moveto(124.631, 33.2813), 
        #curveto(131.739, 32.9088, 138.862, 32.9088, 145.97, 33.2813), 
        #curveto(146.739, 33.3216, 147.354, 32.6656, 147.379, 31.873), 
        #curveto(147.622, 24.0254, 134.45, 25.3979, 136.724, 29.3369), 
        #curveto(137.58478, 30.568933, 138.28009, 31.800967, 138.858, 33.033)
        #z0 = P(0, -0)
        #c0 = P(2.49818, 0.130919)
        #c1 = P(5.00163, 0.130919)
        #z1 = P(7.4998, -0)
        #c2 = P(7.77007, -0.0141638)
        #c3 = P(7.98622, 0.216394)
        #z2 = P(7.99501, 0.494961)
        #c4 = P(8.08041, 3.25308)
        #c5 = P(3.45098, 2.7707)
        #z3 = P(4.2502, 1.3863)
        #c6 = P(4.55273, 0.953288)
        #c7 = P(4.79711, 0.520278)
        z4 = P(5.00022, 0.0872675)
        #
        #z0 = P(0, -0)
        #c0 = z0 + P(2.49818, 0.130919)
        #z1 = z0 + P(7.4998, 0)
        #c1 = z1 + P(-2.49818, 0.130919)
        #c2 = z1 + P(0.270273, -0.0141638)
        #z2 = z1 + P(0.495207, 0.494961)
        #c3 = z2 + P(-0.0087865, -0.278567)
        #c4 = z2 + P(0.0854047, 2.75812)
        #z3 = z2 + P(-3.7448, 0.891337)
        #c5 = z3 + P(-0.79922, 1.3844)
        #c6 = z3 + P(0.30253, -0.43301)
        #z4 = z3 + P(0.750015, -1.29903)
        #c7 = z4 + P(-0.203112, 0.43301)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.5016, 2)
        z1 = z0 + PP(7.4998, 0)
        c1 = z1 + PP(2.5016, 177)
        c2 = z1 + PP(0.270644, -2)
        z2 = z1 + PP(0.700154, 44)
        c3 = z2 + PP(0.278706, -91)
        c4 = z2 + PP(2.75944, 88)
        z3 = z4 - PP(1.5, ta)
        #z3 = z2 + PP(3.84942, 166)
        c5 = z3 + PP(1.59854, 119)
        #c6 = z3 + PP(0.528225, -55)
        #z4 = z3 + PP(1.5, -59)
        #c7 = z4 + PP(0.478281, 115)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLser(cls, ta=None, **kwargs):
        ## M 144.549 42.8893C 151.657 42.5168 158.78 42.5168 165.888 42.8893C 166.664 42.9299 167.29 42.2748 167.297 41.481C 167.378 32.1734 147.82 37.4181 155.957 41.2124C 156.818 41.614 157.642 42.09 158.421 42.6351
        #
        #moveto(144.549, 42.8893), 
        #curveto(151.657, 42.5168, 158.78, 42.5168, 165.888, 42.8893), 
        #curveto(166.664, 42.9299, 167.29, 42.2748, 167.297, 41.481), 
        #curveto(167.378, 32.1734, 147.82, 37.4181, 155.957, 41.2124), 
        #curveto(156.818, 41.614, 157.642, 42.09, 158.421, 42.6351)
        #z0 = P(0, -0)
        #c0 = P(2.49818, 0.130919)
        #c1 = P(5.00163, 0.130919)
        #z1 = P(7.4998, -0)
        #c2 = P(7.77254, -0.0142693)
        #c3 = P(7.99255, 0.215972)
        #z2 = P(7.99501, 0.494961)
        #c4 = P(8.02348, 3.76621)
        #c5 = P(1.14963, 1.92291)
        #z3 = P(4.00945, 0.589363)
        #c6 = P(4.31206, 0.448217)
        #c7 = P(4.60166, 0.280922)
        z4 = P(4.87545, 0.0893411)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.49818, 0.130919)
        #z1 = z0 + P(7.4998, 0)
        #c1 = z1 + P(-2.49818, 0.130919)
        #c2 = z1 + P(0.272733, -0.0142693)
        #z2 = z1 + P(0.495207, 0.494961)
        #c3 = z2 + P(-0.00246022, -0.278989)
        #c4 = z2 + P(0.0284682, 3.27125)
        #z3 = z2 + P(-3.98555, 0.0944021)
        #c5 = z3 + P(-2.85983, 1.33354)
        #c6 = z3 + P(0.302607, -0.141146)
        #z4 = z3 + P(0.865997, -0.500022)
        #c7 = z4 + P(-0.273787, 0.191581)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.5016, 2)
        z1 = z0 + PP(7.4998, 0)
        c1 = z1 + PP(2.5016, 177)
        c2 = z1 + PP(0.273106, -2)
        z2 = z1 + PP(0.700154, 44)
        c3 = z2 + PP(0.279, -90)
        c4 = z2 + PP(3.27137, 89)
        z3 = z4 - PP(0.999987, -30)
        #z3 = z2 + PP(3.98667, 178)
        c5 = z3 + PP(3.15547, 155)
        #c6 = z3 + PP(0.333906, -25)
        #z4 = z3 + PP(0.999987, -30)
        #c7 = z4 + PP(0.33416, 145)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLsr(cls, ta=None, **kwargs):
        # M 109.692 10.7538C 116.8 10.3813 123.923 10.3813 131.032 10.7538C 131.799 10.7941 132.412 10.1378 132.44 9.34549C 132.724 1.27465 117.976 3.09246 121.945 7.20234C 122.935 8.22765 123.834 9.33746 124.631 10.5191
        
        #moveto(109.692, 10.7538), 
        #curveto(116.8, 10.3813, 123.923, 10.3813, 131.032, 10.7538), 
        #curveto(131.799, 10.7941, 132.412, 10.1378, 132.44, 9.34549), 
        #curveto(132.724, 1.27465, 117.976, 3.09246, 121.945, 7.20234), 
        #curveto(122.935, 8.22765, 123.834, 9.33746, 124.631, 10.5191)
        #z0 = P(0, -0)
        #c0 = P(2.49818, 0.130919)
        #c1 = P(5.00163, 0.130919)
        #z1 = P(7.50015, -0)
        #c2 = P(7.76972, -0.0141638)
        #c3 = P(7.98517, 0.216499)
        #z2 = P(7.99501, 0.494964)
        #c4 = P(8.09482, 3.33154)
        #c5 = P(2.91149, 2.69265)
        #z3 = P(4.30644, 1.2482)
        #c6 = P(4.65438, 0.88784)
        #c7 = P(4.97035, 0.497787)
        z4 = P(5.25046, 0.0824876)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.49818, 0.130919)
        #z1 = z0 + P(7.50015, 0)
        #c1 = z1 + P(-2.49853, 0.130919)
        #c2 = z1 + P(0.26957, -0.0141638)
        #z2 = z1 + P(0.494856, 0.494964)
        #c3 = z2 + P(-0.00984088, -0.278465)
        #c4 = z2 + P(0.0998146, 2.83658)
        #z3 = z2 + P(-3.68857, 0.753231)
        #c5 = z3 + P(-1.39494, 1.44446)
        #c6 = z3 + P(0.347945, -0.360355)
        #z4 = z3 + P(0.944021, -1.16571)
        #c7 = z4 + P(-0.280114, 0.415299)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.5016, 2)
        z1 = z0 + PP(7.50015, 0)
        c1 = z1 + PP(2.50196, 177)
        c2 = z1 + PP(0.269942, -3)
        z2 = z1 + PP(0.699908, 45)
        c3 = z2 + PP(0.278639, -92)
        c4 = z2 + PP(2.83833, 87)
        z3 = z4 - PP(1.50002, ta+7)
        #z3 = z2 + PP(3.76469, 168)
        c5 = z3 + PP(2.00807, 134)
        #c6 = z3 + PP(0.500921, -46)
        #z4 = z3 + PP(1.50002, -50)
        #c7 = z4 + PP(0.500936, 123)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLner(cls, ta=None, **kwargs):
        return cls.path_ECL()

    @classmethod
    def path_ECLel(cls, ta=None, **kwargs):
        # M 85.3157,-0.50456 C 92.424,-0.877091 99.5469,-0.877091 106.655,-0.50456 107.378,-0.466666 107.84469,-1.1745563 108.064,-1.9129 110.75473,-10.971556 93.460432,-9.7440095 101.35635,-3.4603045 102.8576,-2.2655822 104.44048,-1.42564 106.08789,-0.535058
        
        #moveto(85.3157, -0.50456), 
        #curveto(92.424, -0.877091, 99.5469, -0.877091, 106.655, -0.50456), 
        #curveto(107.378, -0.466666, 107.84469, -1.1745563, 108.064, -1.9129), 
        #curveto(110.75473, -10.971556, 93.460432, -9.7440095, 101.35635, -3.4603045), 
        #curveto(102.8576, -2.2655822, 104.44048, -1.42564, 106.08789, -0.535058)
        #z0 = P(0, -0)
        #c0 = P(2.49828, 0.13093)
        #c1 = P(5.0017, 0.13093)
        #z1 = P(7.49991, -0)
        #c2 = P(7.75401, -0.0133182)
        #c3 = P(7.91804, 0.235477)
        #z2 = P(7.99511, 0.494975)
        #c4 = P(8.9408, 3.67873)
        #c5 = P(2.86255, 3.2473)
        #z3 = P(5.63764, 1.03883)
        #c6 = P(6.16527, 0.618929)
        #c7 = P(6.72159, 0.323723)
        z4 = P(7.30059, 0.0107188)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.49828, 0.13093)
        #z1 = z0 + P(7.49991, 0)
        #c1 = z1 + P(-2.49821, 0.13093)
        #c2 = z1 + P(0.254105, -0.0133182)
        #z2 = z1 + P(0.495207, 0.494975)
        #c3 = z2 + P(-0.0770787, -0.259498)
        #c4 = z2 + P(0.945684, 3.18375)
        #z3 = z2 + P(-2.35747, 0.543851)
        #c5 = z3 + P(-2.7751, 2.20847)
        #c6 = z3 + P(0.527629, -0.419897)
        #z4 = z3 + P(1.66295, -1.02811)
        #c7 = z4 + P(-0.578999, 0.313004)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.50171, 3)
        z1 = z0 + PP(7.49991, 0)
        c1 = z1 + PP(2.50164, 176)
        c2 = z1 + PP(0.254454, -3)
        z2 = z1 + PP(0.700164, 44)
        c3 = z2 + PP(0.270704, -106)
        c4 = z2 + PP(3.32124, 73)
        z3 = z4 - PP(1.95509, ta)
        #z3 = z2 + PP(2.41939, 167)
        c5 = z3 + PP(3.54662, 141)
        c6 = z3 + PP(0.674319, -38)
        #z4 = z3 + PP(1.95509, -31)
        c7 = z4 + PP(0.658187, 151)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLe(cls, ta=None, **kwargs):
        # M 41.2001,-0.133498 C 48.7851,-0.398375 56.3772,-0.398375 63.9623,-0.133498 66.9389,-0.0295508 66.4896,-6.29627 60.0455,-6.29627 54.0674,-6.29627 53.422704,-1.2424024 56.189353,-0.89640622 58.844953,-0.56429779 61.556025,-0.65235761 64.211625,-0.72999169
        
        #moveto(41.2001, -0.133498), 
        #curveto(48.7851, -0.398375, 56.3772, -0.398375, 63.9623, -0.133498), 
        #curveto(66.9389, -0.0295508, 66.4896, -6.29627, 60.0455, -6.29627), 
        #curveto(54.0674, -6.29627, 53.422704, -1.2424024, 56.189353, -0.89640622), 
        #curveto(58.844953, -0.56429779, 61.556025, -0.65235761, 64.211625, -0.72999169)
        #z0 = P(0, -0)
        #c0 = P(2.66582, 0.0930936)
        #c1 = P(5.33414, 0.0930936)
        #z1 = P(8, -0)
        #c2 = P(9.04616, -0.0365333)
        #c3 = P(8.88824, 2.16597)
        #z2 = P(6.6234, 2.16597)
        #c4 = P(4.52234, 2.16597)
        #c5 = P(4.29575, 0.389735)
        #z3 = P(5.26812, 0.268132)
        #c6 = P(6.20146, 0.151409)
        #c7 = P(7.15429, 0.182358)
        z4 = P(8.08763, 0.209644)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.66582, 0.0930936)
        #z1 = z0 + P(8, 0)
        #c1 = z1 + P(-2.66586, 0.0930936)
        #c2 = z1 + P(1.04616, -0.0365333)
        #z2 = z1 + P(-1.3766, 2.16597)
        #c3 = z2 + P(2.26484, 0)
        #c4 = z2 + P(-2.10106, 0)
        #z3 = z2 + P(-1.35528, -1.89784)
        #c5 = z3 + P(-0.972366, 0.121604)
        #c6 = z3 + P(0.933337, -0.116723)
        #z4 = z3 + P(2.81951, -0.058488)
        #c7 = z4 + P(-0.933337, -0.0272853)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.66745, 2)
        z1 = z0 + PP(8, 0)
        c1 = z1 + PP(2.66748, 178)
        c2 = z1 + PP(1.04679, -2)
        z2 = z1 + PP(2.56641, 122)
        c3 = z2 + PP(2.26484, 0)
        c4 = z2 + PP(2.10106, 180)
        z3 = z4 + PP(-2.82011, -1)
        #z3 = z2 + PP(2.33207, -125)
        c5 = z3 + PP(0.97994, 172)
        #c6 = z3 + PP(0.940607, -7)
        #z4 = z3 + PP(2.82011, -1)
        #c7 = z4 + PP(0.933736, -178)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ECLer(cls, ta=None, **kwargs):
        # M 117.438,-0.535058 C 125.011,-1.1976 132.627,-1.1976 140.2,-0.535058 143.22,-0.270783 143.405,-6.90365 136.936,-6.90365 134.03,-6.90365 131.24922,-5.1207466 131.696,-2.98617 132.1441,-0.84528277 136.534,-0.125821 140.2,-2.24222
        
        #moveto(117.438, -0.535058), 
        #curveto(125.011, -1.1976, 132.627, -1.1976, 140.2, -0.535058), 
        #curveto(143.22, -0.270783, 143.405, -6.90365, 136.936, -6.90365), 
        #curveto(134.03, -6.90365, 131.24922, -5.1207466, 131.696, -2.98617), 
        #curveto(132.1441, -0.84528277, 136.534, -0.125821, 140.2, -2.24222)
        #z0 = P(0, -0)
        #c0 = P(2.66161, 0.232857)
        #c1 = P(5.33832, 0.232857)
        #z1 = P(7.99993, -0)
        #c2 = P(9.06134, -0.0928821)
        #c3 = P(9.12636, 2.2383)
        #z2 = P(6.85276, 2.2383)
        #c4 = P(5.83142, 2.2383)
        #c5 = P(4.85409, 1.61169)
        #z3 = P(5.01111, 0.861468)
        #c6 = P(5.1686, 0.109032)
        #c7 = P(6.71148, -0.14383)
        z4 = P(7.99993, 0.599999)
        
        #z0 = P(0, -0)
        #c0 = z0 + P(2.66161, 0.232857)
        #z1 = z0 + P(7.99993, 0)
        #c1 = z1 + P(-2.66161, 0.232857)
        #c2 = z1 + P(1.06141, -0.0928821)
        #z2 = z1 + P(-1.14717, 2.2383)
        #c3 = z2 + P(2.27359, 0)
        #c4 = z2 + P(-1.02134, 0)
        #z3 = z2 + P(-1.84165, -1.37684)
        #c5 = z3 + P(-0.157025, 0.750218)
        #c6 = z3 + P(0.157489, -0.752436)
        #z4 = z3 + P(2.98881, -0.261469)
        #c7 = z4 + P(-1.28845, -0.743829)
        
        z0 = P(0, -0)
        c0 = z0 + PP(2.67177, 4)
        z1 = z0 + PP(7.99993, 0)
        c1 = z1 + PP(2.67177, 175)
        c2 = z1 + PP(1.06547, -5)
        z2 = z1 + PP(2.51515, 117)
        c3 = z2 + PP(2.27359, 0)
        c4 = z2 + PP(1.02134, 180)
        z3 = z4 - PP(3.00023, -4)
        #z3 = z2 + PP(2.29942, -143)
        c5 = z3 + PP(0.766475, 101)
        #c6 = z3 + PP(0.768741, -78)
        #z4 = z3 + PP(3.00023, -4)
        #c7 = z4 + PP(1.48775, -150)
        
        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])


    @classmethod
    def path_ECLnel(cls, ta=None, **kwargs):
        return cls.path_ECLe(ta)

    @classmethod
    def path_ECLE(cls, ta=None, **kwargs):
        #M 47.3414,115.237 C 54.8981,114.973 62.4618,114.973 70.0186,115.237 72.9841,115.341 72.5835,109.068 66.1635,109.068 60.2077,109.068 59.5234,114.117 62.2742,114.503 64.9191,114.875 67.5984,114.643 70.267,114.643 72.04776,114.643 73.740302,114.643 75.751519,114.643

        #z0 = P(0, -0)
        #c0 = P(2.65588, 0.0927854)
        #c1 = P(5.31421, 0.0927854)
        #z1 = P(7.97013, -0)
        #c2 = P(9.01238, -0.0365518)
        #c3 = P(8.87159, 2.16816)
        #z2 = P(6.61521, 2.16816)
        #c4 = P(4.52199, 2.16816)
        #c5 = P(4.28148, 0.393635)
        #z3 = P(5.24828, 0.257972)
        #c6 = P(6.17786, 0.127228)
        #c7 = P(7.11952, 0.208767)
        #z4 = P(8.05743, 0.208767)
        #c8 = P(8.68329, 0.208767)
        #c9 = P(9.27815, 0.208767)
        #z5 = P(9.98502, 0.208767)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.65588, 0.0927854)
        #z1 = z0 + P(7.97013, 0)
        #c1 = z1 + P(-2.65591, 0.0927854)
        #c2 = z1 + P(1.04225, -0.0365518)
        #z2 = z1 + P(-1.35491, 2.16816)
        #c3 = z2 + P(2.25637, 0)
        #c4 = z2 + P(-2.09322, 0)
        #z3 = z2 + P(-1.36693, -1.91018)
        #c5 = z3 + P(-0.966796, 0.135664)
        #c6 = z3 + P(0.929576, -0.130743)
        #z4 = z3 + P(2.80915, -0.0492044)
        #c7 = z4 + P(-0.937906, 0)
        #c8 = z4 + P(0.625866, 0)
        #z5 = z4 + P(1.92759, 0)
        #c9 = z5 + P(-0.706862, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.6575, 2)
        z1 = z0 + PP(7.97013, 0)
        c1 = z1 + PP(2.65753, 177)
        c2 = z1 + PP(1.0429, -2)
        z2 = z1 + PP(2.5567, 122)
        c3 = z2 + PP(2.25637, 0)
        c4 = z2 + PP(2.09322, 180)
        z3 = z2 + PP(2.3489, -125)
        c5 = z3 + PP(0.976268, 172)
        c6 = z3 + PP(0.938726, -8)
        z4 = z3 + PP(2.80958, -1)
        #z4 = z5 - PP(1.92759, ta + 0)
        c7 = z4 + PP(0.937906, 180)
        c8 = z4 + PP(0.625866, 0)
        z5 = z4 + PP(1.92759, 0)
        c9 = z5 + PP(0.706862, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

class CharKun(CharKu):
    def __init__(self, name='kun', kana='„Åè„Çì',
                 model='E8CL4E1F', head_type='E', tail_type='F'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_ECLE()]

class CharKuku(CharKu):
    def __init__(self, name='kuku', kana='„Åè„Åè',
                 model='BE8CL4', head_type='BE', tail_type='ECL4'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharKutsu(CharKu):
    def __init__(self, name='kutsu', kana='„Åè„Å§',
                 model='E8CL4SW1F', head_type='E', tail_type='SWF'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature = {}

    @classmethod
    def path_ECLSWF(cls, ta=None, **kwargs):
        #M 329.797,115.237 C 335.845,115.132 341.904,114.815 347.938,115.237 350.852,115.339 351.06319,113.86603 350.676,112.087 349.68669,107.5414 346.77548,106.29256 344.61,110.356 343.79196,111.89102 343.15553,113.49598 342.496,115.104 342.1468,115.9554 341.91339,116.9226 341.56419,117.774

        #z0 = P(0, -0)
        #c0 = P(2.1336, 0.0370417)
        #c1 = P(4.27108, 0.148872)
        #z1 = P(6.39974, -0)
        #c2 = P(7.42774, -0.0359833)
        #c3 = P(7.50224, 0.483648)
        #z2 = P(7.36565, 1.11125)
        #c4 = P(7.01664, 2.71484)
        #c5 = P(5.98963, 3.1554)
        #z3 = P(5.2257, 1.72191)
        #c6 = P(4.93711, 1.18039)
        #c7 = P(4.71259, 0.614193)
        #z4 = P(4.47992, 0.0469194)
        #c8 = P(4.35673, -0.253436)
        #c9 = P(4.27439, -0.594642)
        z5 = P(4.1512, -0.894997)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.1336, 0.0370417)
        #z1 = z0 + P(6.39974, 0)
        #c1 = z1 + P(-2.12866, 0.148872)
        #c2 = z1 + P(1.02799, -0.0359833)
        #z2 = z1 + P(0.965906, 1.11125)
        #c3 = z2 + P(0.136592, -0.627602)
        #c4 = z2 + P(-0.349007, 1.60359)
        #z3 = z2 + P(-2.13995, 0.610658)
        #c5 = z3 + P(0.763933, 1.43349)
        #c6 = z3 + P(-0.288586, -0.541521)
        #z4 = z3 + P(-0.745772, -1.67499)
        #c7 = z4 + P(0.232668, 0.567274)
        #c8 = z4 + P(-0.12319, -0.300355)
        #z5 = z4 + P(-0.328722, -0.941917)
        #c9 = z5 + P(0.12319, 0.300355)

        z0 = P(0, -0)
        c0 = z0 + PP(2.13392, 0)
        z1 = z0 + PP(6.39974, 0)
        c1 = z1 + PP(2.13386, 175)
        c2 = z1 + PP(1.02862, -2)
        z2 = z1 + PP(1.47236, 49)
        c3 = z2 + PP(0.642294, -77)
        c4 = z2 + PP(1.64113, 102)
        z3 = z2 + PP(2.22537, 164)
        c5 = z3 + PP(1.62434, 61)
        c6 = z3 + PP(0.613618, -118)
        z4 = z3 + PP(1.83351, -114)
        #z4 = z5 - PP(0.99763, ta + 4)
        c7 = z4 + PP(0.613134, 67)
        c8 = z4 + PP(0.324637, -112)
        z5 = z4 + PP(0.99763, -109)
        c9 = z5 + PP(0.324637, 67)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])
        
class CharKuchi(CharKutsu):
    def __init__(self, name='kuchi', kana='„Åè„Å°',
                 model='E8CL4SW1F', head_type='E', tail_type='SWF'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharKuki(WasedaChar):
    def __init__(self, name='kuki', kana='„Åè„Åç',
                 model='E8CL4CR1', head_type='E', tail_type='CL4CR1'):
        super().__init__(name, kana, model, head_type, tail_type)


    @classmethod
    def path_ECLCR(cls, ta=None, **kwargs):
        #M 245.78612,114.69541 C 252.87312,114.44841 259.96412,114.32441 267.04612,114.69541 267.81012,114.73541 268.42112,114.08241 268.44912,113.29241 268.87012,105.25841 253.92512,107.15841 257.87912,111.25241 258.86612,112.27441 259.83917,113.30777 260.66912,114.46141 261.06949,115.01794 261.53454,116.3449 260.9825,116.99059 260.54503,117.50228 259.29069,117.64543 258.96396,117.05682 258.46328,116.15485 258.86891,115.2445 260.68605,114.48536

        #z0 = P(0, -0)
        #c0 = P(2.50014, 0.0871361)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76958, -0.0141111)
        #c3 = P(7.98512, 0.216253)
        #z2 = P(7.995, 0.494947)
        #c4 = P(8.14352, 3.32916)
        #c5 = P(2.87126, 2.65889)
        #z3 = P(4.26614, 1.21461)
        #c6 = P(4.61433, 0.854075)
        #c7 = P(4.9576, 0.489529)
        #z4 = P(5.25039, 0.08255)
        #c8 = P(5.39163, -0.113781)
        #c9 = P(5.55569, -0.581903)
        #z5 = P(5.36095, -0.809689)
        #c10 = P(5.20662, -0.990201)
        #c11 = P(4.76411, -1.0407)
        #z6 = P(4.64885, -0.833053)
        #c12 = P(4.47222, -0.514858)
        #c13 = P(4.61532, -0.193707)
        z7 = P(5.25636, 0.074101)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50014, 0.0871361)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269522, -0.0141111)
        #z2 = z1 + P(0.494947, 0.494947)
        #c3 = z2 + P(-0.00987778, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.72886, 0.719667)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.348192, -0.360539)
        #z4 = z3 + P(0.98425, -1.13206)
        #c7 = z4 + P(-0.292788, 0.406979)
        #c8 = z4 + P(0.141242, -0.196331)
        #z5 = z4 + P(0.110553, -0.892238)
        #c9 = z5 + P(0.194747, 0.227785)
        #c10 = z5 + P(-0.15433, -0.180513)
        #z6 = z5 + P(-0.712096, -0.0233645)
        #c11 = z6 + P(0.115263, -0.207649)
        #c12 = z6 + P(-0.176629, 0.318195)
        #z7 = z6 + P(0.607515, 0.907154)
        #c13 = z7 + P(-0.641047, -0.267808)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50165, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.269891, -2)
        z2 = z1 + PP(0.699961, 44)
        c3 = z2 + PP(0.278869, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79767, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501224, -45)
        z4 = z3 + PP(1.50011, -48)
        c7 = z4 + PP(0.501354, 125)
        c8 = z4 + PP(0.241858, -54)
        z5 = z4 + PP(0.899062, -82)
        c9 = z5 + PP(0.299688, 49)
        c10 = z5 + PP(0.237492, -130)
        z6 = z5 + PP(0.712479, -178)
        #z6 = z7 - PP(1.09179, ta + 393)
        c11 = z6 + PP(0.237494, -60)
        c12 = z6 + PP(0.363931, 119)
        z7 = z6 + PP(1.09179, 56)
        c13 = z7 + PP(0.694739, -157)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            controlcurve(c12, c13),
            #curve(),
            endknot(*z7)])

    @classmethod
    def path_ECLCRe(cls, ta=None, **kwargs):
        #M 102.062,115.126 C 109.152,115.002 116.24,114.755 123.322,115.126 124.086,115.153 124.721,114.538 124.749,113.748 125.17,105.714 110.228,107.6 114.182,111.694 115.186,112.699 116.212,113.69 117.027,114.854 117.43,115.409 117.98323,116.77769 117.382,117.378 116.83562,117.92354 115.38299,117.98829 115.08876,117.05187 114.81904,116.19346 116.36183,115.76568 117.474,115.76568

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76958, -0.009525)
        #c3 = P(7.99359, 0.207433)
        #z2 = P(8.00347, 0.486128)
        #c4 = P(8.15199, 3.32034)
        #c5 = P(2.88078, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.62986, 0.856192)
        #c7 = P(4.99181, 0.506589)
        #z4 = P(5.27932, 0.0959556)
        #c8 = P(5.42149, -0.0998361)
        #c9 = P(5.61666, -0.58268)
        #z5 = P(5.40456, -0.794456)
        #c10 = P(5.2118, -0.98691)
        #c11 = P(4.69935, -1.00975)
        #z6 = P(4.59555, -0.679404)
        #c12 = P(4.5004, -0.376576)
        #c13 = P(5.04466, -0.225665)
        z7 = P(5.43701, -0.225665)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269522, -0.009525)
        #z2 = z1 + P(0.503414, 0.486128)
        #c3 = z2 + P(-0.00987778, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.7278, 0.724606)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.354189, -0.354542)
        #z4 = z3 + P(1.00365, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.125236, -0.890411)
        #c9 = z5 + P(0.212101, 0.211776)
        #c10 = z5 + P(-0.192751, -0.192454)
        #z6 = z5 + P(-0.809004, 0.115051)
        #c11 = z6 + P(0.103798, -0.330348)
        #c12 = z6 + P(-0.0951512, 0.302828)
        #z7 = z6 + P(0.84146, 0.453739)
        #c13 = z7 + P(-0.392349, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.26969, -2)
        z2 = z1 + PP(0.699818, 43)
        c3 = z2 + PP(0.278869, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79757, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501148, -45)
        z4 = z3 + PP(1.50002, -48)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.899175, -81)
        c9 = z5 + PP(0.299726, 44)
        c10 = z5 + PP(0.272381, -135)
        #z6 = z5 + PP(0.817144, 171)
        z6 = z7 - PP(0.955999, ta + 28)
        c11 = z6 + PP(0.346271, -72)
        #c12 = z6 + PP(0.317425, 107)
        #z7 = z6 + PP(0.955999, 28)
        #c13 = z7 + PP(0.392349, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta)])

    @classmethod
    def path_ECLCRer(cls, ta=None, **kwargs):
        #M 168.12,115.126 C 175.21,115.002 182.298,114.755 189.38,115.126 190.145,115.153 190.78,114.538 190.808,113.748 191.229,105.714 176.287,107.6 180.24,111.694 181.245,112.699 182.26371,113.69443 183.086,114.854 183.48275,115.41349 183.998,116.737 183.44,117.378 183.008,117.893 182.02247,118.03673 181.422,117.448 180.68527,116.72568 181.43478,115.87116 183.153,114.882

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.009525)
        #c3 = P(7.99394, 0.207433)
        #z2 = P(8.00382, 0.486128)
        #c4 = P(8.15234, 3.32034)
        #c5 = P(2.88114, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.63021, 0.856192)
        #c7 = P(4.98959, 0.505026)
        #z4 = P(5.27967, 0.0959556)
        #c8 = P(5.41964, -0.10142)
        #c9 = P(5.60141, -0.568325)
        #z5 = P(5.40456, -0.794456)
        #c10 = P(5.25216, -0.976136)
        #c11 = P(4.90448, -1.02684)
        #z6 = P(4.69265, -0.81915)
        #c12 = P(4.43275, -0.564332)
        #c13 = P(4.69716, -0.262876)
        z7 = P(5.30331, 0.0860778)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.009525)
        #z2 = z1 + P(0.503767, 0.486128)
        #c3 = z2 + P(-0.00987778, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.72816, 0.724606)
        #c5 = z3 + P(-1.39453, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00401, -1.11478)
        #c7 = z4 + P(-0.290086, 0.409071)
        #c8 = z4 + P(0.139965, -0.197376)
        #z5 = z4 + P(0.124883, -0.890411)
        #c9 = z5 + P(0.19685, 0.226131)
        #c10 = z5 + P(-0.1524, -0.181681)
        #z6 = z5 + P(-0.711906, -0.0246944)
        #c11 = z6 + P(0.211832, -0.207691)
        #c12 = z6 + P(-0.259902, 0.254818)
        #z7 = z6 + P(0.610658, 0.905228)
        #c13 = z7 + P(-0.60615, -0.348954)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270043, -2)
        z2 = z1 + PP(0.700072, 43)
        c3 = z2 + PP(0.278869, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79792, 169)
        c5 = z3 + PP(2.00764, 133)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50025, -47)
        c7 = z4 + PP(0.501486, 125)
        c8 = z4 + PP(0.241965, -54)
        z5 = z4 + PP(0.899126, -82)
        c9 = z5 + PP(0.299808, 48)
        c10 = z5 + PP(0.237136, -129)
        #z6 = z5 + PP(0.712334, -178)
        z6 = z7 - PP(1.09194, ta + 385)
        c11 = z6 + PP(0.296662, -44)
        #c12 = z6 + PP(0.36398, 135)
        #z7 = z6 + PP(1.09194, 55)
        #c13 = z7 + PP(0.699419, -150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta)])

    @classmethod
    def path_ECLCRel(cls, ta=None, **kwargs):
        #M 47.3414,115.126 C 54.4316,115.002 61.5194,114.755 68.6014,115.126 69.366,115.153 70.0011,114.538 70.0287,113.748 70.4497,105.714 55.5077,107.6 59.4614,111.694 60.4661,112.699 61.4916,113.69 62.3068,114.854 62.7097,115.409 63.2188,116.737 62.6615,117.378 62.040406,118.04991 60.616998,117.11181 60.368855,116.32055 60.060222,115.3364 61.420769,114.81647 62.526058,115.40002

        #z0 = P(0, -0)
        #c0 = P(2.50127, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76979, -0.009525)
        #c3 = P(7.99384, 0.207433)
        #z2 = P(8.00358, 0.486128)
        #c4 = P(8.15209, 3.32034)
        #c5 = P(2.88089, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.6301, 0.856192)
        #c7 = P(4.99188, 0.506589)
        #z4 = P(5.27946, 0.0959556)
        #c8 = P(5.42159, -0.0998361)
        #c9 = P(5.60119, -0.568325)
        #z5 = P(5.40459, -0.794456)
        #c10 = P(5.18548, -1.03149)
        #c11 = P(4.68334, -0.70055)
        #z6 = P(4.5958, -0.421411)
        #c12 = P(4.48692, -0.0742244)
        #c13 = P(4.96689, 0.109195)
        z7 = P(5.35681, -0.0966682)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50127, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269734, -0.009525)
        #z2 = z1 + P(0.50352, 0.486128)
        #c3 = z2 + P(-0.00973667, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.72791, 0.724606)
        #c5 = z3 + P(-1.39478, 1.44427)
        #c6 = z3 + P(0.354436, -0.354542)
        #z4 = z3 + P(1.00379, -1.11478)
        #c7 = z4 + P(-0.287584, 0.410633)
        #c8 = z4 + P(0.142134, -0.195792)
        #z5 = z4 + P(0.12513, -0.890411)
        #c9 = z5 + P(0.196603, 0.226131)
        #c10 = z5 + P(-0.219108, -0.237035)
        #z6 = z5 + P(-0.808794, 0.373045)
        #c11 = z6 + P(0.0875393, -0.279139)
        #c12 = z6 + P(-0.108879, 0.347186)
        #z7 = z6 + P(0.761013, 0.324743)
        #c13 = z7 + P(-0.389921, 0.205863)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50165, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.269902, -2)
        z2 = z1 + PP(0.699895, 43)
        c3 = z2 + PP(0.278864, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79768, 169)
        c5 = z3 + PP(2.00782, 134)
        c6 = z3 + PP(0.501323, -45)
        z4 = z3 + PP(1.50011, -47)
        c7 = z4 + PP(0.501323, 125)
        c8 = z4 + PP(0.241943, -54)
        z5 = z4 + PP(0.89916, -82)
        c9 = z5 + PP(0.299646, 48)
        c10 = z5 + PP(0.322791, -132)
        #z6 = z5 + PP(0.89068, 155)
        z6 = z7 - PP(0.827405, ta + 51)
        c11 = z6 + PP(0.292543, -72)
        #c12 = z6 + PP(0.363858, 107)
        #z7 = z6 + PP(0.827405, 23)
        #c13 = z7 + PP(0.440929, 152)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta)])

    @classmethod
    def path_ECLCRne(cls, ta=None, **kwargs):
        #M 444.427,115.126 C 451.518,115.002 458.605,114.755 465.687,115.126 466.452,115.153 467.087,114.538 467.115,113.748 467.536,105.714 452.594,107.6 456.547,111.694 457.552,112.699 458.578,113.69 459.393,114.854 459.796,115.409 460.305,116.737 459.747,117.378 459.315,117.893 458.066,118.031 457.729,117.448 457.229,116.546 457.84644,116.01173 459.46,114.882

        #z0 = P(0, -0)
        #c0 = P(2.50155, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.009525)
        #c3 = P(7.99394, 0.207433)
        #z2 = P(8.00382, 0.486128)
        #c4 = P(8.15234, 3.32034)
        #c5 = P(2.88114, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.63021, 0.856192)
        #c7 = P(4.99216, 0.506589)
        #z4 = P(5.27967, 0.0959556)
        #c8 = P(5.42184, -0.0998361)
        #c9 = P(5.60141, -0.568325)
        #z5 = P(5.40456, -0.794456)
        #c10 = P(5.25216, -0.976136)
        #c11 = P(4.81154, -1.02482)
        #z6 = P(4.69265, -0.81915)
        #c12 = P(4.51626, -0.500944)
        #c13 = P(4.73408, -0.312466)
        z7 = P(5.30331, 0.0860778)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50155, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.009525)
        #z2 = z1 + P(0.503767, 0.486128)
        #c3 = z2 + P(-0.00987778, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.72816, 0.724606)
        #c5 = z3 + P(-1.39453, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00401, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.124883, -0.890411)
        #c9 = z5 + P(0.19685, 0.226131)
        #c10 = z5 + P(-0.1524, -0.181681)
        #z6 = z5 + P(-0.711906, -0.0246944)
        #c11 = z6 + P(0.118886, -0.205669)
        #c12 = z6 + P(-0.176389, 0.318206)
        #z7 = z6 + P(0.610658, 0.905228)
        #c13 = z7 + P(-0.569228, -0.398544)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50193, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270043, -2)
        z2 = z1 + PP(0.700072, 43)
        c3 = z2 + PP(0.278869, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79792, 169)
        c5 = z3 + PP(2.00764, 133)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50025, -47)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.899126, -82)
        c9 = z5 + PP(0.299808, 48)
        c10 = z5 + PP(0.237136, -129)
        #z6 = z5 + PP(0.712334, -178)
        z6 = z7 - PP(1.09194, ta + 380)
        c11 = z6 + PP(0.237558, -59)
        #c12 = z6 + PP(0.363824, 119)
        #z7 = z6 + PP(1.09194, 55)
        #c13 = z7 + PP(0.69488, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta)])

    @classmethod
    def path_ECLCRner(cls, ta=None, **kwargs):
        #M 497.097,115.126 C 504.187,115.002 511.275,114.755 518.357,115.126 519.122,115.153 519.757,114.538 519.784,113.748 520.205,105.714 505.263,107.6 509.217,111.694 510.222,112.699 511.247,113.69 512.062,114.854 512.465,115.409 514.1397,116.29995 513.80829,117.22341 513.56202,117.90962 512.22643,118.24789 511.68723,117.75718 510.97011,117.10453 511.43547,116.59644 512.129,114.882

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.009525)
        #c3 = P(7.99394, 0.207433)
        #z2 = P(8.00347, 0.486128)
        #c4 = P(8.15199, 3.32034)
        #c5 = P(2.88078, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.63021, 0.856192)
        #c7 = P(4.99181, 0.506589)
        #z4 = P(5.27932, 0.0959556)
        #c8 = P(5.42149, -0.0998361)
        #c9 = P(6.01229, -0.414143)
        #z5 = P(5.89537, -0.73992)
        #c10 = P(5.80849, -0.981999)
        #c11 = P(5.33733, -1.10133)
        #z6 = P(5.14711, -0.928222)
        #c12 = P(4.89412, -0.697981)
        #c13 = P(5.05829, -0.518739)
        z7 = P(5.30296, 0.0860778)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.009525)
        #z2 = z1 + P(0.503414, 0.486128)
        #c3 = z2 + P(-0.009525, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.7278, 0.724606)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00365, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.616052, -0.835875)
        #c9 = z5 + P(0.116914, 0.325776)
        #c10 = z5 + P(-0.0868786, -0.24208)
        #z6 = z5 + P(-0.748263, -0.188302)
        #c11 = z6 + P(0.190218, -0.173112)
        #c12 = z6 + P(-0.252984, 0.23024)
        #z7 = z6 + P(0.155847, 1.0143)
        #c13 = z7 + P(-0.244662, -0.604816)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270043, -2)
        z2 = z1 + PP(0.699818, 43)
        c3 = z2 + PP(0.278857, -91)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79757, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50002, -48)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(1.03837, -53)
        c9 = z5 + PP(0.34612, 70)
        c10 = z5 + PP(0.257197, -109)
        #z6 = z5 + PP(0.771592, -165)
        z6 = z7 - PP(1.0262, ta + 373)
        c11 = z6 + PP(0.257197, -42)
        #c12 = z6 + PP(0.34207, 137)
        #z7 = z6 + PP(1.0262, 81)
        #c13 = z7 + PP(0.652428, -112)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta)])

    @classmethod
    def path_ECLCRnel(cls, ta=None, **kwargs):
        #M 392.489,115.126 C 399.579,115.002 406.667,114.755 413.749,115.126 414.513,115.153 415.148,114.538 415.176,113.748 415.597,105.714 400.655,107.6 404.609,111.694 405.613,112.699 406.639,113.69 407.454,114.854 407.857,115.409 408.366,116.737 407.809,117.378 407.376,117.893 406.25937,117.96102 405.79,117.448 405.09384,116.6871 405.50449,115.30393 407.521,114.882

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76958, -0.009525)
        #c3 = P(7.99359, 0.207433)
        #z2 = P(8.00347, 0.486128)
        #c4 = P(8.15199, 3.32034)
        #c5 = P(2.88078, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.62986, 0.856192)
        #c7 = P(4.99181, 0.506589)
        #z4 = P(5.27932, 0.0959556)
        #c8 = P(5.42149, -0.0998361)
        #c9 = P(5.60105, -0.568325)
        #z5 = P(5.40456, -0.794456)
        #c10 = P(5.2518, -0.976136)
        #c11 = P(4.85788, -1.00013)
        #z6 = P(4.6923, -0.81915)
        #c12 = P(4.44671, -0.550721)
        #c13 = P(4.59158, -0.0627697)
        z7 = P(5.30296, 0.0860778)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269522, -0.009525)
        #z2 = z1 + P(0.503414, 0.486128)
        #c3 = z2 + P(-0.00987778, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.7278, 0.724606)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.354189, -0.354542)
        #z4 = z3 + P(1.00365, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.125236, -0.890411)
        #c9 = z5 + P(0.196497, 0.226131)
        #c10 = z5 + P(-0.152753, -0.181681)
        #z6 = z5 + P(-0.712258, -0.0246944)
        #c11 = z6 + P(0.165583, -0.180982)
        #c12 = z6 + P(-0.24559, 0.268429)
        #z7 = z6 + P(0.610658, 0.905228)
        #c13 = z7 + P(-0.71138, -0.148848)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.26969, -2)
        z2 = z1 + PP(0.699818, 43)
        c3 = z2 + PP(0.278869, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79757, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501148, -45)
        z4 = z3 + PP(1.50002, -48)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.899175, -81)
        c9 = z5 + PP(0.299577, 49)
        c10 = z5 + PP(0.237363, -130)
        #z6 = z5 + PP(0.712686, -178)
        z6 = z7 - PP(1.09194, ta + 403)
        c11 = z6 + PP(0.245301, -47)
        #c12 = z6 + PP(0.363824, 132)
        #z7 = z6 + PP(1.09194, 55)
        #c13 = z7 + PP(0.726785, -168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta)])

    @classmethod
    def path_ECLCRs(cls, ta=None, **kwargs):
        #M 266.222,115.126 C 273.312,115.002 280.4,114.755 287.482,115.126 288.247,115.153 288.882,114.538 288.909,113.748 289.33,105.714 274.388,107.6 278.342,111.694 279.347,112.699 280.372,113.69 281.187,114.854 281.59,115.409 282.099,116.737 281.542,117.378 281.109,117.893 279.73058,118.05074 279.35163,117.42645 278.9187,116.71326 279.74325,115.42266 280.55549,115.23209 281.01357,115.12461 281.714,115.17306 281.714,116.03853

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.009525)
        #c3 = P(7.99394, 0.207433)
        #z2 = P(8.00347, 0.486128)
        #c4 = P(8.15199, 3.32034)
        #c5 = P(2.88078, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.63021, 0.856192)
        #c7 = P(4.99181, 0.506589)
        #z4 = P(5.27932, 0.0959556)
        #c8 = P(5.42149, -0.0998361)
        #c9 = P(5.60105, -0.568325)
        #z5 = P(5.40456, -0.794456)
        #c10 = P(5.2518, -0.976136)
        #c11 = P(4.76553, -1.03178)
        #z6 = P(4.63184, -0.811548)
        #c12 = P(4.47911, -0.55995)
        #c13 = P(4.77, -0.104655)
        #z7 = P(5.05654, -0.0374262)
        #c14 = P(5.21814, 0.000490361)
        #c15 = P(5.46523, -0.0166017)
        z8 = P(5.46523, -0.32192)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.009525)
        #z2 = z1 + P(0.503414, 0.486128)
        #c3 = z2 + P(-0.009525, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.7278, 0.724606)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00365, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.125236, -0.890411)
        #c9 = z5 + P(0.196497, 0.226131)
        #c10 = z5 + P(-0.152753, -0.181681)
        #z6 = z5 + P(-0.772714, -0.0170921)
        #c11 = z6 + P(0.133685, -0.220236)
        #c12 = z6 + P(-0.152728, 0.251598)
        #z7 = z6 + P(0.424695, 0.774121)
        #c13 = z7 + P(-0.28654, -0.0672289)
        #c14 = z7 + P(0.1616, 0.0379166)
        #z8 = z7 + P(0.408697, -0.284494)
        #c15 = z8 + P(0, 0.305319)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270043, -2)
        z2 = z1 + PP(0.699818, 43)
        c3 = z2 + PP(0.278857, -91)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79757, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50002, -48)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.899175, -81)
        c9 = z5 + PP(0.299577, 49)
        c10 = z5 + PP(0.237363, -130)
        z6 = z5 + PP(0.772903, -178)
        c11 = z6 + PP(0.257634, -58)
        c12 = z6 + PP(0.294325, 121)
        #z7 = z6 + PP(0.882967, 61)
        z7 = z8 - PP(0.497966, ta + 56)
        c13 = z7 + PP(0.294321, -166)
        #c14 = z7 + PP(0.165989, 13)
        #z8 = z7 + PP(0.497966, -34)
        #c15 = z8 + PP(0.305319, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            controlcurve(c12, c13),
            knot(*z7),
            #controlcurve(c14, c15),
            curve(),
            endknot(*z8, angle=ta)])

    @classmethod
    def path_ECLCRsl(cls, ta=None, **kwargs):
        #M 349.107,115.126 C 356.197,115.002 363.285,114.755 370.367,115.126 371.132,115.153 371.767,114.538 371.794,113.748 372.215,105.714 357.273,107.6 361.227,111.694 362.232,112.699 363.257,113.69 364.072,114.854 364.475,115.409 365.14543,116.34784 364.81347,117.04306 364.55976,117.57438 363.60885,118.03061 363.15617,117.65412 362.44934,117.06624 363.14012,115.8819 363.62279,114.93582

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.009525)
        #c3 = P(7.99394, 0.207433)
        #z2 = P(8.00347, 0.486128)
        #c4 = P(8.15199, 3.32034)
        #c5 = P(2.88078, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.63021, 0.856192)
        #c7 = P(4.99181, 0.506589)
        #z4 = P(5.27932, 0.0959556)
        #c8 = P(5.42149, -0.0998361)
        #c9 = P(5.658, -0.431038)
        #z5 = P(5.54089, -0.676296)
        #c10 = P(5.45139, -0.863734)
        #c11 = P(5.11593, -1.02468)
        #z6 = P(4.95623, -0.891865)
        #c12 = P(4.70688, -0.684474)
        #c13 = P(4.95057, -0.266665)
        z7 = P(5.12085, 0.0670913)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.009525)
        #z2 = z1 + P(0.503414, 0.486128)
        #c3 = z2 + P(-0.009525, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.7278, 0.724606)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00365, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.261574, -0.772252)
        #c9 = z5 + P(0.117108, 0.245258)
        #c10 = z5 + P(-0.0895033, -0.187438)
        #z6 = z5 + P(-0.584659, -0.215568)
        #c11 = z6 + P(0.159695, -0.132817)
        #c12 = z6 + P(-0.249354, 0.207391)
        #z7 = z6 + P(0.164613, 0.958956)
        #c13 = z7 + P(-0.170275, -0.333756)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270043, -2)
        z2 = z1 + PP(0.699818, 43)
        c3 = z2 + PP(0.278857, -91)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79757, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50002, -48)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.815349, -71)
        c9 = z5 + PP(0.271783, 64)
        c10 = z5 + PP(0.207711, -115)
        z6 = z5 + PP(0.623134, -159)
        #z6 = z7 - PP(0.972982, ta + 377)
        c11 = z6 + PP(0.207709, -39)
        #c12 = z6 + PP(0.324328, 140)
        #z7 = z6 + PP(0.972982, 80)
        #c13 = z7 + PP(0.374682, -117)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta+180)])

    @classmethod
    def path_ECLCRsr(cls, ta=None, **kwargs):
        #M 222.84,115.126 C 229.931,115.002 237.018,114.755 244.1,115.126 244.865,115.153 245.5,114.538 245.528,113.748 245.949,105.714 231.007,107.6 234.96,111.694 235.965,112.699 236.991,113.69 237.806,114.854 238.209,115.409 238.70626,116.72733 238.16,117.378 237.72723,117.89349 236.62223,117.91959 236.142,117.448 235.73078,117.04418 235.70139,116.05393 236.17057,115.71919 236.80668,115.26535 237.68599,115.36913 238.39956,116.44521

        #z0 = P(0, -0)
        #c0 = P(2.50155, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.009525)
        #c3 = P(7.99394, 0.207433)
        #z2 = P(8.00382, 0.486128)
        #c4 = P(8.15234, 3.32034)
        #c5 = P(2.88114, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.63021, 0.856192)
        #c7 = P(4.99216, 0.506589)
        #z4 = P(5.27967, 0.0959556)
        #c8 = P(5.42184, -0.0998361)
        #c9 = P(5.59726, -0.564914)
        #z5 = P(5.40456, -0.794456)
        #c10 = P(5.25188, -0.976309)
        #c11 = P(4.86206, -0.985516)
        #z6 = P(4.69265, -0.81915)
        #c12 = P(4.54758, -0.676691)
        #c13 = P(4.53721, -0.327353)
        #z7 = P(4.70273, -0.209264)
        #c14 = P(4.92713, -0.0491596)
        #c15 = P(5.23734, -0.0857709)
        z8 = P(5.48907, -0.465388)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50155, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.009525)
        #z2 = z1 + P(0.503767, 0.486128)
        #c3 = z2 + P(-0.00987778, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.72816, 0.724606)
        #c5 = z3 + P(-1.39453, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00401, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.124883, -0.890411)
        #c9 = z5 + P(0.192708, 0.229542)
        #c10 = z5 + P(-0.152672, -0.181853)
        #z6 = z5 + P(-0.711906, -0.0246944)
        #c11 = z6 + P(0.169414, -0.166366)
        #c12 = z6 + P(-0.145069, 0.142459)
        #z7 = z6 + P(0.0100789, 0.609886)
        #c13 = z7 + P(-0.165516, -0.118089)
        #c14 = z7 + P(0.224405, 0.160105)
        #z8 = z7 + P(0.786338, -0.256124)
        #c15 = z8 + P(-0.251732, 0.379617)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50193, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270043, -2)
        z2 = z1 + PP(0.700072, 43)
        c3 = z2 + PP(0.278869, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79792, 169)
        c5 = z3 + PP(2.00764, 133)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50025, -47)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.899126, -82)
        c9 = z5 + PP(0.29971, 49)
        c10 = z5 + PP(0.237443, -130)
        z6 = z5 + PP(0.712334, -178)
        c11 = z6 + PP(0.237443, -44)
        c12 = z6 + PP(0.203321, 135)
        #z7 = z6 + PP(0.609969, 89)
        z7 = z8 - PP(0.826999, ta + 39)
        c13 = z7 + PP(0.203324, -144)
        #c14 = z7 + PP(0.275665, 35)
        #z8 = z7 + PP(0.826999, -18)
        #c15 = z8 + PP(0.455497, 123)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            controlcurve(c12, c13),
            knot(*z7),
            #controlcurve(c14, c15),
            curve(),
            endknot(*z8, angle=ta)])

    @classmethod
    def path_ECLCRse(cls, ta=None, **kwargs):
        #M 158.678,156.999 C 165.768,156.875 172.856,156.628 179.938,156.999 180.703,157.025 181.338,156.41 181.365,155.62 181.786,147.586 166.844,149.472 170.798,153.566 171.803,154.571 172.828,155.562 173.643,156.726 174.046,157.281 174.52615,158.58449 173.998,159.25 173.54354,159.82265 172.33405,159.9592 171.81355,159.44583 171.29817,158.9375 171.36473,157.66557 171.97762,157.28036 172.66656,156.84735 173.67911,157.26652 174.25095,158.16979

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.00917222)
        #c3 = P(7.99394, 0.207786)
        #z2 = P(8.00347, 0.486481)
        #c4 = P(8.15199, 3.3207)
        #c5 = P(2.88078, 2.65536)
        #z3 = P(4.27567, 1.21109)
        #c6 = P(4.63021, 0.856544)
        #c7 = P(4.99181, 0.506942)
        #z4 = P(5.27932, 0.0963083)
        #c8 = P(5.42149, -0.0994833)
        #c9 = P(5.59088, -0.559326)
        #z5 = P(5.40456, -0.794103)
        #c10 = P(5.24423, -0.996121)
        #c11 = P(4.81755, -1.04429)
        #z6 = P(4.63393, -0.863187)
        #c12 = P(4.45212, -0.68386)
        #c13 = P(4.4756, -0.235151)
        #z7 = P(4.69181, -0.0992576)
        #c14 = P(4.93485, 0.0534987)
        #c15 = P(5.29206, -0.0943751)
        z8 = P(5.49379, -0.413029)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.00917222)
        #z2 = z1 + P(0.503414, 0.486481)
        #c3 = z2 + P(-0.009525, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.7278, 0.724606)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00365, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.125236, -0.890411)
        #c9 = z5 + P(0.18632, 0.234777)
        #c10 = z5 + P(-0.160323, -0.202018)
        #z6 = z5 + P(-0.770625, -0.0690845)
        #c11 = z6 + P(0.183621, -0.181106)
        #c12 = z6 + P(-0.181815, 0.179328)
        #z7 = z6 + P(0.0578803, 0.76393)
        #c13 = z7 + P(-0.216214, -0.135894)
        #c14 = z7 + P(0.243043, 0.152756)
        #z8 = z7 + P(0.80198, -0.313771)
        #c15 = z8 + P(-0.201732, 0.318654)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270031, -1)
        z2 = z1 + PP(0.700063, 44)
        c3 = z2 + PP(0.278857, -91)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79757, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50002, -48)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.899175, -81)
        c9 = z5 + PP(0.299725, 51)
        c10 = z5 + PP(0.257905, -128)
        z6 = z5 + PP(0.773716, -174)
        c11 = z6 + PP(0.257907, -44)
        c12 = z6 + PP(0.255372, 135)
        #z7 = z6 + PP(0.766119, 85)
        z7 = z8 - PP(0.861176, ta + 37)
        c13 = z7 + PP(0.255373, -147)
        #c14 = z7 + PP(0.287061, 32)
        #z8 = z7 + PP(0.861176, -21)
        #c15 = z8 + PP(0.377142, 122)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            controlcurve(c12, c13),
            knot(*z7),
            #controlcurve(c14, c15),
            curve(),
            endknot(*z8, angle=ta)])

    @classmethod
    def path_ECLCRser(cls, ta=None, **kwargs):
        #M 109.627,156.999 C 116.717,156.875 123.805,156.628 130.887,156.999 131.652,157.025 132.287,156.41 132.314,155.62 132.735,147.586 117.793,149.472 121.747,153.566 122.752,154.571 123.777,155.562 124.593,156.726 124.995,157.281 125.47734,158.5863 124.947,159.25 124.45612,159.86431 123.17914,159.97348 122.59611,159.44583 122.12129,159.01612 122.07671,157.94004 122.56433,157.5249 123.22743,156.96034 124.08535,157.308 125.13626,157.98429

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.00917222)
        #c3 = P(7.99394, 0.207786)
        #z2 = P(8.00347, 0.486481)
        #c4 = P(8.15199, 3.3207)
        #c5 = P(2.88078, 2.65536)
        #z3 = P(4.27567, 1.21109)
        #c6 = P(4.63021, 0.856544)
        #c7 = P(4.99181, 0.506942)
        #z4 = P(5.27967, 0.0963083)
        #c8 = P(5.42149, -0.0994833)
        #c9 = P(5.59165, -0.559964)
        #z5 = P(5.40456, -0.794103)
        #c10 = P(5.23138, -1.01082)
        #c11 = P(4.78089, -1.04933)
        #z6 = P(4.57521, -0.863187)
        #c12 = P(4.40771, -0.711595)
        #c13 = P(4.39198, -0.331978)
        #z7 = P(4.564, -0.185526)
        #c14 = P(4.79793, 0.0136384)
        #c15 = P(5.10058, -0.109008)
        z8 = P(5.47132, -0.347588)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.00917222)
        #z2 = z1 + P(0.503414, 0.486481)
        #c3 = z2 + P(-0.009525, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.7278, 0.724606)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00401, -1.11478)
        #c7 = z4 + P(-0.287867, 0.410633)
        #c8 = z4 + P(0.141817, -0.195792)
        #z5 = z4 + P(0.124883, -0.890411)
        #c9 = z5 + P(0.187092, 0.234139)
        #c10 = z5 + P(-0.173172, -0.216715)
        #z6 = z5 + P(-0.829342, -0.0690845)
        #c11 = z6 + P(0.20568, -0.186143)
        #c12 = z6 + P(-0.167506, 0.151592)
        #z7 = z6 + P(-0.0112113, 0.677661)
        #c13 = z7 + P(-0.172021, -0.146452)
        #c14 = z7 + P(0.233927, 0.199164)
        #z8 = z7 + P(0.90732, -0.162063)
        #c15 = z8 + P(-0.370738, 0.23858)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270031, -1)
        z2 = z1 + PP(0.700063, 44)
        c3 = z2 + PP(0.278857, -91)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79757, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50025, -47)
        c7 = z4 + PP(0.501485, 125)
        c8 = z4 + PP(0.241757, -54)
        z5 = z4 + PP(0.899126, -82)
        c9 = z5 + PP(0.299707, 51)
        c10 = z5 + PP(0.277405, -128)
        z6 = z5 + PP(0.832214, -175)
        c11 = z6 + PP(0.277405, -42)
        c12 = z6 + PP(0.225917, 137)
        #z7 = z6 + PP(0.677754, 90)
        z7 = z8 - PP(0.92168, ta + 23)
        c13 = z7 + PP(0.22592, -139)
        #c14 = z7 + PP(0.307227, 40)
        #z8 = z7 + PP(0.92168, -10)
        #c15 = z8 + PP(0.440871, 147)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            controlcurve(c12, c13),
            knot(*z7),
            #controlcurve(c14, c15),
            curve(),
            endknot(*z8, angle=ta)])

    @classmethod
    def path_ECLCRsel(cls, ta=None, **kwargs):
        #M 207.729,156.999 C 214.819,156.875 221.907,156.628 228.989,156.999 229.753,157.025 230.389,156.41 230.416,155.62 230.837,147.586 215.895,149.472 219.849,153.566 220.854,154.571 221.879,155.562 222.694,156.726 223.097,157.281 223.61422,158.61567 223.049,159.25 222.56422,159.79406 221.26186,159.80638 220.86356,159.19617 220.44524,158.55531 220.99852,157.27847 221.73552,157.0723 222.35027,156.90033 223.26902,156.81185 223.27649,158.20933

        #z0 = P(0, -0)
        #c0 = P(2.50119, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76958, -0.00917222)
        #c3 = P(7.99394, 0.207786)
        #z2 = P(8.00347, 0.486481)
        #c4 = P(8.15199, 3.3207)
        #c5 = P(2.88078, 2.65536)
        #z3 = P(4.27567, 1.21109)
        #c6 = P(4.63021, 0.856544)
        #c7 = P(4.99181, 0.506942)
        #z4 = P(5.27932, 0.0963083)
        #c8 = P(5.42149, -0.0994833)
        #c9 = P(5.60395, -0.570325)
        #z5 = P(5.40456, -0.794103)
        #c10 = P(5.23354, -0.986035)
        #c11 = P(4.77409, -0.990381)
        #z6 = P(4.63358, -0.775113)
        #c12 = P(4.48601, -0.549032)
        #c13 = P(4.68119, -0.0985908)
        #z7 = P(4.94119, -0.0258586)
        #c14 = P(5.15806, 0.0348086)
        #c15 = P(5.48217, 0.0660224)
        z8 = P(5.48481, -0.426978)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50119, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269522, -0.00917222)
        #z2 = z1 + P(0.503414, 0.486481)
        #c3 = z2 + P(-0.009525, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.7278, 0.724606)
        #c5 = z3 + P(-1.39488, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00365, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.125236, -0.890411)
        #c9 = z5 + P(0.199397, 0.223778)
        #c10 = z5 + P(-0.17102, -0.191932)
        #z6 = z5 + P(-0.770975, 0.01899)
        #c11 = z6 + P(0.140511, -0.215269)
        #c12 = z6 + P(-0.147574, 0.226081)
        #z7 = z6 + P(0.307608, 0.749254)
        #c13 = z7 + P(-0.259997, -0.0727322)
        #c14 = z7 + P(0.21687, 0.0606672)
        #z8 = z7 + P(0.54362, -0.401119)
        #c15 = z8 + P(-0.00263525, 0.493)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50158, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.269678, -1)
        z2 = z1 + PP(0.700063, 44)
        c3 = z2 + PP(0.278857, -91)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79757, 169)
        c5 = z3 + PP(2.00789, 134)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50002, -48)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.899175, -81)
        c9 = z5 + PP(0.299726, 48)
        c10 = z5 + PP(0.257071, -131)
        z6 = z5 + PP(0.771209, 178)
        c11 = z6 + PP(0.257068, -56)
        c12 = z6 + PP(0.269983, 123)
        #z7 = z6 + PP(0.809941, 67)
        z7 = z8 - PP(0.675588, ta + 54)
        c13 = z7 + PP(0.269979, -164)
        #c14 = z7 + PP(0.225196, 15)
        #z8 = z7 + PP(0.675588, -36)
        #c15 = z8 + PP(0.493007, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            controlcurve(c12, c13),
            knot(*z7),
            #controlcurve(c14, c15),
            curve(),
            endknot(*z8, angle=ta)])

    @classmethod
    def path_ECLCRsw(cls, ta=None, **kwargs):
        #M 309.603,115.126 C 316.694,115.002 323.781,114.755 330.863,115.126 331.628,115.153 332.263,114.538 332.291,113.748 332.712,105.714 317.77,107.6 321.723,111.694 322.728,112.699 323.754,113.69 324.569,114.854 324.972,115.409 325.481,116.737 324.924,117.378 324.491,117.893 323.25658,118.02234 322.905,117.448 322.48077,116.75498 323.2761,115.29256 324.0883,115.31679 324.80296,115.33812 325.32026,116.16722 325.01582,117.2508

        #z0 = P(0, -0)
        #c0 = P(2.50155, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76993, -0.009525)
        #c3 = P(7.99394, 0.207433)
        #z2 = P(8.00382, 0.486128)
        #c4 = P(8.15234, 3.32034)
        #c5 = P(2.88114, 2.65501)
        #z3 = P(4.27567, 1.21073)
        #c6 = P(4.63021, 0.856192)
        #c7 = P(4.99216, 0.506589)
        #z4 = P(5.27967, 0.0959556)
        #c8 = P(5.42184, -0.0998361)
        #c9 = P(5.60141, -0.568325)
        #z5 = P(5.40491, -0.794456)
        #c10 = P(5.25216, -0.976136)
        #c11 = P(4.81668, -1.02176)
        #z6 = P(4.69265, -0.81915)
        #c12 = P(4.54299, -0.574668)
        #c13 = P(4.82357, -0.0587587)
        #z7 = P(5.11009, -0.0673065)
        #c14 = P(5.36221, -0.0748312)
        #c15 = P(5.5447, -0.367319)
        z8 = P(5.4373, -0.749582)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50155, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269875, -0.009525)
        #z2 = z1 + P(0.503767, 0.486128)
        #c3 = z2 + P(-0.00987778, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.72816, 0.724606)
        #c5 = z3 + P(-1.39453, 1.44427)
        #c6 = z3 + P(0.354542, -0.354542)
        #z4 = z3 + P(1.00401, -1.11478)
        #c7 = z4 + P(-0.287514, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.125236, -0.890411)
        #c9 = z5 + P(0.196497, 0.226131)
        #c10 = z5 + P(-0.152753, -0.181681)
        #z6 = z5 + P(-0.712258, -0.0246944)
        #c11 = z6 + P(0.12403, -0.202614)
        #c12 = z6 + P(-0.149659, 0.244482)
        #z7 = z6 + P(0.417442, 0.751844)
        #c13 = z7 + P(-0.286526, 0.00854781)
        #c14 = z7 + P(0.252116, -0.00752475)
        #z8 = z7 + P(0.327208, -0.682276)
        #c15 = z8 + P(0.1074, 0.382263)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50193, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.270043, -2)
        z2 = z1 + PP(0.700072, 43)
        c3 = z2 + PP(0.278869, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79792, 169)
        c5 = z3 + PP(2.00764, 133)
        c6 = z3 + PP(0.501398, -44)
        z4 = z3 + PP(1.50025, -47)
        c7 = z4 + PP(0.501282, 124)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.899175, -81)
        c9 = z5 + PP(0.299577, 49)
        c10 = z5 + PP(0.237363, -130)
        z6 = z5 + PP(0.712686, -178)
        c11 = z6 + PP(0.237562, -58)
        c12 = z6 + PP(0.286652, 121)
        #z7 = z6 + PP(0.859957, 60)
        z7 = z8 - PP(0.756681, ta + 42)
        c13 = z7 + PP(0.286654, 178)
        #c14 = z7 + PP(0.252228, -1)
        #z8 = z7 + PP(0.756681, -64)
        #c15 = z8 + PP(0.397064, 74)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            controlcurve(c12, c13),
            knot(*z7),
            #controlcurve(c14, c15),
            curve(),
            endknot(*z8, angle=ta)])

    @classmethod
    def path_ECLCRswr(cls, ta=None, **kwargs):
        #M 76.1464,156.999 C 83.2366,156.875 90.3244,156.628 97.4064,156.999 98.171,157.025 98.8061,156.41 98.8336,155.62 99.2547,147.586 84.3126,149.472 88.2664,153.566 89.271,154.571 90.2966,155.562 91.1117,156.726 91.5147,157.281 92.0237,158.609 91.4664,159.25 91.0337,159.766 90.088572,159.93962 89.661103,159.50747 89.130097,158.97064 89.335891,157.61776 90.005359,157.26853 90.555397,156.9816 91.546368,157.4785 91.675853,158.08908

        #z0 = P(0, -0)
        #c0 = P(2.50126, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76979, -0.00917222)
        #c3 = P(7.99384, 0.207786)
        #z2 = P(8.00354, 0.486481)
        #c4 = P(8.15209, 3.3207)
        #c5 = P(2.88085, 2.65536)
        #z3 = P(4.27567, 1.21109)
        #c6 = P(4.63007, 0.856544)
        #c7 = P(4.99188, 0.506942)
        #z4 = P(5.27943, 0.0963083)
        #c8 = P(5.42159, -0.0994833)
        #c9 = P(5.60116, -0.567972)
        #z5 = P(5.40456, -0.794103)
        #c10 = P(5.25191, -0.976136)
        #c11 = P(4.91849, -1.03739)
        #z6 = P(4.76769, -0.884932)
        #c12 = P(4.58036, -0.695551)
        #c13 = P(4.65296, -0.218285)
        #z7 = P(4.88913, -0.0950842)
        #c14 = P(5.08317, 0.00613833)
        #c15 = P(5.43277, -0.169157)
        z8 = P(5.47845, -0.384556)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50126, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269734, -0.00917222)
        #z2 = z1 + P(0.503484, 0.486481)
        #c3 = z2 + P(-0.00970139, -0.278694)
        #c4 = z2 + P(0.148555, 2.83422)
        #z3 = z2 + P(-3.72787, 0.724606)
        #c5 = z3 + P(-1.39481, 1.44427)
        #c6 = z3 + P(0.354401, -0.354542)
        #z4 = z3 + P(1.00376, -1.11478)
        #c7 = z4 + P(-0.287549, 0.410633)
        #c8 = z4 + P(0.142169, -0.195792)
        #z5 = z4 + P(0.12513, -0.890411)
        #c9 = z5 + P(0.196603, 0.226131)
        #c10 = z5 + P(-0.152647, -0.182033)
        #z6 = z5 + P(-0.636869, -0.0908297)
        #c11 = z6 + P(0.150802, -0.152453)
        #c12 = z6 + P(-0.187327, 0.189382)
        #z7 = z6 + P(0.121446, 0.789848)
        #c13 = z7 + P(-0.236173, -0.123201)
        #c14 = z7 + P(0.194041, 0.101223)
        #z8 = z7 + P(0.589313, -0.289472)
        #c15 = z8 + P(-0.0456794, 0.215399)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50165, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.26989, -1)
        z2 = z1 + PP(0.700114, 44)
        c3 = z2 + PP(0.278863, -91)
        c4 = z2 + PP(2.83811, 86)
        z3 = z2 + PP(3.79764, 169)
        c5 = z3 + PP(2.00784, 134)
        c6 = z3 + PP(0.501298, -45)
        z4 = z3 + PP(1.50009, -47)
        c7 = z4 + PP(0.501303, 125)
        c8 = z4 + PP(0.241964, -54)
        z5 = z4 + PP(0.89916, -82)
        c9 = z5 + PP(0.299646, 48)
        c10 = z5 + PP(0.237565, -129)
        z6 = z5 + PP(0.643313, -171)
        c11 = z6 + PP(0.214436, -45)
        c12 = z6 + PP(0.266377, 134)
        #z7 = z6 + PP(0.79913, 81)
        z7 = z8 - PP(0.65657, ta + 53)
        c13 = z7 + PP(0.266376, -152)
        #c14 = z7 + PP(0.218856, 27)
        #z8 = z7 + PP(0.65657, -26)
        #c15 = z8 + PP(0.220189, 101)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            controlcurve(c12, c13),
            knot(*z7),
            #controlcurve(c14, c15),
            curve(),
            endknot(*z8, angle=ta)])

    @classmethod
    def path_ECLCRswl(cls, ta=None, **kwargs):
        #M47.3414 156.999C54.4316 156.875 61.5194 156.628 68.6014 156.999C69.366 157.025 70.0011 156.41 70.0287 155.62C70.4497 147.586 55.5077 149.472 59.4614 153.566C60.4661 154.571 61.4916 155.562 62.3068 156.726C62.7097 157.281 63.2188 158.609 62.6615 159.25C62.2287 159.766 60.9797 159.904 60.6431 159.321C60.1429 158.418 60.5609 157.524 62.3737 156.755

        #z0 = P(0, -0)
        #c0 = P(2.50127, 0.0437444)
        #c1 = P(5.00168, 0.130881)
        #z1 = P(7.50006, -0)
        #c2 = P(7.76979, -0.00917222)
        #c3 = P(7.99384, 0.207786)
        #z2 = P(8.00358, 0.486481)
        #c4 = P(8.15209, 3.3207)
        #c5 = P(2.88089, 2.65536)
        #z3 = P(4.27567, 1.21109)
        #c6 = P(4.6301, 0.856544)
        #c7 = P(4.99188, 0.506942)
        #z4 = P(5.27946, 0.0963083)
        #c8 = P(5.42159, -0.0994833)
        #c9 = P(5.60119, -0.567972)
        #z5 = P(5.40459, -0.794103)
        #c10 = P(5.25191, -0.976136)
        #c11 = P(4.81129, -1.02482)
        #z6 = P(4.69254, -0.81915)
        #c12 = P(4.51608, -0.500592)
        #c13 = P(4.66355, -0.185208)
        z7 = P(5.30306, 0.0860778)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.50127, 0.0437444)
        #z1 = z0 + P(7.50006, 0)
        #c1 = z1 + P(-2.49837, 0.130881)
        #c2 = z1 + P(0.269734, -0.00917222)
        #z2 = z1 + P(0.50352, 0.486481)
        #c3 = z2 + P(-0.00973667, -0.278694)
        #c4 = z2 + P(0.148519, 2.83422)
        #z3 = z2 + P(-3.72791, 0.724606)
        #c5 = z3 + P(-1.39478, 1.44427)
        #c6 = z3 + P(0.354436, -0.354542)
        #z4 = z3 + P(1.00379, -1.11478)
        #c7 = z4 + P(-0.287584, 0.410633)
        #c8 = z4 + P(0.142134, -0.195792)
        #z5 = z4 + P(0.12513, -0.890411)
        #c9 = z5 + P(0.196603, 0.226131)
        #c10 = z5 + P(-0.152682, -0.182033)
        #z6 = z5 + P(-0.712047, -0.0250472)
        #c11 = z6 + P(0.118745, -0.205669)
        #c12 = z6 + P(-0.176459, 0.318558)
        #z7 = z6 + P(0.610517, 0.905228)
        #c13 = z7 + P(-0.639516, -0.271286)

        z0 = P(0, -0)
        c0 = z0 + PP(2.50165, 1)
        z1 = z0 + PP(7.50006, 0)
        c1 = z1 + PP(2.5018, 177)
        c2 = z1 + PP(0.26989, -1)
        z2 = z1 + PP(0.70014, 44)
        c3 = z2 + PP(0.278864, -92)
        c4 = z2 + PP(2.83811, 87)
        z3 = z2 + PP(3.79768, 169)
        c5 = z3 + PP(2.00782, 134)
        c6 = z3 + PP(0.501323, -45)
        z4 = z3 + PP(1.50011, -47)
        c7 = z4 + PP(0.501323, 125)
        c8 = z4 + PP(0.241943, -54)
        z5 = z4 + PP(0.89916, -82)
        c9 = z5 + PP(0.299646, 48)
        c10 = z5 + PP(0.237588, -129)
        z6 = z5 + PP(0.712487, -177)
        #z6 = z7 - PP(1.09186, ta + 393)
        c11 = z6 + PP(0.237487, -59)
        #c12 = z6 + PP(0.364167, 118)
        #z7 = z6 + PP(1.09186, 56)
        #c13 = z7 + PP(0.694677, -157)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta+180)])
