import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharTe(WasedaChar):
    def __init__(self, name='te', kana='„Å¶',
                 model='NE16CL1|SW16CR1', head_type='NE|SW',
                 tail_type='NECL1|SWCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def to_reverse(self):
        if not self.before:
            return False
        else:
            reverse = self.before.tail_type not in {
                'SWR', 'SW', 'SR', 'S', 'SER',
                '', 'SWRCR1', 'SWRCR4', 'SWCR1', 'SWCR4', 'SWCL1',
                'SCR1'}
            reverse = reverse and not self.before.tail_type.endswith('F')
            return reverse

    @classmethod
    def path_NECL(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 56.0512,47.5291 65.867753,37.326587 76.2313,27.6965 77.396313,26.613938 76.901707,26.066986 76.443406,25.485496 76.08455,25.030181 75.146832,24.848747 74.721277,25.242439 73.854559,26.044262 74.556593,27.911118 74.942393,28.777718

        #z0 = P(0, -0)
        #c0 = P(3.07262, 3.9328)
        #c1 = P(6.53569, 7.53202)
        #z1 = P(10.1917, 10.9293)
        #c2 = P(10.6027, 11.3112)
        #c3 = P(10.4282, 11.5042)
        #z2 = P(10.2665, 11.7093)
        #c4 = P(10.1399, 11.8699)
        #c5 = P(9.80914, 11.9339)
        #z3 = P(9.65901, 11.795)
        #c6 = P(9.35325, 11.5122)
        #c7 = P(9.60092, 10.8536)
        z4 = P(9.73702, 10.5479)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.07262, 3.9328)
        #z1 = z0 + P(10.1917, 10.9293)
        #c1 = z1 + P(-3.65603, -3.39728)
        #c2 = z1 + P(0.410991, 0.381904)
        #z2 = z1 + P(0.0748263, 0.779993)
        #c3 = z2 + P(0.161678, -0.205137)
        #c4 = z2 + P(-0.126596, 0.160625)
        #z3 = z2 + P(-0.607529, 0.0857451)
        #c5 = z3 + P(0.150126, 0.138886)
        #c6 = z3 + P(-0.305759, -0.282865)
        #z4 = z3 + P(0.0780048, -1.24717)
        #c7 = z4 + P(-0.136102, 0.305717)

        z0 = P(0, -0)
        c0 = z0 + PP(4.99079, 52)
        z1 = z0 + PP(14.9439, 47)
        c1 = z1 + PP(4.9908, -137)
        c2 = z1 + PP(0.561038, 42)
        z2 = z1 + PP(0.783574, 84)
        c3 = z2 + PP(0.261191, -51)
        c4 = z2 + PP(0.204517, 128)
        z3 = z2 + PP(0.61355, 171)
        #z3 = z4 - PP(1.2496, ta + -19)
        c5 = z3 + PP(0.204517, 42)
        c6 = z3 + PP(0.416535, -137)
        z4 = z3 + PP(1.2496, -86)
        c7 = z4 + PP(0.334644, 113)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_NECLe(cls, ta=None, **kwargs):
        #M 47.3414,85.3237 C 56.0512,74.1756 65.8848,63.9914 76.2313,54.3431 77.4132,53.2789 77.07315,51.92589 76.1863,51.7647 75.278789,51.599755 72.489293,53.458657 72.581509,54.645277 72.654999,55.590938 74.229538,55.189583 75.1995,55.2773

        #z0 = P(0, -0)
        #c0 = P(3.06115, 3.91811)
        #c1 = P(6.51726, 7.49745)
        #z1 = P(10.1536, 10.8884)
        #c2 = P(10.569, 11.2625)
        #c3 = P(10.4495, 11.738)
        #z2 = P(10.1378, 11.7946)
        #c4 = P(9.81887, 11.8526)
        #c5 = P(8.83848, 11.1993)
        #z3 = P(8.87089, 10.7822)
        #c6 = P(8.89671, 10.4499)
        #c7 = P(9.4501, 10.5909)
        z4 = P(9.791, 10.5601)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06115, 3.91811)
        #z1 = z0 + P(10.1536, 10.8884)
        #c1 = z1 + P(-3.63638, -3.39099)
        #c2 = z1 + P(0.41539, 0.374024)
        #z2 = z1 + P(-0.0158157, 0.906204)
        #c3 = z2 + P(0.311692, -0.0566518)
        #c4 = z2 + P(-0.318954, 0.0579715)
        #z3 = z2 + P(-1.26694, -1.01241)
        #c5 = z3 + P(-0.0324102, 0.417049)
        #c6 = z3 + P(0.0258288, -0.332362)
        #z4 = z3 + P(0.920119, -0.222131)
        #c7 = z4 + P(-0.340903, 0.030829)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97214, 52)
        z1 = z0 + PP(14.8881, 46)
        c1 = z1 + PP(4.97213, -136)
        c2 = z1 + PP(0.558966, 42)
        z2 = z1 + PP(0.906342, 90)
        c3 = z2 + PP(0.316799, -10)
        c4 = z2 + PP(0.324179, 169)
        #z3 = z2 + PP(1.62176, -141)
        z3 = z4 - PP(0.946552, ta + -7)
        c5 = z3 + PP(0.418307, 94)
        #c6 = z3 + PP(0.333364, -85)
        #z4 = z3 + PP(0.946552, -13)
        #c7 = z4 + PP(0.342294, 174)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLer(cls, ta=None, **kwargs):
        #M 193.772,85.3237 C 202.482,74.1756 212.315,63.9914 222.662,54.3431 223.844,53.2789 223.36526,51.88825 222.617,51.7647 221.43069,51.568823 219.05831,54.209736 219.1507,55.396343 219.22432,56.34202 220.82674,55.634659 221.63,55.2773

        #z0 = P(0, -0)
        #c0 = P(3.06122, 3.91811)
        #c1 = P(6.51712, 7.49745)
        #z1 = P(10.1537, 10.8884)
        #c2 = P(10.5691, 11.2625)
        #c3 = P(10.4008, 11.7512)
        #z2 = P(10.1379, 11.7946)
        #c4 = P(9.72092, 11.8635)
        #c5 = P(8.88712, 10.9353)
        #z3 = P(8.91959, 10.5183)
        #c6 = P(8.94547, 10.1859)
        #c7 = P(9.50866, 10.4345)
        z4 = P(9.79097, 10.5601)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06122, 3.91811)
        #z1 = z0 + P(10.1537, 10.8884)
        #c1 = z1 + P(-3.63656, -3.39099)
        #c2 = z1 + P(0.415426, 0.374024)
        #z2 = z1 + P(-0.0158157, 0.906204)
        #c3 = z2 + P(0.262983, -0.0434229)
        #c4 = z2 + P(-0.41694, 0.0688429)
        #z3 = z2 + P(-1.21827, -1.27638)
        #c5 = z3 + P(-0.0324714, 0.417045)
        #c6 = z3 + P(0.0258745, -0.332368)
        #z4 = z3 + P(0.871374, 0.0418388)
        #c7 = z4 + P(-0.282314, -0.125597)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97219, 51)
        z1 = z0 + PP(14.8881, 46)
        c1 = z1 + PP(4.97226, -137)
        c2 = z1 + PP(0.558992, 41)
        z2 = z1 + PP(0.906342, 90)
        c3 = z2 + PP(0.266544, -9)
        c4 = z2 + PP(0.422586, 170)
        #z3 = z2 + PP(1.76446, -133)
        z3 = z4 - PP(0.872378, ta + 338)
        c5 = z3 + PP(0.418307, 94)
        #c6 = z3 + PP(0.333373, -85)
        #z4 = z3 + PP(0.872378, 2)
        #c7 = z4 + PP(0.308991, -156)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLel(cls, ta=None, **kwargs):
        #M 47.3414,85.3237 C 56.2113,74.3703 66.3496,64.5782 76.6577,54.9658 77.8536,53.9262 77.348826,52.902332 76.6577,52.3966 75.656716,51.664129 73.363668,52.308028 73.111017,53.522379 72.88069,54.629431 74.855377,55.321704 75.666677,55.753104

        #z0 = P(0, -0)
        #c0 = P(3.1291, 3.86412)
        #c1 = P(6.70567, 7.31855)
        #z1 = P(10.3421, 10.7096)
        #c2 = P(10.764, 11.0763)
        #c3 = P(10.586, 11.4375)
        #z2 = P(10.3421, 11.6159)
        #c4 = P(9.98901, 11.8743)
        #c5 = P(9.18008, 11.6472)
        #z3 = P(9.09095, 11.2188)
        #c6 = P(9.00969, 10.8283)
        #c7 = P(9.70632, 10.584)
        z4 = P(9.99253, 10.4318)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.1291, 3.86412)
        #z1 = z0 + P(10.3421, 10.7096)
        #c1 = z1 + P(-3.63647, -3.39104)
        #c2 = z1 + P(0.421887, 0.366748)
        #z2 = z1 + P(0, 0.906357)
        #c3 = z2 + P(0.243814, -0.178411)
        #c4 = z2 + P(-0.353125, 0.258399)
        #z3 = z2 + P(-1.25119, -0.39715)
        #c5 = z3 + P(0.0891297, 0.428396)
        #c6 = z3 + P(-0.0812542, -0.390543)
        #z4 = z3 + P(0.90158, -0.78695)
        #c7 = z4 + P(-0.286209, 0.152188)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97219, 50)
        z1 = z0 + PP(14.8881, 45)
        c1 = z1 + PP(4.97223, -137)
        c2 = z1 + PP(0.55901, 41)
        z2 = z1 + PP(0.906357, 90)
        c3 = z2 + PP(0.302119, -36)
        c4 = z2 + PP(0.43757, 143)
        #z3 = z2 + PP(1.31271, -162)
        z3 = z4 - PP(1.19672, ta + -12)
        c5 = z3 + PP(0.43757, 78)
        #c6 = z3 + PP(0.398906, -101)
        #z4 = z3 + PP(1.19672, -41)
        #c7 = z4 + PP(0.324155, 151)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLne(cls, ta=None, **kwargs):
        #M 47.3414,111.97 C 56.0512,100.822 65.8848,90.6379 76.2313,80.9896 77.4132,79.9254 76.838453,78.526656 76.1863,78.4113 74.930273,78.189127 72.32239,81.078762 72.414606,82.376651 72.481829,83.322777 74.285172,82.837604 75.1995,81.9238

        #z0 = P(0, -0)
        #c0 = P(3.06115, 3.91807)
        #c1 = P(6.51726, 7.49738)
        #z1 = P(10.1536, 10.8884)
        #c2 = P(10.569, 11.2624)
        #c3 = P(10.367, 11.754)
        #z2 = P(10.1378, 11.7945)
        #c4 = P(9.69638, 11.8726)
        #c5 = P(8.77982, 10.857)
        #z3 = P(8.81223, 10.4009)
        #c6 = P(8.83585, 10.0683)
        #c7 = P(9.46965, 10.2389)
        z4 = P(9.791, 10.56)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06115, 3.91807)
        #z1 = z0 + P(10.1536, 10.8884)
        #c1 = z1 + P(-3.63638, -3.39099)
        #c2 = z1 + P(0.41539, 0.374024)
        #z2 = z1 + P(-0.0158157, 0.906169)
        #c3 = z2 + P(0.229206, -0.040543)
        #c4 = z2 + P(-0.441443, 0.0780849)
        #z3 = z2 + P(-1.3256, -1.39366)
        #c5 = z3 + P(-0.0324102, 0.456156)
        #c6 = z3 + P(0.0236262, -0.332525)
        #z4 = z3 + P(0.978779, 0.159159)
        #c7 = z4 + P(-0.32135, -0.321165)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97211, 51)
        z1 = z0 + PP(14.888, 46)
        c1 = z1 + PP(4.97213, -136)
        c2 = z1 + PP(0.558966, 42)
        z2 = z1 + PP(0.906307, 90)
        c3 = z2 + PP(0.232764, -10)
        c4 = z2 + PP(0.448296, 169)
        #z3 = z2 + PP(1.92341, -133)
        z3 = z4 - PP(0.991634, ta + 324)
        c5 = z3 + PP(0.457306, 94)
        #c6 = z3 + PP(0.333364, -85)
        #z4 = z3 + PP(0.991634, 9)
        #c7 = z4 + PP(0.454327, -135)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLner(cls, ta=None, **kwargs):
        #M 177.601,111.97 C 186.311,100.822 196.145,90.6379 206.491,80.9896 207.673,79.9254 207.21482,78.882395 206.446,78.4113 205.67776,77.940557 203.46062,80.960307 204.67755,81.653401 205.05069,81.865923 206.18669,81.418925 206.76741,80.032227

        #z0 = P(0, -0)
        #c0 = P(3.06122, 3.91807)
        #c1 = P(6.51747, 7.49738)
        #z1 = P(10.1537, 10.8884)
        #c2 = P(10.5691, 11.2624)
        #c3 = P(10.4081, 11.629)
        #z2 = P(10.1379, 11.7945)
        #c4 = P(9.86785, 11.96)
        #c5 = P(9.08862, 10.8987)
        #z3 = P(9.51632, 10.6551)
        #c6 = P(9.64746, 10.5804)
        #c7 = P(10.0467, 10.7375)
        z4 = P(10.2508, 11.2248)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06122, 3.91807)
        #z1 = z0 + P(10.1537, 10.8884)
        #c1 = z1 + P(-3.6362, -3.39099)
        #c2 = z1 + P(0.415426, 0.374024)
        #z2 = z1 + P(-0.0158157, 0.906169)
        #c3 = z2 + P(0.270209, -0.165571)
        #c4 = z2 + P(-0.270006, 0.165447)
        #z3 = z2 + P(-0.621539, -1.13947)
        #c5 = z3 + P(-0.427702, 0.243595)
        #c6 = z3 + P(0.131144, -0.074693)
        #z4 = z3 + P(0.734502, 0.569778)
        #c7 = z4 + P(-0.2041, -0.487369)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97216, 51)
        z1 = z0 + PP(14.888, 46)
        c1 = z1 + PP(4.972, -136)
        c2 = z1 + PP(0.558992, 41)
        z2 = z1 + PP(0.906307, 90)
        c3 = z2 + PP(0.316902, -31)
        c4 = z2 + PP(0.316664, 148)
        #z3 = z2 + PP(1.29796, -118)
        z3 = z4 - PP(0.929591, ta + 329)
        c5 = z3 + PP(0.492207, 150)
        #c6 = z3 + PP(0.150923, -29)
        #z4 = z3 + PP(0.929591, 37)
        #c7 = z4 + PP(0.52838, -112)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLnel(cls, ta=None, **kwargs):
        #M 112.837,111.97 C 121.547,100.822 131.38,90.6379 141.727,80.9896 142.909,79.9254 142.42227,78.603774 141.682,78.4113 140.80917,78.18436 138.2996,80.243563 138.3826,81.430863 138.4656,82.375763 139.53012,82.16999 140.695,81.9238

        #z0 = P(0, -0)
        #c0 = P(3.06122, 3.91807)
        #c1 = P(6.51712, 7.49738)
        #z1 = P(10.1537, 10.8884)
        #c2 = P(10.5691, 11.2624)
        #c3 = P(10.398, 11.7269)
        #z2 = P(10.1379, 11.7945)
        #c4 = P(9.8311, 11.8743)
        #c5 = P(8.94908, 11.1506)
        #z3 = P(8.97825, 10.7333)
        #c6 = P(9.00742, 10.4012)
        #c7 = P(9.38156, 10.4735)
        z4 = P(9.79097, 10.56)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06122, 3.91807)
        #z1 = z0 + P(10.1537, 10.8884)
        #c1 = z1 + P(-3.63656, -3.39099)
        #c2 = z1 + P(0.415426, 0.374024)
        #z2 = z1 + P(-0.0158157, 0.906169)
        #c3 = z2 + P(0.260175, -0.0676469)
        #c4 = z2 + P(-0.306765, 0.0797603)
        #z3 = z2 + P(-1.15961, -1.06126)
        #c5 = z3 + P(-0.0291712, 0.417288)
        #c6 = z3 + P(0.0291712, -0.332094)
        #z4 = z3 + P(0.812716, -0.173248)
        #c7 = z4 + P(-0.409409, -0.0865259)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97216, 51)
        z1 = z0 + PP(14.888, 46)
        c1 = z1 + PP(4.97226, -137)
        c2 = z1 + PP(0.558992, 41)
        z2 = z1 + PP(0.906307, 90)
        c3 = z2 + PP(0.268826, -14)
        c4 = z2 + PP(0.316964, 165)
        #z3 = z2 + PP(1.57193, -137)
        z3 = z4 - PP(0.830976, ta + 336)
        c5 = z3 + PP(0.418307, 93)
        #c6 = z3 + PP(0.333373, -84)
        #z4 = z3 + PP(0.830976, -12)
        #c7 = z4 + PP(0.418452, -168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLs(cls, ta=None, **kwargs):
        #M 47.3414,124.04 C 56.0512,112.892 65.8848,102.708 76.2313,93.0595 77.4132,91.9953 77.066048,90.785214 76.1863,90.4812 75.306552,90.177186 74.934144,90.506234 75.057245,91.358835 75.192804,92.297711 75.11969,93.1272 75.1995,93.9937

        #z0 = P(0, -0)
        #c0 = P(3.06115, 3.91807)
        #c1 = P(6.51726, 7.49734)
        #z1 = P(10.1536, 10.8884)
        #c2 = P(10.569, 11.2624)
        #c3 = P(10.447, 11.6877)
        #z2 = P(10.1378, 11.7946)
        #c4 = P(9.82863, 11.9014)
        #c5 = P(9.69774, 11.7858)
        #z3 = P(9.74101, 11.4861)
        #c6 = P(9.78865, 11.1561)
        #c7 = P(9.76295, 10.8646)
        z4 = P(9.791, 10.5601)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06115, 3.91807)
        #z1 = z0 + P(10.1536, 10.8884)
        #c1 = z1 + P(-3.63638, -3.39106)
        #c2 = z1 + P(0.41539, 0.374024)
        #z2 = z1 + P(-0.0158157, 0.906169)
        #c3 = z2 + P(0.309196, -0.106849)
        #c4 = z2 + P(-0.309196, 0.106849)
        #z3 = z2 + P(-0.396818, -0.308453)
        #c5 = z3 + P(-0.0432651, 0.299655)
        #c6 = z3 + P(0.0476435, -0.329977)
        #z4 = z3 + P(0.0499969, -0.926049)
        #c7 = z4 + P(-0.02805, 0.30454)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97211, 51)
        z1 = z0 + PP(14.888, 46)
        c1 = z1 + PP(4.97218, -136)
        c2 = z1 + PP(0.558966, 42)
        z2 = z1 + PP(0.906307, 90)
        c3 = z2 + PP(0.327137, -19)
        c4 = z2 + PP(0.327137, 160)
        #z3 = z2 + PP(0.502601, -142)
        z3 = z4 - PP(0.927398, ta + -1)
        c5 = z3 + PP(0.302762, 98)
        #c6 = z3 + PP(0.333399, -81)
        #z4 = z3 + PP(0.927398, -86)
        #c7 = z4 + PP(0.305829, 95)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLsl(cls, ta=None, **kwargs):
        #M 117.722,124.04 C 126.432,112.892 136.265,102.708 146.612,93.0595 147.794,91.9953 147.80138,90.543823 146.90081,90.564652 145.86888,90.588518 144.63031,93.56429 144.17822,95.348336

        #z0 = P(0, -0)
        #c0 = P(3.06122, 3.91807)
        #c1 = P(6.51712, 7.49734)
        #z1 = P(10.1537, 10.8884)
        #c2 = P(10.5691, 11.2624)
        #c3 = P(10.5717, 11.7726)
        #z2 = P(10.2552, 11.7652)
        #c4 = P(9.8925, 11.7569)
        #c5 = P(9.45719, 10.711)
        z3 = P(9.2983, 10.084)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06122, 3.91807)
        #z1 = z0 + P(10.1537, 10.8884)
        #c1 = z1 + P(-3.63656, -3.39106)
        #c2 = z1 + P(0.415426, 0.374024)
        #z2 = z1 + P(0.101505, 0.876839)
        #c3 = z2 + P(0.316514, 0.00732056)
        #c4 = z2 + P(-0.362682, -0.00838794)
        #z3 = z2 + P(-0.956881, -1.68127)
        #c5 = z3 + P(0.158891, 0.627021)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97216, 51)
        z1 = z0 + PP(14.8881, 46)
        c1 = z1 + PP(4.97231, -137)
        c2 = z1 + PP(0.558992, 41)
        #z2 = z1 + PP(0.882695, 83)
        z2 = z3 - PP(1.9345, ta + -14)
        c3 = z2 + PP(0.316599, 1)
        #c4 = z2 + PP(0.362779, -178)
        #z3 = z2 + PP(1.9345, -119)
        #c5 = z3 + PP(0.646839, 75)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NECLsr(cls, ta=None, **kwargs):
        #M 188.103,124.04 C 196.812,112.892 206.62893,102.68966 216.992,93.0595 218.15709,91.976811 217.83028,90.662412 216.947,90.4812 215.87277,90.260812 213.50711,92.073924 214.39966,92.638428 215.20141,93.145498 215.35735,93.305323 215.91453,94.068044

        #z0 = P(0, -0)
        #c0 = P(3.06086, 3.91807)
        #c1 = P(6.51112, 7.50379)
        #z1 = P(10.1533, 10.8884)
        #c2 = P(10.5628, 11.2689)
        #c3 = P(10.4479, 11.7309)
        #z2 = P(10.1375, 11.7946)
        #c4 = P(9.75996, 11.872)
        #c5 = P(8.92853, 11.2348)
        #z3 = P(9.24222, 11.0364)
        #c6 = P(9.524, 10.8582)
        #c7 = P(9.57881, 10.802)
        z4 = P(9.77464, 10.5339)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06086, 3.91807)
        #z1 = z0 + P(10.1533, 10.8884)
        #c1 = z1 + P(-3.6422, -3.38461)
        #c2 = z1 + P(0.409482, 0.380522)
        #z2 = z1 + P(-0.0158157, 0.906169)
        #c3 = z2 + P(0.310437, -0.0636887)
        #c4 = z2 + P(-0.377549, 0.0774575)
        #z3 = z2 + P(-0.895288, -0.758179)
        #c5 = z3 + P(-0.313696, 0.198401)
        #c6 = z3 + P(0.281783, -0.178215)
        #z4 = z3 + P(0.532416, -0.502453)
        #c7 = z4 + P(-0.195826, 0.268066)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97194, 52)
        z1 = z0 + PP(14.8878, 47)
        c1 = z1 + PP(4.97205, -137)
        c2 = z1 + PP(0.558993, 42)
        z2 = z1 + PP(0.906307, 90)
        c3 = z2 + PP(0.316903, -11)
        c4 = z2 + PP(0.385412, 168)
        #z3 = z2 + PP(1.17319, -139)
        z3 = z4 - PP(0.732069, ta + 11)
        c5 = z3 + PP(0.371171, 147)
        #c6 = z3 + PP(0.33341, -32)
        #z4 = z3 + PP(0.732069, -43)
        #c7 = z4 + PP(0.331975, 126)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLse(cls, ta=None, **kwargs):
        #M 47.3414,173.364 C 56.0512,162.216 65.867729,152.01266 76.2313,142.383 77.39629,141.30051 76.954679,140.27596 76.1863,139.805 75.417717,139.33392 73.109359,139.38539 73.975635,141.12462 74.398563,141.97373 74.825513,142.47146 75.211313,143.33746

        #z0 = P(0, -0)
        #c0 = P(3.06115, 3.91807)
        #c1 = P(6.51126, 7.50414)
        #z1 = P(10.1536, 10.8886)
        #c2 = P(10.5631, 11.269)
        #c3 = P(10.4079, 11.6291)
        #z2 = P(10.1378, 11.7946)
        #c4 = P(9.8677, 11.9602)
        #c5 = P(9.0564, 11.9421)
        #z3 = P(9.36086, 11.3308)
        #c6 = P(9.50951, 11.0324)
        #c7 = P(9.65956, 10.8575)
        z4 = P(9.79516, 10.5531)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06115, 3.91807)
        #z1 = z0 + P(10.1536, 10.8886)
        #c1 = z1 + P(-3.64238, -3.38444)
        #c2 = z1 + P(0.409447, 0.380452)
        #z2 = z1 + P(-0.0158157, 0.906064)
        #c3 = z2 + P(0.270054, -0.165524)
        #c4 = z2 + P(-0.270126, 0.165566)
        #z3 = z2 + P(-0.77696, -0.463793)
        #c5 = z3 + P(-0.304461, 0.61127)
        #c6 = z3 + P(0.148642, -0.298428)
        #z4 = z3 + P(0.434291, -0.777724)
        #c7 = z4 + P(-0.135593, 0.304364)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97211, 51)
        z1 = z0 + PP(14.8882, 47)
        c1 = z1 + PP(4.97206, -137)
        c2 = z1 + PP(0.558919, 42)
        z2 = z1 + PP(0.906202, 91)
        c3 = z2 + PP(0.316745, -31)
        c4 = z2 + PP(0.316828, 148)
        #z3 = z2 + PP(0.90486, -149)
        z3 = z4 - PP(0.890766, ta + 6)
        c5 = z3 + PP(0.682896, 116)
        #c6 = z3 + PP(0.333397, -63)
        #z4 = z3 + PP(0.890766, -60)
        #c7 = z4 + PP(0.333201, 114)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLser(cls, ta=None, **kwargs):
        #M 109.218,173.364 C 117.928,162.216 127.761,152.031 138.108,142.383 139.29,141.319 138.91462,139.94437 138.063,139.805 137.17362,139.65945 134.15949,141.21557 134.60869,142.06457 134.9637,142.73555 136.37278,142.82382 137.076,143.317

        #z0 = P(0, -0)
        #c0 = P(3.06122, 3.91807)
        #c1 = P(6.51712, 7.49769)
        #z1 = P(10.1537, 10.8886)
        #c2 = P(10.5691, 11.2625)
        #c3 = P(10.4372, 11.7457)
        #z2 = P(10.1379, 11.7946)
        #c4 = P(9.82528, 11.8458)
        #c5 = P(8.76593, 11.2989)
        #z3 = P(8.92381, 11.0005)
        #c6 = P(9.04858, 10.7647)
        #c7 = P(9.54382, 10.7336)
        z4 = P(9.79097, 10.5603)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06122, 3.91807)
        #z1 = z0 + P(10.1537, 10.8886)
        #c1 = z1 + P(-3.63656, -3.39088)
        #c2 = z1 + P(0.415426, 0.373953)
        #z2 = z1 + P(-0.0158157, 0.906064)
        #c3 = z2 + P(0.29931, -0.048983)
        #c4 = z2 + P(-0.312581, 0.051155)
        #z3 = z2 + P(-1.21405, -0.794148)
        #c5 = z3 + P(-0.157876, 0.298389)
        #c6 = z3 + P(0.124772, -0.235823)
        #z4 = z3 + P(0.86716, -0.440179)
        #c7 = z4 + P(-0.247154, 0.173333)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97216, 51)
        z1 = z0 + PP(14.8882, 47)
        c1 = z1 + PP(4.97219, -137)
        c2 = z1 + PP(0.558945, 41)
        z2 = z1 + PP(0.906202, 91)
        c3 = z2 + PP(0.303292, -9)
        c4 = z2 + PP(0.31674, 170)
        #z3 = z2 + PP(1.45072, -146)
        z3 = z4 - PP(0.972484, ta + 10)
        c5 = z3 + PP(0.337581, 117)
        #c6 = z3 + PP(0.266796, -62)
        #z4 = z3 + PP(0.972484, -26)
        #c7 = z4 + PP(0.301876, 144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLsel(cls, ta=None, **kwargs):
        #M 176.764,173.364 C 185.474,162.216 195.307,152.031 205.654,142.383 206.836,141.319 206.05809,140.10264 205.06942,140.3444 203.84106,140.64477 204.16064,142.47217 204.08242,143.8564

        #z0 = P(0, -0)
        #c0 = P(3.06122, 3.91807)
        #c1 = P(6.51712, 7.49769)
        #z1 = P(10.1537, 10.8886)
        #c2 = P(10.5691, 11.2625)
        #c3 = P(10.2957, 11.69)
        #z2 = P(9.94822, 11.6051)
        #c4 = P(9.5165, 11.4995)
        #c5 = P(9.62882, 10.8572)
        z3 = P(9.60133, 10.3707)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06122, 3.91807)
        #z1 = z0 + P(10.1537, 10.8886)
        #c1 = z1 + P(-3.63656, -3.39088)
        #c2 = z1 + P(0.415426, 0.373953)
        #z2 = z1 + P(-0.205456, 0.716486)
        #c3 = z2 + P(0.347478, 0.0849689)
        #c4 = z2 + P(-0.431719, -0.105568)
        #z3 = z2 + P(-0.346891, -1.23433)
        #c5 = z3 + P(0.0274912, 0.486501)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97216, 51)
        z1 = z0 + PP(14.8882, 47)
        c1 = z1 + PP(4.97219, -137)
        c2 = z1 + PP(0.558945, 41)
        #z2 = z1 + PP(0.745362, 106)
        z2 = z3 - PP(1.28215, ta + -11)
        c3 = z2 + PP(0.357716, 13)
        #c4 = z2 + PP(0.444439, -166)
        #z3 = z2 + PP(1.28215, -105)
        #c5 = z3 + PP(0.487277, 86)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NECLsw(cls, ta=None, **kwargs):
        #M 47.3414,216.961 C 56.0512,205.813 65.8848,195.629 76.2313,185.98 77.4132,184.916 77.052375,183.41853 76.1863,183.402 75.286259,183.38482 73.90709,186.69942 73.545069,188.50877

        #z0 = P(0, -0)
        #c0 = P(3.06115, 3.91807)
        #c1 = P(6.51726, 7.49734)
        #z1 = P(10.1536, 10.8886)
        #c2 = P(10.569, 11.2625)
        #c3 = P(10.4422, 11.7888)
        #z2 = P(10.1378, 11.7946)
        #c4 = P(9.8215, 11.8007)
        #c5 = P(9.33677, 10.6357)
        z3 = P(9.20954, 9.99982)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06115, 3.91807)
        #z1 = z0 + P(10.1536, 10.8886)
        #c1 = z1 + P(-3.63638, -3.39124)
        #c2 = z1 + P(0.41539, 0.373953)
        #z2 = z1 + P(-0.0158157, 0.906064)
        #c3 = z2 + P(0.304391, -0.00580963)
        #c4 = z2 + P(-0.316328, 0.00603808)
        #z3 = z2 + P(-0.928287, -1.79482)
        #c5 = z3 + P(0.127236, 0.635914)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97211, 51)
        z1 = z0 + PP(14.8882, 47)
        c1 = z1 + PP(4.9723, -136)
        c2 = z1 + PP(0.558919, 41)
        #z2 = z1 + PP(0.906202, 91)
        z2 = z3 - PP(2.02067, ta + -15)
        c3 = z2 + PP(0.304446, -1)
        #c4 = z2 + PP(0.316386, 178)
        #z3 = z2 + PP(2.02067, -117)
        #c5 = z3 + PP(0.648518, 78)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_NECLswr(cls, ta=None, **kwargs):
        #M 113.844,216.961 C 122.554,205.813 132.36986,195.61059 142.734,185.98 143.89902,184.89744 143.45682,183.87289 142.689,183.402 141.92076,182.93085 139.78312,183.3083 140.52944,184.4044 141.06335,185.18853 141.49755,186.06085 141.702,186.915

        #z0 = P(0, -0)
        #c0 = P(3.06122, 3.91807)
        #c1 = P(6.5111, 7.50381)
        #z1 = P(10.1537, 10.8886)
        #c2 = P(10.5631, 11.2691)
        #c3 = P(10.4077, 11.6291)
        #z2 = P(10.1379, 11.7946)
        #c4 = P(9.86785, 11.9602)
        #c5 = P(9.11656, 11.8276)
        #z3 = P(9.37886, 11.4423)
        #c6 = P(9.56651, 11.1667)
        #c7 = P(9.71911, 10.8602)
        z4 = P(9.79097, 10.56)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.06122, 3.91807)
        #z1 = z0 + P(10.1537, 10.8886)
        #c1 = z1 + P(-3.64258, -3.38477)
        #c2 = z1 + P(0.409458, 0.380476)
        #z2 = z1 + P(-0.0158157, 0.906064)
        #c3 = z2 + P(0.269858, -0.165499)
        #c4 = z2 + P(-0.270006, 0.16559)
        #z3 = z2 + P(-0.758999, -0.352303)
        #c5 = z3 + P(-0.262302, 0.385235)
        #c6 = z3 + P(0.187648, -0.27559)
        #z4 = z3 + P(0.412108, -0.882375)
        #c7 = z4 + P(-0.071856, 0.300199)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97216, 51)
        z1 = z0 + PP(14.8882, 47)
        c1 = z1 + PP(4.97243, -137)
        c2 = z1 + PP(0.558944, 42)
        z2 = z1 + PP(0.906202, 91)
        c3 = z2 + PP(0.316565, -31)
        c4 = z2 + PP(0.316738, 148)
        #z3 = z2 + PP(0.836778, -155)
        z3 = z4 - PP(0.973868, ta + 13)
        c5 = z3 + PP(0.466056, 124)
        #c6 = z3 + PP(0.333409, -55)
        #z4 = z3 + PP(0.973868, -64)
        #c7 = z4 + PP(0.308679, 103)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLswl(cls, ta=None, **kwargs):
        #M 60.0666,300.608 C 68.9364,289.654 78.5403,279.355 88.8488,269.742 90.0262,268.682 90.041577,268.46654 89.553086,268.15772 87.731203,267.00592 85.825275,271.91366 85.341994,273.06483

        #z0 = P(0, -0)
        #c0 = P(3.11738, 3.84989)
        #c1 = P(6.49276, 7.46958)
        #z1 = P(10.1158, 10.8482)
        #c2 = P(10.5296, 11.2207)
        #c3 = P(10.535, 11.2964)
        #z2 = P(10.3633, 11.405)
        #c4 = P(9.723, 11.8098)
        #c5 = P(9.05314, 10.0849)
        z3 = P(8.88329, 9.68032)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.11738, 3.84989)
        #z1 = z0 + P(10.1158, 10.8482)
        #c1 = z1 + P(-3.62302, -3.37858)
        #c2 = z1 + P(0.413809, 0.372547)
        #z2 = z1 + P(0.247528, 0.556811)
        #c3 = z2 + P(0.171685, -0.108538)
        #c4 = z2 + P(-0.640319, 0.404811)
        #z3 = z2 + P(-1.48003, -1.72465)
        #c5 = z3 + P(0.169854, 0.40459)

        z0 = P(0, -0)
        c0 = z0 + PP(4.95376, 51)
        z1 = z0 + PP(14.8328, 47)
        c1 = z1 + PP(4.9539, -136)
        c2 = z1 + PP(0.556803, 41)
        z2 = z1 + PP(0.609351, 66)
        #z2 = z3 - PP(2.27264, ta + -17)
        c3 = z2 + PP(0.203116, -32)
        #c4 = z2 + PP(0.757549, 147)
        #z3 = z2 + PP(2.27264, -130)
        #c5 = z3 + PP(0.438798, 67)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCR(cls, ta=None, **kwargs):
        #M 21,34 C 13.426453,47.11763 7.0127945,60.871533 1.83226,75.105057 1.402565,76.285645 0.390484,76.087563 -0.19378262,75.477718 -0.77804925,74.867874 -0.76115932,74.341531 0.47087684,73.602676 1.2827569,73.115789 2.0417961,72.690183 2.8904794,72.249704

        #z0 = P(0, 0)
        #c0 = P(-2.6618, -4.61032)
        #c1 = P(-4.91594, -9.44427)
        #z1 = P(-6.73669, -14.4468)
        #c2 = P(-6.88771, -14.8617)
        #c3 = P(-7.24342, -14.7921)
        #z2 = P(-7.44876, -14.5778)
        #c4 = P(-7.65411, -14.3634)
        #c5 = P(-7.64817, -14.1784)
        #z3 = P(-7.21516, -13.9188)
        #c6 = P(-6.92982, -13.7476)
        #c7 = P(-6.66305, -13.598)
        z4 = P(-6.36477, -13.4432)

        #z0 = P(0, 0)
        #c0 = z0 + P(-2.6618, -4.61032)
        #z1 = z0 + P(-6.73669, -14.4468)
        #c1 = z1 + P(1.82075, 5.00251)
        #c2 = z1 + P(-0.151021, -0.414929)
        #z2 = z1 + P(-0.712073, -0.130975)
        #c3 = z2 + P(0.205346, -0.214336)
        #c4 = z2 + P(-0.205346, 0.214336)
        #z3 = z2 + P(0.233601, 0.659002)
        #c5 = z3 + P(-0.433011, -0.259678)
        #c6 = z3 + P(0.285343, 0.171121)
        #z4 = z3 + P(0.850393, 0.475515)
        #c7 = z4 + P(-0.298278, -0.154811)

        z0 = P(0, 0)
        c0 = z0 + PP(5.32355, -120)
        z1 = z0 + PP(15.9403, -115)
        c1 = z1 + PP(5.32356, 70)
        c2 = z1 + PP(0.441558, -109)
        z2 = z1 + PP(0.724018, -169)
        c3 = z2 + PP(0.296828, -46)
        c4 = z2 + PP(0.296828, 133)
        z3 = z2 + PP(0.69918, 70)
        #z3 = z4 - PP(0.974312, ta + 361)
        c5 = z3 + PP(0.504907, -149)
        c6 = z3 + PP(0.332721, 30)
        #z4 = z3 + PP(0.974312, 29)
        c7 = z4 + PP(0.33606, -152)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_SWCRe(cls, ta=None, **kwargs):
        #M 70.0186,317.672 C 62.4734,330.741 56.064989,344.43617 50.9225,358.624 50.49613,359.80033 49.026609,358.89123 48.459208,358.25686 47.876916,357.60584 48.402249,357.05567 49.477495,356.92091 50.413541,356.8036 50.688704,356.83463 51.574424,356.84658

        #z0 = P(0, -0)
        #c0 = P(-2.65184, -4.59323)
        #c1 = P(-4.90413, -9.40653)
        #z1 = P(-6.71151, -14.393)
        #c2 = P(-6.86136, -14.8064)
        #c3 = P(-7.37784, -14.4869)
        #z2 = P(-7.57726, -14.2639)
        #c4 = P(-7.78191, -14.0351)
        #c5 = P(-7.59728, -13.8418)
        #z3 = P(-7.21937, -13.7944)
        #c6 = P(-6.89039, -13.7532)
        #c7 = P(-6.79368, -13.7641)
        z4 = P(-6.48239, -13.7683)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65184, -4.59323)
        #z1 = z0 + P(-6.71151, -14.393)
        #c1 = z1 + P(1.80738, 4.98645)
        #c2 = z1 + P(-0.149852, -0.413433)
        #z2 = z1 + P(-0.865748, 0.129035)
        #c3 = z2 + P(0.199419, -0.222956)
        #c4 = z2 + P(-0.204652, 0.228807)
        #z3 = z2 + P(0.357887, 0.469533)
        #c5 = z3 + P(-0.377906, -0.0473627)
        #c6 = z3 + P(0.328983, 0.0412298)
        #z4 = z3 + P(0.736986, 0.026124)
        #c7 = z4 + P(-0.311295, 0.00419995)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30377, -119)
        z1 = z0 + PP(15.8809, -114)
        c1 = z1 + PP(5.3039, 70)
        c2 = z1 + PP(0.439753, -109)
        z2 = z1 + PP(0.875311, 171)
        c3 = z2 + PP(0.299127, -48)
        c4 = z2 + PP(0.306978, 131)
        #z3 = z2 + PP(0.590376, 52)
        z3 = z4 - PP(0.737449, ta + 3)
        c5 = z3 + PP(0.380862, -172)
        #c6 = z3 + PP(0.331556, 7)
        #z4 = z3 + PP(0.737449, 2)
        #c7 = z4 + PP(0.311323, 179)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRer(cls, ta=None, **kwargs):
        #M 170.004,317.672 C 162.458,330.741 156.04973,344.436 150.907,358.624 150.48067,359.80017 149.47214,359.62565 148.893,359.015 148.3141,358.40461 148.3392,357.88195 149.571,357.153 150.38227,356.67291 151.121,356.226 151.962,355.779

        #z0 = P(0, -0)
        #c0 = P(-2.65212, -4.59323)
        #c1 = P(-4.90437, -9.40647)
        #z1 = P(-6.71183, -14.393)
        #c2 = P(-6.86167, -14.8064)
        #c3 = P(-7.21612, -14.745)
        #z2 = P(-7.41967, -14.5304)
        #c4 = P(-7.62313, -14.3159)
        #c5 = P(-7.61431, -14.1322)
        #z3 = P(-7.18138, -13.876)
        #c6 = P(-6.89625, -13.7073)
        #c7 = P(-6.63662, -13.5502)
        z4 = P(-6.34104, -13.3931)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65212, -4.59323)
        #z1 = z0 + P(-6.71183, -14.393)
        #c1 = z1 + P(1.80746, 4.98651)
        #c2 = z1 + P(-0.149838, -0.413377)
        #z2 = z1 + P(-0.70784, -0.137421)
        #c3 = z2 + P(0.203544, -0.214619)
        #c4 = z2 + P(-0.20346, 0.214528)
        #z3 = z2 + P(0.23829, 0.654418)
        #c5 = z3 + P(-0.432928, -0.256197)
        #c6 = z3 + P(0.285129, 0.168732)
        #z4 = z3 + P(0.840341, 0.482906)
        #c7 = z4 + P(-0.295578, -0.157103)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30391, -120)
        z1 = z0 + PP(15.881, -115)
        c1 = z1 + PP(5.30398, 70)
        c2 = z1 + PP(0.439695, -109)
        z2 = z1 + PP(0.721056, -169)
        c3 = z2 + PP(0.29579, -46)
        c4 = z2 + PP(0.295666, 133)
        #z3 = z2 + PP(0.696452, 69)
        z3 = z4 - PP(0.969211, ta + 361)
        c5 = z3 + PP(0.503054, -149)
        #c6 = z3 + PP(0.331314, 30)
        #z4 = z3 + PP(0.969211, 29)
        #c7 = z4 + PP(0.334735, -152)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRel(cls, ta=None, **kwargs):
        #M 125.68,317.672 C 118.135,330.741 111.746,344.443 106.584,358.624 106.177,359.807 105.16885,359.62565 104.57,359.015 103.98098,358.41437 103.9022,355.60137 105.11004,356.30553 105.84502,356.73402 106.25014,356.89575 107.07143,357.29622

        #z0 = P(0, -0)
        #c0 = P(-2.65176, -4.59323)
        #c1 = P(-4.89724, -9.40893)
        #z1 = P(-6.71148, -14.393)
        #c2 = P(-6.85452, -14.8088)
        #c3 = P(-7.20885, -14.745)
        #z2 = P(-7.41932, -14.5304)
        #c4 = P(-7.62633, -14.3193)
        #c5 = P(-7.65402, -13.3307)
        #z3 = P(-7.22952, -13.5781)
        #c6 = P(-6.9712, -13.7287)
        #c7 = P(-6.82882, -13.7856)
        z4 = P(-6.54017, -13.9263)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65176, -4.59323)
        #z1 = z0 + P(-6.71148, -14.393)
        #c1 = z1 + P(1.81424, 4.98405)
        #c2 = z1 + P(-0.143044, -0.415777)
        #z2 = z1 + P(-0.70784, -0.137421)
        #c3 = z2 + P(0.210472, -0.214619)
        #c4 = z2 + P(-0.207017, 0.211097)
        #z3 = z2 + P(0.189802, 0.95227)
        #c5 = z3 + P(-0.424507, 0.247484)
        #c6 = z3 + P(0.258316, -0.150597)
        #z4 = z3 + P(0.68935, -0.348188)
        #c7 = z4 + P(-0.28865, 0.140749)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30374, -119)
        z1 = z0 + PP(15.8809, -114)
        c1 = z1 + PP(5.30398, 69)
        c2 = z1 + PP(0.439696, -108)
        z2 = z1 + PP(0.721056, -169)
        c3 = z2 + PP(0.300599, -45)
        c4 = z2 + PP(0.295665, 134)
        #z3 = z2 + PP(0.971001, 78)
        z3 = z4 - PP(0.772294, ta + 0)
        c5 = z3 + PP(0.49138, 149)
        #c6 = z3 + PP(0.299009, -30)
        #z4 = z3 + PP(0.772294, -26)
        #c7 = z4 + PP(0.321138, 154)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRne(cls, ta=None, **kwargs):
        #M 1950.2,18.4335 C 1942.68,31.4528 1936.32,45.1044 1931.18,59.2315 1930.77,60.411 1929.8219,60.561792 1929.2025,60.174818 1928.7994,59.922922 1928.8907,59.020354 1929.19,58.748706 1929.9079,58.097154 1931.0776,57.547057 1931.9476,57.068157

        #z0 = P(0, -0)
        #c0 = P(-2.65289, -4.59292)
        #c1 = P(-4.89656, -9.4089)
        #z1 = P(-6.70983, -14.3926)
        #c2 = P(-6.85447, -14.8087)
        #c3 = P(-7.18894, -14.8619)
        #z2 = P(-7.40745, -14.7254)
        #c4 = P(-7.54966, -14.6365)
        #c5 = P(-7.51745, -14.3181)
        #z3 = P(-7.41186, -14.2223)
        #c6 = P(-7.1586, -13.9925)
        #c7 = P(-6.74596, -13.7984)
        z4 = P(-6.43904, -13.6294)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65289, -4.59292)
        #z1 = z0 + P(-6.70983, -14.3926)
        #c1 = z1 + P(1.81328, 4.98373)
        #c2 = z1 + P(-0.144639, -0.416101)
        #z2 = z1 + P(-0.697618, -0.332782)
        #c3 = z2 + P(0.218511, -0.136516)
        #c4 = z2 + P(-0.142205, 0.0888633)
        #z3 = z2 + P(-0.00440972, 0.503101)
        #c5 = z3 + P(-0.105586, -0.0958314)
        #c6 = z3 + P(0.253259, 0.229853)
        #z4 = z3 + P(0.97282, 0.59286)
        #c7 = z4 + P(-0.306917, -0.168945)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30403, -120)
        z1 = z0 + PP(15.8798, -114)
        c1 = z1 + PP(5.30335, 70)
        c2 = z1 + PP(0.440523, -109)
        z2 = z1 + PP(0.772926, -154)
        c3 = z2 + PP(0.25765, -31)
        c4 = z2 + PP(0.167687, 147)
        #z3 = z2 + PP(0.50312, 90)
        z3 = z4 - PP(1.13924, ta + 362)
        c5 = z3 + PP(0.142591, -137)
        #c6 = z3 + PP(0.342013, 42)
        #z4 = z3 + PP(1.13924, 31)
        #c7 = z4 + PP(0.350343, -151)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRner(cls, ta=None, **kwargs):
        #M 153.833,412.472 C 146.288,425.54 139.87848,439.23591 134.737,453.423 134.31042,454.60009 133.36274,454.63345 132.92336,453.91568 132.62901,453.43483 135.0322,450.67869 136.19428,449.51713

        #z0 = P(0, -0)
        #c0 = P(-2.65176, -4.59288)
        #c1 = P(-4.90445, -9.40644)
        #z1 = P(-6.71148, -14.3926)
        #c2 = P(-6.8614, -14.8063)
        #c3 = P(-7.19448, -14.8181)
        #z2 = P(-7.3489, -14.5658)
        #c4 = P(-7.45235, -14.3968)
        #c5 = P(-6.60773, -13.4281)
        z3 = P(-6.1993, -13.0199)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65176, -4.59288)
        #z1 = z0 + P(-6.71148, -14.3926)
        #c1 = z1 + P(1.80702, 4.98619)
        #c2 = z1 + P(-0.149926, -0.4137)
        #z2 = z1 + P(-0.637422, -0.173157)
        #c3 = z2 + P(0.154424, -0.252267)
        #c4 = z2 + P(-0.103452, 0.168999)
        #z3 = z2 + P(1.1496, 1.54591)
        #c5 = z3 + P(-0.408424, -0.408242)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30343, -120)
        z1 = z0 + PP(15.8805, -115)
        c1 = z1 + PP(5.30353, 70)
        c2 = z1 + PP(0.440029, -109)
        #z2 = z1 + PP(0.660522, -164)
        z2 = z3 - PP(1.92651, ta + 368)
        c3 = z2 + PP(0.29578, -58)
        #c4 = z2 + PP(0.198149, 121)
        #z3 = z2 + PP(1.92651, 53)
        #c5 = z3 + PP(0.57747, -135)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_SWCRnel(cls, ta=None, **kwargs):
        #M 112.291,412.472 C 104.746,425.54 98.337269,439.23605 93.1951,453.423 92.768408,454.60022 91.759712,454.42506 91.1805,453.815 90.601368,453.20502 90.294979,452.04149 91.019404,452.02012 91.781008,451.99765 92.89192,451.78061 93.900819,451.50041

        #z0 = P(0, -0)
        #c0 = P(-2.65176, -4.59288)
        #c1 = P(-4.90418, -9.40649)
        #z1 = P(-6.71144, -14.3926)
        #c2 = P(-6.86141, -14.8064)
        #c3 = P(-7.21592, -14.7448)
        #z2 = P(-7.41949, -14.5304)
        #c4 = P(-7.62304, -14.316)
        #c5 = P(-7.73072, -13.9071)
        #z3 = P(-7.47611, -13.8996)
        #c6 = P(-7.20844, -13.8917)
        #c7 = P(-6.818, -13.8154)
        z4 = P(-6.46341, -13.7169)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65176, -4.59288)
        #z1 = z0 + P(-6.71144, -14.3926)
        #c1 = z1 + P(1.80727, 4.98614)
        #c2 = z1 + P(-0.149965, -0.413746)
        #z2 = z1 + P(-0.708051, -0.137772)
        #c3 = z2 + P(0.20357, -0.214412)
        #c4 = z2 + P(-0.203542, 0.214383)
        #z3 = z2 + P(-0.0566188, 0.630828)
        #c5 = z3 + P(-0.254606, -0.0075107)
        #c6 = z3 + P(0.267673, 0.0078973)
        #z4 = z3 + P(1.0127, 0.182657)
        #c7 = z4 + P(-0.354588, -0.0984791)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30343, -120)
        z1 = z0 + PP(15.8805, -115)
        c1 = z1 + PP(5.30357, 70)
        c2 = z1 + PP(0.440085, -109)
        z2 = z1 + PP(0.72133, -168)
        c3 = z2 + PP(0.295657, -46)
        c4 = z2 + PP(0.295617, 133)
        #z3 = z2 + PP(0.633364, 95)
        z3 = z4 - PP(1.02904, ta + 354)
        c5 = z3 + PP(0.254717, -178)
        #c6 = z3 + PP(0.26779, 1)
        #z4 = z3 + PP(1.02904, 10)
        #c7 = z4 + PP(0.368009, -164)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRs(cls, ta=None, **kwargs):
        #M 70.0186,492.695 C 62.4734,505.763 56.0838,519.466 50.9225,533.646 50.515,534.83 49.487112,534.64806 48.9079,534.038 48.328768,533.42802 49.019945,531.24185 50.421393,530.95176 51.427642,530.74348 51.011821,532.93007 50.9225,533.646

        #z0 = P(0, -0)
        #c0 = P(-2.65184, -4.59288)
        #c1 = P(-4.89752, -9.40893)
        #z1 = P(-6.71151, -14.3926)
        #c2 = P(-6.85473, -14.8088)
        #c3 = P(-7.21599, -14.7448)
        #z2 = P(-7.41956, -14.5304)
        #c4 = P(-7.62311, -14.316)
        #c5 = P(-7.38018, -13.5477)
        #z3 = P(-6.88763, -13.4457)
        #c6 = P(-6.53398, -13.3725)
        #c7 = P(-6.68012, -14.141)
        z4 = P(-6.71151, -14.3926)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65184, -4.59288)
        #z1 = z0 + P(-6.71151, -14.3926)
        #c1 = z1 + P(1.81399, 4.9837)
        #c2 = z1 + P(-0.14322, -0.416128)
        #z2 = z1 + P(-0.708051, -0.137772)
        #c3 = z2 + P(0.20357, -0.214412)
        #c4 = z2 + P(-0.203542, 0.214383)
        #z3 = z2 + P(0.531932, 1.08469)
        #c5 = z3 + P(-0.492553, -0.101955)
        #c6 = z3 + P(0.353656, 0.0732021)
        #z4 = z3 + P(0.176119, -0.946917)
        #c7 = z4 + P(0.0313927, 0.251621)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30347, -120)
        z1 = z0 + PP(15.8806, -115)
        c1 = z1 + PP(5.30357, 69)
        c2 = z1 + PP(0.440085, -108)
        z2 = z1 + PP(0.72133, -168)
        c3 = z2 + PP(0.295657, -46)
        c4 = z2 + PP(0.295617, 133)
        #z3 = z2 + PP(1.2081, 63)
        z3 = z4 - PP(0.963156, ta + 19)
        c5 = z3 + PP(0.502994, -168)
        #c6 = z3 + PP(0.361153, 11)
        #z4 = z3 + PP(0.963156, -79)
        #c7 = z4 + PP(0.253571, 82)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRsl(cls, ta=None, **kwargs):
        #M 117.176,492.695 C 109.631,505.763 103.242,519.466 98.0804,533.646 97.6728,534.83 96.095144,534.99709 95.754782,534.038 95.478859,533.26049 95.838319,532.40268 97.054518,531.80678 98.716252,530.99258 98.599568,532.44225 98.0804,533.646

        #z0 = P(0, -0)
        #c0 = P(-2.65176, -4.59288)
        #c1 = P(-4.89724, -9.40893)
        #z1 = P(-6.71134, -14.3926)
        #c2 = P(-6.85459, -14.8088)
        #c3 = P(-7.40908, -14.8675)
        #z2 = P(-7.5287, -14.5304)
        #c4 = P(-7.62567, -14.2571)
        #c5 = P(-7.49934, -13.9557)
        #z3 = P(-7.07189, -13.7462)
        #c6 = P(-6.48786, -13.4601)
        #c7 = P(-6.52887, -13.9696)
        z4 = P(-6.71134, -14.3926)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65176, -4.59288)
        #z1 = z0 + P(-6.71134, -14.3926)
        #c1 = z1 + P(1.8141, 4.9837)
        #c2 = z1 + P(-0.143255, -0.416128)
        #z2 = z1 + P(-0.817361, -0.137772)
        #c3 = z2 + P(0.119624, -0.337082)
        #c4 = z2 + P(-0.0969759, 0.273264)
        #z3 = z2 + P(0.456805, 0.784184)
        #c5 = z3 + P(-0.427445, -0.209435)
        #c6 = z3 + P(0.584033, 0.286159)
        #z4 = z3 + P(0.360556, -0.646412)
        #c7 = z4 + P(0.182467, 0.42307)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30343, -120)
        z1 = z0 + PP(15.8805, -114)
        c1 = z1 + PP(5.3036, 69)
        c2 = z1 + PP(0.440097, -108)
        z2 = z1 + PP(0.828891, -170)
        c3 = z2 + PP(0.357678, -70)
        c4 = z2 + PP(0.289961, 109)
        #z3 = z2 + PP(0.907533, 59)
        z3 = z4 - PP(0.740168, ta + 54)
        c5 = z3 + PP(0.475996, -153)
        #c6 = z3 + PP(0.65037, 26)
        #z4 = z3 + PP(0.740168, -60)
        #c7 = z4 + PP(0.460741, 66)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRsr(cls, ta=None, **kwargs):
        #M 164.334,492.695 C 156.789,505.763 150.37948,519.45891 145.238,533.646 144.81142,534.82309 143.74343,534.63193 143.224,534.038 141.95809,532.59053 142.92199,531.60295 143.93986,531.53473 144.82631,531.47531 145.26894,531.90428 145.61536,532.47348

        #z0 = P(0, -0)
        #c0 = P(-2.65176, -4.59288)
        #c1 = P(-4.90445, -9.40644)
        #z1 = P(-6.71148, -14.3926)
        #c2 = P(-6.8614, -14.8063)
        #c3 = P(-7.23676, -14.7391)
        #z2 = P(-7.41932, -14.5304)
        #c4 = P(-7.86423, -14.0217)
        #c5 = P(-7.52546, -13.6746)
        #z3 = P(-7.16772, -13.6506)
        #c6 = P(-6.85617, -13.6297)
        #c7 = P(-6.7006, -13.7805)
        z4 = P(-6.57885, -13.9805)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65176, -4.59288)
        #z1 = z0 + P(-6.71148, -14.3926)
        #c1 = z1 + P(1.80702, 4.98619)
        #c2 = z1 + P(-0.149926, -0.4137)
        #z2 = z1 + P(-0.70784, -0.137772)
        #c3 = z2 + P(0.182559, -0.208743)
        #c4 = z2 + P(-0.444917, 0.508728)
        #z3 = z2 + P(0.251596, 0.879799)
        #c5 = z3 + P(-0.35774, -0.0239766)
        #c6 = z3 + P(0.311552, 0.0208837)
        #z4 = z3 + P(0.588871, -0.329933)
        #c7 = z4 + P(-0.121753, 0.200051)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30343, -120)
        z1 = z0 + PP(15.8805, -115)
        c1 = z1 + PP(5.30353, 70)
        c2 = z1 + PP(0.440029, -109)
        z2 = z1 + PP(0.721123, -168)
        c3 = z2 + PP(0.277311, -48)
        c4 = z2 + PP(0.675836, 131)
        #z3 = z2 + PP(0.915067, 74)
        z3 = z4 - PP(0.675, ta + 30)
        c5 = z3 + PP(0.358543, -176)
        #c6 = z3 + PP(0.312251, 3)
        #z4 = z3 + PP(0.675, -29)
        #c7 = z4 + PP(0.234188, 121)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRse(cls, ta=None, **kwargs):
        #M 70.0186,610.172 C 62.4734,623.24 56.064669,636.93605 50.9225,651.123 50.495808,652.30022 49.502894,651.90071 49.194618,651.11801 48.901951,650.37492 49.175787,648.80361 49.872518,648.6154 50.782762,648.36952 50.952173,649.26636 51.388724,649.85244

        #z0 = P(0, -0)
        #c0 = P(-2.65184, -4.59288)
        #c1 = P(-4.90425, -9.40649)
        #z1 = P(-6.71151, -14.3926)
        #c2 = P(-6.86148, -14.8064)
        #c3 = P(-7.21045, -14.666)
        #z2 = P(-7.31879, -14.3909)
        #c4 = P(-7.42165, -14.1297)
        #c5 = P(-7.32541, -13.5775)
        #z3 = P(-7.08054, -13.5113)
        #c6 = P(-6.76063, -13.4249)
        #c7 = P(-6.70108, -13.7401)
        z4 = P(-6.54765, -13.9461)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65184, -4.59288)
        #z1 = z0 + P(-6.71151, -14.3926)
        #c1 = z1 + P(1.80727, 4.98614)
        #c2 = z1 + P(-0.149965, -0.413746)
        #z2 = z1 + P(-0.607281, 0.00175378)
        #c3 = z2 + P(0.108347, -0.275088)
        #c4 = z2 + P(-0.102861, 0.261166)
        #z3 = z2 + P(0.238255, 0.879567)
        #c5 = z3 + P(-0.244873, -0.0661483)
        #c6 = z3 + P(0.319914, 0.086417)
        #z4 = z3 + P(0.532886, -0.43477)
        #c7 = z4 + P(-0.15343, 0.205984)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30347, -120)
        z1 = z0 + PP(15.8806, -115)
        c1 = z1 + PP(5.30357, 70)
        c2 = z1 + PP(0.440085, -109)
        z2 = z1 + PP(0.607284, 179)
        c3 = z2 + PP(0.295656, -68)
        c4 = z2 + PP(0.280692, 111)
        #z3 = z2 + PP(0.911265, 74)
        z3 = z4 - PP(0.687744, ta + 15)
        c5 = z3 + PP(0.25365, -164)
        #c6 = z3 + PP(0.33138, 15)
        #z4 = z3 + PP(0.687744, -39)
        #c7 = z4 + PP(0.256846, 126)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRser(cls, ta=None, **kwargs):
        #M 108.672,610.172 C 101.127,623.24 94.718475,636.93605 89.5764,651.123 89.149714,652.30022 87.906241,651.71775 87.477742,650.99384 87.066472,650.29903 86.860577,649.00462 87.936991,648.57606 88.617589,648.30508 89.733049,648.47688 90.389221,648.9209

        #z0 = P(0, -0)
        #c0 = P(-2.65176, -4.59288)
        #c1 = P(-4.9041, -9.40649)
        #z1 = P(-6.71134, -14.3926)
        #c2 = P(-6.8613, -14.8064)
        #c3 = P(-7.29833, -14.6017)
        #z2 = P(-7.44893, -14.3472)
        #c4 = P(-7.59348, -14.103)
        #c5 = P(-7.66584, -13.6481)
        #z3 = P(-7.28752, -13.4975)
        #c6 = P(-7.04832, -13.4022)
        #c7 = P(-6.65628, -13.4626)
        z4 = P(-6.42566, -13.6187)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65176, -4.59288)
        #z1 = z0 + P(-6.71134, -14.3926)
        #c1 = z1 + P(1.80723, 4.98614)
        #c2 = z1 + P(-0.149963, -0.413746)
        #z2 = z1 + P(-0.737594, 0.0453946)
        #c3 = z2 + P(0.1506, -0.254425)
        #c4 = z2 + P(-0.144545, 0.244198)
        #z3 = z2 + P(0.161408, 0.849753)
        #c5 = z3 + P(-0.378316, -0.150622)
        #c6 = z3 + P(0.239203, 0.0952386)
        #z4 = z3 + P(0.86186, -0.121197)
        #c7 = z4 + P(-0.230618, 0.156055)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30343, -120)
        z1 = z0 + PP(15.8805, -114)
        c1 = z1 + PP(5.30356, 70)
        c2 = z1 + PP(0.440084, -109)
        z2 = z1 + PP(0.73899, 176)
        c3 = z2 + PP(0.295656, -59)
        c4 = z2 + PP(0.283771, 120)
        #z3 = z2 + PP(0.864946, 79)
        z3 = z4 - PP(0.87034, ta + 27)
        c5 = z3 + PP(0.407198, -158)
        #c6 = z3 + PP(0.257465, 21)
        #z4 = z3 + PP(0.87034, -8)
        #c7 = z4 + PP(0.278456, 145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRsel(cls, ta=None, **kwargs):
        #M 152.996,610.172 C 145.45,623.24 139.061,636.943 133.9,651.123 133.492,652.307 132.32601,652.23095 131.885,651.515 131.4569,650.82002 132.98974,647.75155 133.94156,647.81953 134.69358,647.87324 133.91093,648.9515 133.99384,649.78218

        #z0 = P(0, -0)
        #c0 = P(-2.65212, -4.59288)
        #c1 = P(-4.89759, -9.40893)
        #z1 = P(-6.71148, -14.3926)
        #c2 = P(-6.85487, -14.8088)
        #c3 = P(-7.26467, -14.782)
        #z2 = P(-7.41967, -14.5304)
        #c4 = P(-7.57013, -14.2861)
        #c5 = P(-7.0314, -13.2077)
        #z3 = P(-6.69687, -13.2316)
        #c6 = P(-6.43257, -13.2505)
        #c7 = P(-6.70764, -13.6294)
        z4 = P(-6.6785, -13.9214)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65212, -4.59288)
        #z1 = z0 + P(-6.71148, -14.3926)
        #c1 = z1 + P(1.81388, 4.9837)
        #c2 = z1 + P(-0.143396, -0.416128)
        #z2 = z1 + P(-0.708192, -0.137772)
        #c3 = z2 + P(0.154997, -0.251628)
        #c4 = z2 + P(-0.15046, 0.244258)
        #z3 = z2 + P(0.722798, 1.29881)
        #c5 = z3 + P(-0.334527, 0.0238922)
        #c6 = z3 + P(0.264305, -0.0188769)
        #z4 = z3 + P(0.0183743, -0.689793)
        #c7 = z4 + P(-0.0291395, 0.291951)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30361, -120)
        z1 = z0 + PP(15.8805, -115)
        c1 = z1 + PP(5.30353, 70)
        c2 = z1 + PP(0.440142, -109)
        z2 = z1 + PP(0.721468, -168)
        c3 = z2 + PP(0.295535, -58)
        c4 = z2 + PP(0.28688, 121)
        #z3 = z2 + PP(1.48639, 60)
        z3 = z4 - PP(0.690037, ta + -3)
        c5 = z3 + PP(0.335379, 175)
        #c6 = z3 + PP(0.264978, -4)
        #z4 = z3 + PP(0.690037, -88)
        #c7 = z4 + PP(0.293401, 95)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRsw(cls, ta=None, **kwargs):
        #M 70.0186,721.922 C 62.4734,734.99 56.0838,748.693 50.9225,762.873 50.515,764.057 48.868267,764.23796 48.552026,763.265 48.312648,762.52852 48.443116,761.77702 50.056497,760.8972 51.119985,760.31724 51.316362,761.7983 50.9225,762.873

        #z0 = P(0, -0)
        #c0 = P(-2.65184, -4.59288)
        #c1 = P(-4.89752, -9.40893)
        #z1 = P(-6.71151, -14.3926)
        #c2 = P(-6.85473, -14.8088)
        #c3 = P(-7.43349, -14.8724)
        #z2 = P(-7.54464, -14.5304)
        #c4 = P(-7.62877, -14.2716)
        #c5 = P(-7.58292, -14.0074)
        #z3 = P(-7.01588, -13.6982)
        #c6 = P(-6.6421, -13.4944)
        #c7 = P(-6.57309, -14.0149)
        z4 = P(-6.71151, -14.3926)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65184, -4.59288)
        #z1 = z0 + P(-6.71151, -14.3926)
        #c1 = z1 + P(1.81399, 4.9837)
        #c2 = z1 + P(-0.14322, -0.416128)
        #z2 = z1 + P(-0.833126, -0.137772)
        #c3 = z2 + P(0.111146, -0.341956)
        #c4 = z2 + P(-0.0841318, 0.258843)
        #z3 = z2 + P(0.528761, 0.832187)
        #c5 = z3 + P(-0.567039, -0.309221)
        #c6 = z3 + P(0.373773, 0.203833)
        #z4 = z3 + P(0.304365, -0.694414)
        #c7 = z4 + P(0.138427, 0.377714)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30347, -120)
        z1 = z0 + PP(15.8806, -115)
        c1 = z1 + PP(5.30357, 69)
        c2 = z1 + PP(0.440085, -108)
        z2 = z1 + PP(0.844441, -170)
        c3 = z2 + PP(0.359566, -71)
        c4 = z2 + PP(0.272173, 108)
        #z3 = z2 + PP(0.985963, 57)
        z3 = z4 - PP(0.758188, ta + 45)
        c5 = z3 + PP(0.645872, -151)
        #c6 = z3 + PP(0.42574, 28)
        #z4 = z3 + PP(0.758188, -66)
        #c7 = z4 + PP(0.402281, 69)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRswr(cls, ta=None, **kwargs):
        #M 113.298,721.922 C 105.753,734.99 99.344375,748.68605 94.2023,762.873 93.775614,764.05022 92.416224,764.07459 92.1877,763.265 91.944419,762.40313 92.623851,759.48131 94.024288,759.18638 94.869714,759.00833 95.103896,759.3509 95.2565,760.029

        #z0 = P(0, -0)
        #c0 = P(-2.65176, -4.59288)
        #c1 = P(-4.90414, -9.40649)
        #z1 = P(-6.71137, -14.3926)
        #c2 = P(-6.86134, -14.8064)
        #c3 = P(-7.33911, -14.8149)
        #z2 = P(-7.41942, -14.5304)
        #c4 = P(-7.50493, -14.2275)
        #c5 = P(-7.26613, -13.2006)
        #z3 = P(-6.77394, -13.0969)
        #c6 = P(-6.4768, -13.0344)
        #c7 = P(-6.3945, -13.1548)
        z4 = P(-6.34086, -13.3931)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65176, -4.59288)
        #z1 = z0 + P(-6.71137, -14.3926)
        #c1 = z1 + P(1.80723, 4.98614)
        #c2 = z1 + P(-0.149963, -0.413746)
        #z2 = z1 + P(-0.708051, -0.137772)
        #c3 = z2 + P(0.080317, -0.284538)
        #c4 = z2 + P(-0.0855035, 0.302913)
        #z3 = z2 + P(0.645487, 1.43347)
        #c5 = z3 + P(-0.492197, -0.103656)
        #c6 = z3 + P(0.297133, 0.0625774)
        #z4 = z3 + P(0.433073, -0.296147)
        #c7 = z4 + P(-0.0536342, 0.238325)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30343, -120)
        z1 = z0 + PP(15.8805, -114)
        c1 = z1 + PP(5.30356, 70)
        c2 = z1 + PP(0.440084, -109)
        z2 = z1 + PP(0.72133, -168)
        c3 = z2 + PP(0.295657, -74)
        c4 = z2 + PP(0.314749, 105)
        #z3 = z2 + PP(1.5721, 65)
        z3 = z4 - PP(0.524648, ta + 44)
        c5 = z3 + PP(0.502994, -168)
        #c6 = z3 + PP(0.303651, 11)
        #z4 = z3 + PP(0.524648, -34)
        #c7 = z4 + PP(0.244285, 102)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SWCRswl(cls, ta=None, **kwargs):
        #M 150.555,721.922 C 143.01,734.99 136.60141,748.68589 131.459,762.873 131.03235,764.05006 129.89272,763.92721 129.2267,763.265 128.56038,762.6025 129.27935,761.01294 130.89546,760.7145 132.47827,760.42222 131.64135,762.29565 131.13994,762.83941

        #z0 = P(0, -0)
        #c0 = P(-2.65176, -4.59288)
        #c1 = P(-4.90413, -9.40643)
        #z1 = P(-6.71148, -14.3926)
        #c2 = P(-6.86143, -14.8063)
        #c3 = P(-7.26196, -14.7631)
        #z2 = P(-7.49604, -14.5304)
        #c4 = P(-7.73023, -14.2976)
        #c5 = P(-7.47754, -13.7389)
        #z3 = P(-6.90954, -13.634)
        #c6 = P(-6.35325, -13.5313)
        #c7 = P(-6.64739, -14.1897)
        z4 = P(-6.82361, -14.3808)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65176, -4.59288)
        #z1 = z0 + P(-6.71148, -14.3926)
        #c1 = z1 + P(1.80735, 4.9862)
        #c2 = z1 + P(-0.14995, -0.413689)
        #z2 = z1 + P(-0.784564, -0.137772)
        #c3 = z2 + P(0.234079, -0.23274)
        #c4 = z2 + P(-0.234185, 0.232842)
        #z3 = z2 + P(0.586502, 0.896398)
        #c5 = z3 + P(-0.567998, -0.10489)
        #c6 = z3 + P(0.556294, 0.102725)
        #z4 = z3 + P(0.0859249, -0.746821)
        #c7 = z4 + P(0.176225, 0.19111)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30343, -120)
        z1 = z0 + PP(15.8805, -115)
        c1 = z1 + PP(5.30365, 70)
        c2 = z1 + PP(0.440027, -109)
        z2 = z1 + PP(0.796569, -170)
        c3 = z2 + PP(0.330093, -44)
        c4 = z2 + PP(0.330239, 135)
        #z3 = z2 + PP(1.07122, 56)
        z3 = z4 - PP(0.751747, ta + 50)
        c5 = z3 + PP(0.577601, -169)
        #c6 = z3 + PP(0.565699, 10)
        #z4 = z3 + PP(0.751747, -83)
        #c7 = z4 + PP(0.259958, 47)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NECLNE(cls, ta=None, **kwargs):
        #M 47.3414,78.1773 C 56.4011,67.3805 67.0445,58.1263 77.1833,48.3355 78.3605,47.2755 78.687222,46.383548 78.052922,45.653848 77.627722,45.147148 76.87327,45.063288 76.360818,45.323404 75.319842,45.851793 74.063339,47.653925 74.873736,48.494212 75.654584,49.30386 76.8021,48.1603 77.9788,47.1729 78.9488,46.3875 79.8541,45.7242 81.0277,44.704

        #z0 = P(0, -0)
        #c0 = P(3.19606, 3.80887)
        #c1 = P(6.95082, 7.07355)
        #z1 = P(10.5276, 10.5275)
        #c2 = P(10.9428, 10.9015)
        #c3 = P(11.0581, 11.2161)
        #z2 = P(10.8343, 11.4736)
        #c4 = P(10.6843, 11.6523)
        #c5 = P(10.4182, 11.6819)
        #z3 = P(10.2374, 11.5901)
        #c6 = P(9.87017, 11.4037)
        #c7 = P(9.42691, 10.768)
        #z4 = P(9.7128, 10.4715)
        #c8 = P(9.98826, 10.1859)
        #c9 = P(10.3931, 10.5893)
        #z5 = P(10.8082, 10.9377)
        #c10 = P(11.1504, 11.2147)
        #c11 = P(11.4698, 11.4487)
        z6 = P(11.8838, 11.8086)

        #z0 = P(0, -0)
        #c0 = z0 + P(3.19606, 3.80887)
        #z1 = z0 + P(10.5276, 10.5275)
        #c1 = z1 + P(-3.57674, -3.45398)
        #c2 = z1 + P(0.41529, 0.373944)
        #z2 = z1 + P(0.306783, 0.946027)
        #c3 = z2 + P(0.223767, -0.257422)
        #c4 = z2 + P(-0.150001, 0.178752)
        #z3 = z2 + P(-0.596937, 0.116573)
        #c5 = z3 + P(0.180782, 0.0917631)
        #c6 = z3 + P(-0.367233, -0.186404)
        #z4 = z3 + P(-0.524609, -1.11859)
        #c7 = z4 + P(-0.28589, 0.296435)
        #c8 = z4 + P(0.275466, -0.285626)
        #z5 = z4 + P(1.0954, 0.46613)
        #c9 = z5 + P(-0.415114, -0.348333)
        #c10 = z5 + P(0.342194, 0.277072)
        #z6 = z5 + P(1.07558, 0.870973)
        #c11 = z6 + P(-0.41402, -0.359904)

        z0 = P(0, -0)
        c0 = z0 + PP(4.97215, 49)
        z1 = z0 + PP(14.8882, 44)
        c1 = z1 + PP(4.97223, -136)
        c2 = z1 + PP(0.558838, 42)
        z2 = z1 + PP(0.994527, 72)
        c3 = z2 + PP(0.341083, -49)
        c4 = z2 + PP(0.233351, 130)
        z3 = z2 + PP(0.608213, 168)
        c5 = z3 + PP(0.202737, 26)
        c6 = z3 + PP(0.411833, -153)
        z4 = z3 + PP(1.2355, -115)
        c7 = z4 + PP(0.411833, 133)
        c8 = z4 + PP(0.396817, -46)
        z5 = z4 + PP(1.19045, 23)
        #z5 = z6 - PP(1.38401, ta + 356)
        c9 = z5 + PP(0.541899, -139)
        c10 = z5 + PP(0.440302, 38)
        z6 = z5 + PP(1.38401, 38)
        c11 = z6 + PP(0.548583, -138)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            #curve(),
            endknot(*z6)])

    @classmethod
    def path_SWCRNE(cls, ta=None, **kwargs):
        #M 70.0186,217.643 C 62.5019,230.662 56.1359,244.314 50.9941,258.441 50.5879,259.621 49.234565,259.66893 48.994,258.866 48.734928,258.0013 50.873662,256.24756 52.0441,255.607 52.93378,255.1201 53.963214,254.49704 55.23806,253.69561

        #z0 = P(0, -0)
        #c0 = P(-2.65172, -4.59281)
        #c1 = P(-4.89751, -9.40894)
        #z1 = P(-6.71142, -14.3926)
        #c2 = P(-6.85472, -14.8089)
        #c3 = P(-7.33215, -14.8258)
        #z2 = P(-7.41701, -14.5426)
        #c4 = P(-7.50841, -14.2375)
        #c5 = P(-6.75391, -13.6188)
        #z3 = P(-6.341, -13.3929)
        #c6 = P(-6.02714, -13.2211)
        #c7 = P(-5.66398, -13.0013)
        z4 = P(-5.21425, -12.7186)

        #z0 = P(0, -0)
        #c0 = z0 + P(-2.65172, -4.59281)
        #z1 = z0 + P(-6.71142, -14.3926)
        #c1 = z1 + P(1.81391, 4.98369)
        #c2 = z1 + P(-0.143298, -0.416278)
        #z2 = z1 + P(-0.705591, -0.149931)
        #c3 = z2 + P(0.084866, -0.283256)
        #c4 = z2 + P(-0.0913948, 0.305047)
        #z3 = z2 + P(1.07601, 1.1497)
        #c5 = z3 + P(-0.412905, -0.225975)
        #c6 = z3 + P(0.313859, 0.171767)
        #z4 = z3 + P(1.12676, 0.674296)
        #c7 = z4 + P(-0.449737, -0.282727)

        z0 = P(0, -0)
        c0 = z0 + PP(5.30336, -120)
        z1 = z0 + PP(15.8805, -115)
        c1 = z1 + PP(5.30353, 70)
        c2 = z1 + PP(0.440252, -108)
        z2 = z1 + PP(0.721344, -168)
        c3 = z2 + PP(0.295696, -73)
        c4 = z2 + PP(0.318444, 106)
        z3 = z2 + PP(1.57468, 46)
        #z3 = z4 - PP(1.31311, ta + 357)
        c5 = z3 + PP(0.470696, -151)
        c6 = z3 + PP(0.357787, 28)
        z4 = z3 + PP(1.31311, 30)
        c7 = z4 + PP(0.531223, -147)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

            
    def get_paths(self):
        if self.to_reverse():
            self.offset_from_centerline = 5
            if self.tail_type.endswith('F'):
                self.head_type = 'SW'
                self.tail_type = 'NEF'
                self.model = 'SW16CR1NE1F'
                return [self.path_SWCRNE()]

            self.head_type = 'SW'
            self.tail_type = 'SWCR1'
            self.model = 'SW16CR1'
        else:
            self.offset_from_centerline = -5
            if self.tail_type.endswith('F'):
                self.head_type = 'NE'
                self.tail_type = 'NEF'
                self.model = 'NE16CL1NE1F'
                return [self.path_NECLNE()]

            self.head_type = 'NE'
            self.tail_type = 'NECL1'
            self.model = 'NE16CL1'

        return super().get_paths()

class CharTen(CharTe):
    def __init__(self, name='ten', kana='„Å¶„Çì',
                 model='NE16CL1NE1F|SW16CR1NE1F', head_type='NE|SW',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharTeku(CharTe):
    def __init__(self, name='teku', kana='„Å¶„Åè',
                 model='BNE16CL1|BSW16CR1', head_type='BNE|BSW',
                 tail_type='NECL1|SWCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        if getattr(self.before, 'tail_type', '') in self.barbs:
            return self.barb(super().get_paths())
        else:
            return super().get_paths()

    def set_next_head(self):
        if self.before and self.before.tail_type not in self.barbs:
            self.head = self.before.tail - self.get_pos_xku()

        super().set_next_head()
