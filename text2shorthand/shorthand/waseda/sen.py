from ..waseda.char import WasedaChar
from ..waseda.se import CharSe
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharSen(CharSe):
    def __init__(self, name='sen', kana='せん',
                 model='NEL16CL1NE1F|SWR16CR1NE1F', head_type='NEL|SWR',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        if self.to_reverse():
            self.model = 'SWR16CR1NE1F'
            self.head_type = 'SWR'
            self.tail_type = 'NEF'
            self.head_ligature = {'ER', 'NER'}
            self.tail_ligature = {}
        else:
            self.model = 'NEL16CL1NE1F'
            self.head_type = 'NEL'
            self.tail_type = 'NEF'
            self.head_ligature = {'SEL', 'SL', 'SWL'}
            self.tail_ligature = {}

        return super(WasedaChar, self).get_paths()

    @classmethod
    def path_NELCLNEF(cls, ta=None, **kwargs):
        #M 332.847,89.3562 C 341.32,84.2653 365.653,70.9615 365.653,61.8293 365.653,60.3511 364.38594,60.300424 363.5643,60.4478 362.47814,60.642626 361.30411,62.5446 361.61001,63.119904 362.22621,64.278794 364.36527,62.627304 365.653,61.8293 367.00954,60.988659 368.09287,60.428362 369.14916,59.693917

        #z0 = P(0, -0)
        #c0 = P(2.98909, 1.79596)
        #c1 = P(11.5732, 6.48924)
        #z1 = P(11.5732, 9.71088)
        #c2 = P(11.5732, 10.2324)
        #c3 = P(11.1262, 10.2502)
        #z2 = P(10.8364, 10.1982)
        #c4 = P(10.4532, 10.1295)
        #c5 = P(10.039, 9.45854)
        #z3 = P(10.147, 9.25558)
        #c6 = P(10.3643, 8.84675)
        #c7 = P(11.1189, 9.42936)
        #z4 = P(11.5732, 9.71088)
        #c8 = P(12.0518, 10.0074)
        #c9 = P(12.434, 10.2051)
        #z5 = P(12.8066, 10.4642)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.98909, 1.79596)
        #z1 = z0 + P(11.5732, 9.71088)
        #c1 = z1 + P(0, -3.22164)
        #c2 = z1 + P(0, 0.521476)
        #z2 = z1 + P(-0.736847, 0.487363)
        #c3 = z2 + P(0.289856, 0.051991)
        #c4 = z2 + P(-0.383173, -0.0687303)
        #z3 = z2 + P(-0.68943, -0.942659)
        #c5 = z3 + P(-0.107915, 0.202954)
        #c6 = z3 + P(0.217382, -0.408831)
        #z4 = z3 + P(1.42628, 0.455296)
        #c7 = z4 + P(-0.454283, -0.281518)
        #c8 = z4 + P(0.478557, 0.296559)
        #z5 = z4 + P(1.23337, 0.753316)
        #c9 = z5 + P(-0.372636, -0.259096)

        z0 = P(0, -0)
        c0 = z0 + PP(3.48713, 30)
        z1 = z0 + PP(15.1076, 39)
        c1 = z1 + PP(3.22164, -90)
        c2 = z1 + PP(0.521476, 90)
        z2 = z1 + PP(0.88344, 146)
        c3 = z2 + PP(0.294482, 10)
        c4 = z2 + PP(0.389288, -169)
        z3 = z2 + PP(1.16787, -126)
        c5 = z3 + PP(0.229861, 118)
        c6 = z3 + PP(0.463031, -61)
        z4 = z3 + PP(1.49718, 17)
        #z4 = z5 - PP(1.44523, ta + 356)
        c7 = z4 + PP(0.534439, -148)
        c8 = z4 + PP(0.562996, 31)
        z5 = z4 + PP(1.44523, 31)
        c9 = z5 + PP(0.453859, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_selNELCLNEF(cls, ta=None, **kwargs):
        #M 369.356,147.216 C 376.97839,147.216 402.162,128.8213 402.162,119.6891 402.162,118.2109 400.89494,118.16023 400.0733,118.3076 398.98714,118.50243 397.81311,120.4044 398.11901,120.97971 398.73521,122.1386 400.87427,120.48711 402.162,119.6891 403.51854,118.84846 404.60187,118.28816 405.65816,117.55372

        #z0 = P(0, -0)
        #c0 = P(2.68901, -0)
        #c1 = P(11.5732, 6.48924)
        #z1 = P(11.5732, 9.71088)
        #c2 = P(11.5732, 10.2324)
        #c3 = P(11.1262, 10.2502)
        #z2 = P(10.8364, 10.1982)
        #c4 = P(10.4532, 10.1295)
        #c5 = P(10.039, 9.45854)
        #z3 = P(10.147, 9.25558)
        #c6 = P(10.3643, 8.84675)
        #c7 = P(11.1189, 9.42936)
        #z4 = P(11.5732, 9.71088)
        #c8 = P(12.0518, 10.0074)
        #c9 = P(12.434, 10.2051)
        #z5 = P(12.8066, 10.4642)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.68901, 0)
        #z1 = z0 + P(11.5732, 9.71088)
        #c1 = z1 + P(0, -3.22164)
        #c2 = z1 + P(0, 0.521476)
        #z2 = z1 + P(-0.736847, 0.487363)
        #c3 = z2 + P(0.289856, 0.0519889)
        #c4 = z2 + P(-0.383173, -0.0687317)
        #z3 = z2 + P(-0.68943, -0.942661)
        #c5 = z3 + P(-0.107915, 0.202957)
        #c6 = z3 + P(0.217382, -0.408831)
        #z4 = z3 + P(1.42628, 0.455299)
        #c7 = z4 + P(-0.454283, -0.28152)
        #c8 = z4 + P(0.478557, 0.296559)
        #z5 = z4 + P(1.23337, 0.753315)
        #c9 = z5 + P(-0.372636, -0.259094)

        z0 = P(0, -0)
        c0 = z0 + PP(2.68901, 0)
        z1 = z0 + PP(15.1076, 39)
        c1 = z1 + PP(3.22164, -90)
        c2 = z1 + PP(0.521476, 90)
        z2 = z1 + PP(0.88344, 146)
        c3 = z2 + PP(0.294482, 10)
        c4 = z2 + PP(0.389289, -169)
        z3 = z2 + PP(1.16787, -126)
        c5 = z3 + PP(0.229863, 118)
        c6 = z3 + PP(0.463031, -61)
        z4 = z3 + PP(1.49718, 17)
        #z4 = z5 - PP(1.44523, ta + 356)
        c7 = z4 + PP(0.53444, -148)
        c8 = z4 + PP(0.562996, 31)
        z5 = z4 + PP(1.44523, 31)
        c9 = z5 + PP(0.453858, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_SWRCRNEF(cls, ta=None, **kwargs):
        #M 354.182,237.273 C 354.182,249.185 342.695,276.645 332.358,276.645 329.812,276.645 334.41234,274.40912 335.683,273.659 337.63898,272.50431 339.9458,271.40226 341.6496,270.36777 343.16741,269.44622 344.46726,268.84261 345.96063,267.98507

        #z0 = P(0, -0)
        #c0 = P(0, -4.20229)
        #c1 = P(-4.05236, -13.8896)
        #z1 = P(-7.69902, -13.8896)
        #c2 = P(-8.59719, -13.8896)
        #c3 = P(-6.9743, -13.1008)
        #z2 = P(-6.52604, -12.8362)
        #c4 = P(-5.83601, -12.4288)
        #c5 = P(-5.02221, -12.04)
        #z3 = P(-4.42115, -11.6751)
        #c6 = P(-3.8857, -11.35)
        #c7 = P(-3.42714, -11.1371)
        #z4 = P(-2.90032, -10.8345)

        #z0 = P(0, -0)
        #c0 = z0 + P(0, -4.20229)
        #z1 = z0 + P(-7.69902, -13.8896)
        #c1 = z1 + P(3.64666, 0)
        #c2 = z1 + P(-0.898172, 0)
        #z2 = z1 + P(1.17299, 1.05339)
        #c3 = z2 + P(-0.448261, -0.264626)
        #c4 = z2 + P(0.690026, 0.407349)
        #z3 = z2 + P(2.10488, 1.16107)
        #c5 = z3 + P(-0.601063, -0.364945)
        #c6 = z3 + P(0.53545, 0.325102)
        #z4 = z3 + P(1.52084, 0.840564)
        #c7 = z4 + P(-0.526828, -0.302521)

        z0 = P(0, -0)
        c0 = z0 + PP(4.20229, -90)
        z1 = z0 + PP(15.8806, -118)
        c1 = z1 + PP(3.64666, 0)
        c2 = z1 + PP(0.898172, 180)
        z2 = z1 + PP(1.57656, 41)
        c3 = z2 + PP(0.520542, -149)
        c4 = z2 + PP(0.801292, 30)
        z3 = z2 + PP(2.40388, 28)
        #z3 = z4 - PP(1.73767, ta + 358)
        c5 = z3 + PP(0.703179, -148)
        c6 = z3 + PP(0.626417, 31)
        z4 = z3 + PP(1.73767, 28)
        c7 = z4 + PP(0.607508, -150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])
