from ..waseda.char import WasedaChar
import math
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)


class CharAa(WasedaChar):
    def __init__(self, name='aa', kana='ああ',
                 model='EL4CL1', head_type='EL', tail_type='ELCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_ELCL(cls, ta=None, **kwargs):
        #M 0,0 C 4.14018,2.20137 10.722965,3.4592925 11.3811,0 11.766203,-2.0241783 7.6436587,-2.6701741 8.7739987,-0.71237408 9.4391687,0.43972692 9.43327,0.568554 10.2884,1.58764

        #z0 = P(0, 0)
        #c0 = P(1.46056, -0.776594)
        #c1 = P(3.78282, -1.22036)
        #z1 = P(4.015, 0)
        #c2 = P(4.15085, 0.714085)
        #c3 = P(2.69651, 0.941978)
        #z2 = P(3.09527, 0.25131)
        #c4 = P(3.32993, -0.155126)
        #c5 = P(3.32785, -0.200573)
        #z3 = P(3.62952, -0.560084)

        #z0 = P(0, 0)
        #c0 = z0 + P(1.46056, -0.776594)
        #z1 = z0 + P(4.015, 0)
        #c1 = z1 + P(-0.232175, -1.22036)
        #c2 = z1 + P(0.135856, 0.714085)
        #z2 = z1 + P(-0.919727, 0.25131)
        #c3 = z2 + P(-0.398759, 0.690668)
        #c4 = z2 + P(0.234657, -0.406436)
        #z3 = z2 + P(0.534247, -0.811394)
        #c5 = z3 + P(-0.301671, 0.359511)

        z0 = P(0, 0)
        c0 = z0 + PP(1.65419, -27)
        z1 = z0 + PP(4.015, 0)
        c1 = z1 + PP(1.24225, -100)
        c2 = z1 + PP(0.726894, 79)
        z2 = z1 + PP(0.953444, 164)
        #z2 = z3 - PP(0.971483, ta + -6)
        c3 = z2 + PP(0.797516, 120)
        c4 = z2 + PP(0.469312, -59)
        z3 = z2 + PP(0.971483, -56)
        c5 = z3 + PP(0.469312, 130)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_ELCLe(cls, ta=None, **kwargs):
        #M 186.036,116.908 C 190.214,119.037 196.805,120.376 197.417,116.908 197.81,114.886 193.97634,115.40652 193.74334,116.61272 193.51795,117.77953 195.79619,117.67116 197.14774,117.67116

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.751064)
        #c1 = P(3.79906, -1.22343)
        #z1 = P(4.01496, -0)
        #c2 = P(4.15361, 0.713317)
        #c3 = P(2.80118, 0.529689)
        #z2 = P(2.71898, 0.104168)
        #c4 = P(2.63947, -0.307456)
        #c5 = P(3.44318, -0.269226)
        z3 = P(3.91997, -0.269226)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.751064)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(-0.2159, -1.22343)
        #c2 = z1 + P(0.138642, 0.713317)
        #z2 = z1 + P(-1.29599, 0.104168)
        #c3 = z2 + P(0.0821972, 0.425521)
        #c4 = z2 + P(-0.0795126, -0.411625)
        #z3 = z2 + P(1.201, -0.373394)
        #c5 = z3 + P(-0.476797, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65424, -27)
        z1 = z0 + PP(4.01496, 0)
        c1 = z1 + PP(1.24234, -100)
        c2 = z1 + PP(0.726665, 79)
        #z2 = z1 + PP(1.30017, 175)
        z2 = z3 - PP(1.2577, ta + -17)
        c3 = z2 + PP(0.433387, 79)
        #c4 = z2 + PP(0.419234, -100)
        #z3 = z2 + PP(1.2577, -17)
        #c5 = z3 + PP(0.476797, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLer(cls, ta=None, **kwargs):
        #M 97.3524,116.908 C 101.53,119.037 108.09891,120.37185 108.733,116.908 109.10395,114.88164 106.10257,115.73704 105.64179,117.63764 105.32843,118.93016 106.9704,118.58007 108.47713,117.79427

        #z0 = P(0, -0)
        #c0 = P(1.47376, -0.751064)
        #c1 = P(3.79113, -1.22197)
        #z1 = P(4.01482, -0)
        #c2 = P(4.14569, 0.714855)
        #c3 = P(3.08687, 0.413089)
        #z2 = P(2.92431, -0.257401)
        #c4 = P(2.81377, -0.713373)
        #c5 = P(3.39302, -0.589869)
        z3 = P(3.92456, -0.312656)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47376, -0.751064)
        #z1 = z0 + P(4.01482, 0)
        #c1 = z1 + P(-0.223693, -1.22197)
        #c2 = z1 + P(0.130863, 0.714855)
        #z2 = z1 + P(-1.09051, -0.257401)
        #c3 = z2 + P(0.162553, 0.670489)
        #c4 = z2 + P(-0.110546, -0.455972)
        #z3 = z2 + P(1.00024, -0.0552556)
        #c5 = z3 + P(-0.531541, -0.277213)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65411, -27)
        z1 = z0 + PP(4.01482, 0)
        c1 = z1 + PP(1.24228, -100)
        c2 = z1 + PP(0.726734, 79)
        #z2 = z1 + PP(1.12048, -166)
        z2 = z3 - PP(1.00177, ta + 329)
        c3 = z2 + PP(0.689913, 76)
        #c4 = z2 + PP(0.469182, -103)
        #z3 = z2 + PP(1.00177, -3)
        #c5 = z3 + PP(0.599485, -152)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLel(cls, ta=None, **kwargs):
        #M 47.3414,116.908 C 51.5194,119.037 58.111,120.376 58.7225,116.908 58.973689,115.45404 56.212911,115.37662 55.699081,116.26935 55.211431,117.1166 56.526521,117.78268 57.6645,118.446

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.751064)
        #c1 = P(3.79928, -1.22343)
        #z1 = P(4.015, -0)
        #c2 = P(4.10361, 0.512925)
        #c3 = P(3.12967, 0.540237)
        #z2 = P(2.9484, 0.225302)
        #c4 = P(2.77637, -0.0735894)
        #c5 = P(3.24031, -0.308568)
        z3 = P(3.64176, -0.542572)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.751064)
        #z1 = z0 + P(4.015, 0)
        #c1 = z1 + P(-0.215724, -1.22343)
        #c2 = z1 + P(0.0886139, 0.512925)
        #z2 = z1 + P(-1.0666, 0.225302)
        #c3 = z2 + P(0.181268, 0.314935)
        #c4 = z2 + P(-0.172032, -0.298891)
        #z3 = z2 + P(0.693356, -0.767874)
        #c5 = z3 + P(-0.401454, 0.234005)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65424, -27)
        z1 = z0 + PP(4.015, 0)
        c1 = z1 + PP(1.24231, -99)
        c2 = z1 + PP(0.520523, 80)
        #z2 = z1 + PP(1.09013, 168)
        z2 = z3 - PP(1.03459, ta + -16)
        c3 = z2 + PP(0.363376, 60)
        #c4 = z2 + PP(0.344864, -119)
        #z3 = z2 + PP(1.03459, -47)
        #c5 = z3 + PP(0.464675, 149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLne(cls, ta=None, **kwargs):
        #M 247.385,116.908 C 251.563,119.037 258.22286,120.38727 258.766,116.908 259.05209,115.07532 254.5416,118.20948 253.56942,118.91402

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.751064)
        #c1 = P(3.82336, -1.22741)
        #z1 = P(4.01496, -0)
        #c2 = P(4.11589, 0.646529)
        #c3 = P(2.52469, -0.459133)
        #z2 = P(2.18173, -0.707679)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.751064)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(-0.191608, -1.22741)
        #c2 = z1 + P(0.100926, 0.646529)
        #z2 = z1 + P(-1.83324, -0.707679)
        #c3 = z2 + P(0.342963, 0.248546)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65424, -27)
        z1 = z0 + PP(4.01496, 0)
        #z1 = z2 - PP(1.96509, ta + -13)
        c1 = z1 + PP(1.24227, -98)
        c2 = z1 + PP(0.654359, 81)
        z2 = z1 + PP(1.96509, -158)
        c3 = z2 + PP(0.423555, 35)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            #curve(),
            endknot(*z2)])

    @classmethod
    def path_ELCLner(cls, ta=None, **kwargs):
        return cls.path_ELCLne(ta=ta, **kwargs)

    @classmethod
    def path_ELCLnel(cls, ta=None, **kwargs):
        #M 324.117,116.908 C 328.295,119.037 334.60543,120.31441 335.498,116.908 336.01035,114.95267 333.54962,114.99417 332.54551,116.80109 331.89887,117.96473 333.56057,118.07856 335.11554,117.73844

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.751064)
        #c1 = P(3.70009, -1.20171)
        #z1 = P(4.01496, -0)
        #c2 = P(4.19571, 0.689797)
        #c3 = P(3.32762, 0.675157)
        #z2 = P(2.97339, 0.0377155)
        #c4 = P(2.74527, -0.372791)
        #c5 = P(3.33148, -0.412948)
        z3 = P(3.88004, -0.292961)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.751064)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(-0.314879, -1.20171)
        #c2 = z1 + P(0.180746, 0.689797)
        #z2 = z1 + P(-1.04157, 0.0377155)
        #c3 = z2 + P(0.354228, 0.637441)
        #c4 = z2 + P(-0.22812, -0.410506)
        #z3 = z2 + P(0.906649, -0.330676)
        #c5 = z3 + P(-0.548559, -0.119987)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65424, -27)
        z1 = z0 + PP(4.01496, 0)
        c1 = z1 + PP(1.24227, -104)
        c2 = z1 + PP(0.713084, 75)
        #z2 = z1 + PP(1.04226, 177)
        z2 = z3 - PP(0.96507, ta + 327)
        c3 = z2 + PP(0.729252, 60)
        #c4 = z2 + PP(0.469632, -119)
        #z3 = z2 + PP(0.96507, -20)
        #c5 = z3 + PP(0.561528, -167)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLs(cls, ta=None, **kwargs):
        #M 186.566,184.959 C 190.744,187.087 197.30892,188.42112 197.947,184.959 198.25259,183.30094 195.5672,182.80469 195.54443,184.25743 195.5348,184.8716 195.53874,185.63292 195.53874,186.99364

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.750711)
        #c1 = P(3.78986, -1.22136)
        #z1 = P(4.01496, -0)
        #c2 = P(4.12277, 0.584927)
        #c3 = P(3.17542, 0.759993)
        #z2 = P(3.16739, 0.247498)
        #c4 = P(3.16399, 0.0308328)
        #c5 = P(3.16538, -0.237744)
        z3 = P(3.16538, -0.717776)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.750711)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(-0.2251, -1.22136)
        #c2 = z1 + P(0.107805, 0.584927)
        #z2 = z1 + P(-0.847573, 0.247498)
        #c3 = z2 + P(0.00803275, 0.512494)
        #c4 = z2 + P(-0.00339725, -0.216666)
        #z3 = z2 + P(-0.00200731, -0.965274)
        #c5 = z3 + P(0, 0.480032)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65408, -26)
        z1 = z0 + PP(4.01496, 0)
        c1 = z1 + PP(1.24193, -100)
        c2 = z1 + PP(0.594778, 79)
        #z2 = z1 + PP(0.88297, 163)
        z2 = z3 - PP(0.965276, ta + 0)
        c3 = z2 + PP(0.512557, 89)
        #c4 = z2 + PP(0.216692, -90)
        #z3 = z2 + PP(0.965276, -90)
        #c5 = z3 + PP(0.480032, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLsl(cls, ta=None, **kwargs):
        #M 97.3523,184.959 C 101.53,187.087 108.733,188.51461 108.733,184.959 108.733,182.60147 105.99054,186.36208 105.60574,187.07331

        #z0 = P(0, -0)
        #c0 = P(1.4738, -0.750711)
        #c1 = P(4.01486, -1.25434)
        #z1 = P(4.01486, -0)
        #c2 = P(4.01486, 0.831684)
        #c3 = P(3.04738, -0.494975)
        z2 = P(2.91163, -0.745882)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.4738, -0.750711)
        #z1 = z0 + P(4.01486, 0)
        #c1 = z1 + P(0, -1.25434)
        #c2 = z1 + P(0, 0.831684)
        #z2 = z1 + P(-1.10323, -0.745882)
        #c3 = z2 + P(0.135749, 0.250906)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65398, -26)
        z1 = z0 + PP(4.01486, 0)
        #z1 = z2 - PP(1.33171, ta + -26)
        c1 = z1 + PP(1.25434, -90)
        #c2 = z1 + PP(0.831684, 90)
        #z2 = z1 + PP(1.33171, -145)
        #c3 = z2 + PP(0.285275, 61)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

    @classmethod
    def path_ELCLsr(cls, ta=None, **kwargs):
        #M147.363 116.908C151.541 119.037 158.133 120.376 158.744 116.908C159.138 114.886 155.016 114.205 156.146 116.163C156.832 117.303 156.831 117.427 157.686 118.446

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.751064)
        #c1 = P(3.79942, -1.22343)
        #z1 = P(4.01496, -0)
        #c2 = P(4.15396, 0.713317)
        #c3 = P(2.69981, 0.953558)
        #z2 = P(3.09845, 0.262819)
        #c4 = P(3.34045, -0.139347)
        #c5 = P(3.3401, -0.183092)
        z3 = P(3.64173, -0.542572)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.751064)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(-0.215547, -1.22343)
        #c2 = z1 + P(0.138994, 0.713317)
        #z2 = z1 + P(-0.916517, 0.262819)
        #c3 = z2 + P(-0.398639, 0.690739)
        #c4 = z2 + P(0.242006, -0.402167)
        #z3 = z2 + P(0.543278, -0.805392)
        #c5 = z3 + P(-0.301625, 0.359481)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65424, -27)
        z1 = z0 + PP(4.01496, 0)
        c1 = z1 + PP(1.24228, -99)
        c2 = z1 + PP(0.726732, 78)
        #z2 = z1 + PP(0.953455, 163)
        z2 = z3 - PP(0.971497, ta + -4)
        c3 = z2 + PP(0.797517, 119)
        #c4 = z2 + PP(0.469366, -58)
        #z3 = z2 + PP(0.971497, -55)
        #c5 = z3 + PP(0.469259, 129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLse(cls, ta=None, **kwargs):
        #M462.185 116.908C466.363 119.037 472.955 120.376 473.566 116.908C473.959 114.886 469.838 114.205 470.968 116.163C471.653 117.303 471.653 117.427 472.508 118.446

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.751064)
        #c1 = P(3.79942, -1.22343)
        #z1 = P(4.01496, -0)
        #c2 = P(4.15361, 0.713317)
        #c3 = P(2.69981, 0.953558)
        #z2 = P(3.09845, 0.262819)
        #c4 = P(3.3401, -0.139347)
        #c5 = P(3.3401, -0.183092)
        z3 = P(3.64172, -0.542572)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.751064)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(-0.215547, -1.22343)
        #c2 = z1 + P(0.138642, 0.713317)
        #z2 = z1 + P(-0.916517, 0.262819)
        #c3 = z2 + P(-0.398639, 0.690739)
        #c4 = z2 + P(0.241653, -0.402167)
        #z3 = z2 + P(0.543278, -0.805392)
        #c5 = z3 + P(-0.301625, 0.359481)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65424, -27)
        z1 = z0 + PP(4.01496, 0)
        c1 = z1 + PP(1.24228, -99)
        c2 = z1 + PP(0.726665, 79)
        #z2 = z1 + PP(0.953455, 163)
        z2 = z3 - PP(0.971497, ta + -4)
        c3 = z2 + PP(0.797517, 119)
        #c4 = z2 + PP(0.469184, -58)
        #z3 = z2 + PP(0.971497, -55)
        #c5 = z3 + PP(0.469259, 129)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLser(cls, ta=None, **kwargs):
        #M 47.3414,184.959 C 51.5194,187.087 58.088752,188.422 58.7225,184.959 59.093487,182.93181 56.160814,183.36221 55.633165,184.27542 55.131163,185.14424 56.586679,185.71926 57.6645,186.497

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.750711)
        #c1 = P(3.79143, -1.22167)
        #z1 = P(4.015, -0)
        #c2 = P(4.14588, 0.715148)
        #c3 = P(3.11129, 0.563312)
        #z2 = P(2.92515, 0.241152)
        #c4 = P(2.74806, -0.0653486)
        #c5 = P(3.26153, -0.268203)
        z3 = P(3.64176, -0.542572)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.750711)
        #z1 = z0 + P(4.015, 0)
        #c1 = z1 + P(-0.223572, -1.22167)
        #c2 = z1 + P(0.130876, 0.715148)
        #z2 = z1 + P(-1.08985, 0.241152)
        #c3 = z2 + P(0.186143, 0.32216)
        #c4 = z2 + P(-0.177095, -0.3065)
        #z3 = z2 + P(0.71661, -0.783724)
        #c5 = z3 + P(-0.380231, 0.274369)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65408, -26)
        z1 = z0 + PP(4.015, 0)
        c1 = z1 + PP(1.24196, -100)
        c2 = z1 + PP(0.727024, 79)
        #z2 = z1 + PP(1.11621, 167)
        z2 = z3 - PP(1.06196, ta + -11)
        c3 = z2 + PP(0.37207, 59)
        #c4 = z2 + PP(0.353985, -120)
        #z3 = z2 + PP(1.06196, -47)
        #c5 = z3 + PP(0.468886, 144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLsel(cls, ta=None, **kwargs):
        #M 136.025,184.959 C 140.203,187.087 146.80142,188.4273 147.406,184.959 147.66852,183.45301 145.98707,183.63141 145.47523,184.68362 145.22517,185.19769 145.16455,185.95454 145.16455,186.96229

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.750711)
        #c1 = P(3.80168, -1.22354)
        #z1 = P(4.01496, -0)
        #c2 = P(4.10758, 0.53128)
        #c3 = P(3.5144, 0.468344)
        #z2 = P(3.33383, 0.0971479)
        #c4 = P(3.24562, -0.0842045)
        #c5 = P(3.22423, -0.351204)
        z3 = P(3.22423, -0.706716)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.750711)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(-0.213282, -1.22354)
        #c2 = z1 + P(0.0926112, 0.53128)
        #z2 = z1 + P(-0.681133, 0.0971479)
        #c3 = z2 + P(0.180566, 0.371196)
        #c4 = z2 + P(-0.0882156, -0.181352)
        #z3 = z2 + P(-0.109601, -0.803864)
        #c5 = z3 + P(0, 0.355512)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65408, -26)
        z1 = z0 + PP(4.01496, 0)
        c1 = z1 + PP(1.24199, -99)
        c2 = z1 + PP(0.539291, 80)
        #z2 = z1 + PP(0.688026, 171)
        z2 = z3 - PP(0.811301, ta + -7)
        c3 = z2 + PP(0.412784, 64)
        #c4 = z2 + PP(0.20167, -115)
        #z3 = z2 + PP(0.811301, -97)
        #c5 = z3 + PP(0.355512, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLsw(cls, ta=None, **kwargs):
        #M 427.391,116.908 C 431.569,119.037 438.13788,120.37202 438.772,116.908 439.14291,114.88183 437.41782,113.84296 436.5994,115.9503 436.16651,117.06494 435.89463,117.77272 435.464,118.95589

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.751064)
        #c1 = P(3.79126, -1.22203)
        #z1 = P(4.01496, -0)
        #c2 = P(4.14581, 0.714788)
        #c3 = P(3.53724, 1.08128)
        #z2 = P(3.24852, 0.337855)
        #c4 = P(3.0958, -0.0553649)
        #c5 = P(2.99989, -0.305054)
        z3 = P(2.84797, -0.72245)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.751064)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(-0.223703, -1.22203)
        #c2 = z1 + P(0.130849, 0.714788)
        #z2 = z1 + P(-0.766445, 0.337855)
        #c3 = z2 + P(0.28872, 0.743423)
        #c4 = z2 + P(-0.152714, -0.39322)
        #z3 = z2 + P(-0.400544, -1.06031)
        #c5 = z3 + P(0.151917, 0.417396)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65424, -27)
        z1 = z0 + PP(4.01496, 0)
        c1 = z1 + PP(1.24234, -100)
        c2 = z1 + PP(0.726666, 79)
        #z2 = z1 + PP(0.837606, 156)
        z2 = z3 - PP(1.13344, ta + 0)
        c3 = z2 + PP(0.797519, 68)
        #c4 = z2 + PP(0.421834, -111)
        #z3 = z2 + PP(1.13344, -110)
        #c5 = z3 + PP(0.444183, 70)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

    @classmethod
    def path_ELCLswr(cls, ta=None, **kwargs):
        #M 295.345,116.908 C 299.523,119.037 306.115,120.376 306.727,116.908 307.12,114.886 303.25196,114.15843 304.129,116.163 304.60988,117.26211 304.81434,117.69433 305.02255,118.76802

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.751064)
        #c1 = P(3.79942, -1.22343)
        #z1 = P(4.01532, -0)
        #c2 = P(4.15396, 0.713317)
        #c3 = P(2.7894, 0.969987)
        #z2 = P(3.0988, 0.262819)
        #c4 = P(3.26844, -0.124922)
        #c5 = P(3.34057, -0.2774)
        #z3 = P(3.41402, -0.656174)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.751064)
        #z1 = z0 + P(4.01532, 0)
        #c1 = z1 + P(-0.2159, -1.22343)
        #c2 = z1 + P(0.138642, 0.713317)
        #z2 = z1 + P(-0.916517, 0.262819)
        #c3 = z2 + P(-0.3094, 0.707168)
        #c4 = z2 + P(0.169644, -0.387742)
        #z3 = z2 + P(0.315225, -0.918993)
        #c5 = z3 + P(-0.0734519, 0.378774)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65424, -27)
        z1 = z0 + PP(4.01532, 0)
        c1 = z1 + PP(1.24234, -100)
        c2 = z1 + PP(0.726665, 79)
        z2 = z1 + PP(0.953455, 163)
        #z2 = z3 - PP(0.971553, ta + 9)
        c3 = z2 + PP(0.77189, 113)
        c4 = z2 + PP(0.423229, -66)
        z3 = z2 + PP(0.971553, -71)
        c5 = z3 + PP(0.38583, 100)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_ELCLswl(cls, ta=None, **kwargs):
        #M 225.238,184.959 C 229.416,187.087 236.619,188.47943 236.619,184.959 236.619,182.37833 234.11177,185.39327 233.12902,187.01814

        #z0 = P(0, -0)
        #c0 = P(1.47391, -0.750711)
        #c1 = P(4.01496, -1.24193)
        #z1 = P(4.01496, -0)
        #c2 = P(4.01496, 0.910403)
        #c3 = P(3.13047, -0.153201)
        z2 = P(2.78378, -0.726419)

        #z0 = P(0, -0)
        #c0 = z0 + P(1.47391, -0.750711)
        #z1 = z0 + P(4.01496, 0)
        #c1 = z1 + P(0, -1.24193)
        #c2 = z1 + P(0, 0.910403)
        #z2 = z1 + P(-1.23119, -0.726419)
        #c3 = z2 + P(0.346692, 0.573218)

        z0 = P(0, -0)
        c0 = z0 + PP(1.65408, -26)
        z1 = z0 + PP(4.01496, 0)
        #z1 = z2 - PP(1.42951, ta + -27)
        c1 = z1 + PP(1.24193, -90)
        #c2 = z1 + PP(0.910403, 90)
        #z2 = z1 + PP(1.42951, -149)
        #c3 = z2 + PP(0.669906, 58)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            #controlcurve(c2, c3),
            curve(),
            endknot(*z2, angle=ta)])

class CharAya(CharAa):
    def __init__(self, name='aya', kana='あや',
                 model='EL4CL1', head_type='EL', tail_type='ELCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharNei(CharAa):
    def __init__(self, name='nei', kana='ねい',
                 model='EL4CL1', head_type='EL', tail_type='ELCL1'):
        super().__init__(name, kana, model, head_type, tail_type)
