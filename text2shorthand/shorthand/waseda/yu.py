import math
from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)


class CharYu(WasedaChar):
    def __init__(self, name='yu', kana='ゆ',
                 model='NER8CR1', head_type='NER',
                 tail_type='NERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_pos_chou(self):
        return super().get_pos_chou() + P(0, -1)

    @classmethod
    def path_NERCR(cls, ta=None, **kwargs):
        #M 47.3414,58.6772 C 50.0793,51.5447 57.2101,44.1551 64.6482,44.1551 65.4314,44.1551 65.921439,44.719598 65.57715,45.969093 65.395076,46.629876 64.766927,47.111802 64.34366,47.260078 63.874209,47.424534 62.995882,47.232042 63.1638,46.513225 63.407457,45.470185 63.9578,44.9335 64.1542,44.2005

        #z0 = P(0, -0)
        #c0 = P(0.962262, 2.50679)
        #c1 = P(3.46845, 5.10394)
        #z1 = P(6.08265, 5.10394)
        #c2 = P(6.35791, 5.10394)
        #c3 = P(6.53014, 4.90554)
        #z2 = P(6.40913, 4.46639)
        #c4 = P(6.34514, 4.23415)
        #c5 = P(6.12437, 4.06477)
        #z3 = P(5.97561, 4.01266)
        #c6 = P(5.81062, 3.95486)
        #c7 = P(5.50192, 4.02251)
        #z4 = P(5.56094, 4.27515)
        #c8 = P(5.64657, 4.64174)
        #c9 = P(5.84, 4.83036)
        z5 = P(5.90902, 5.08798)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.962262, 2.50679)
        #z1 = z0 + P(6.08265, 5.10394)
        #c1 = z1 + P(-2.61419, 0)
        #c2 = z1 + P(0.275263, 0)
        #z2 = z1 + P(0.326489, -0.637546)
        #c3 = z2 + P(0.121004, 0.439147)
        #c4 = z2 + P(-0.0639917, -0.232239)
        #z3 = z2 + P(-0.433522, -0.453729)
        #c5 = z3 + P(0.148761, 0.0521131)
        #c6 = z3 + P(-0.164993, -0.0577997)
        #z4 = z3 + P(-0.414673, 0.262489)
        #c7 = z4 + P(-0.0590164, -0.252635)
        #c8 = z4 + P(0.0856357, 0.366587)
        #z5 = z4 + P(0.348086, 0.81283)
        #c9 = z5 + P(-0.0690267, -0.25762)

        z0 = P(0, -0)
        c0 = z0 + PP(2.68513, 69)
        z1 = z0 + PP(7.94032, 39)
        c1 = z1 + PP(2.61419, 180)
        c2 = z1 + PP(0.275263, 0)
        z2 = z1 + PP(0.716282, -62)
        c3 = z2 + PP(0.455513, 74)
        c4 = z2 + PP(0.240894, -105)
        z3 = z2 + PP(0.627544, -133)
        c5 = z3 + PP(0.157625, 19)
        c6 = z3 + PP(0.174824, -160)
        z4 = z3 + PP(0.490769, 147)
        #z4 = z5 - PP(0.884226, ta + 350)
        c7 = z4 + PP(0.259437, -103)
        c8 = z4 + PP(0.376456, 76)
        z5 = z4 + PP(0.884226, 66)
        c9 = z5 + PP(0.266707, -104)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_NERCRe(cls, ta=None, **kwargs):
        #M 47.3414,101.252 C 49.944841,94.972016 58.867035,85.70662 64.8334,87.0869 65.513534,87.26986 66.134336,88.068968 66.107135,88.772755 66.075166,89.599885 65.272185,90.464403 64.461709,90.632612 63.648159,90.801459 62.159342,90.406876 62.203526,89.577164 62.275936,88.217419 65.160917,88.250293 66.067044,88.250293

        #z0 = P(0, -0)
        #c0 = P(0.915005, 2.20716)
        #c1 = P(4.0508, 5.46358)
        #z1 = P(6.14774, 4.97846)
        #c2 = P(6.38678, 4.91416)
        #c3 = P(6.60496, 4.63331)
        #z2 = P(6.5954, 4.38595)
        #c4 = P(6.58417, 4.09525)
        #c5 = P(6.30195, 3.79141)
        #z3 = P(6.0171, 3.73229)
        #c6 = P(5.73117, 3.67295)
        #c7 = P(5.20791, 3.81163)
        #z4 = P(5.22344, 4.10324)
        #c8 = P(5.24889, 4.58113)
        #c9 = P(6.26285, 4.56958)
        z5 = P(6.58131, 4.56958)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.915005, 2.20716)
        #z1 = z0 + P(6.14774, 4.97846)
        #c1 = z1 + P(-2.09694, 0.485113)
        #c2 = z1 + P(0.23904, -0.0643031)
        #z2 = z1 + P(0.447667, -0.59251)
        #c3 = z2 + P(0.00956006, 0.247353)
        #c4 = z2 + P(-0.0112358, -0.290703)
        #z3 = z2 + P(-0.578301, -0.653665)
        #c5 = z3 + P(0.28485, 0.0591187)
        #c6 = z3 + P(-0.28593, -0.0593429)
        #z4 = z3 + P(-0.793661, 0.370948)
        #c7 = z4 + P(-0.0155289, -0.29161)
        #c8 = z4 + P(0.0254492, 0.477896)
        #z5 = z4 + P(1.35787, 0.466342)
        #c9 = z5 + P(-0.318467, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.38931, 67)
        z1 = z0 + PP(7.91074, 39)
        c1 = z1 + PP(2.15232, 166)
        c2 = z1 + PP(0.247538, -15)
        z2 = z1 + PP(0.742613, -52)
        c3 = z2 + PP(0.247538, 87)
        c4 = z2 + PP(0.29092, -92)
        z3 = z2 + PP(0.87276, -131)
        c5 = z3 + PP(0.29092, 11)
        c6 = z3 + PP(0.292023, -168)
        #z4 = z3 + PP(0.87607, 154)
        z4 = z5 - PP(1.43572, ta + 18)
        c7 = z4 + PP(0.292024, -93)
        #c8 = z4 + PP(0.478573, 86)
        #z5 = z4 + PP(1.43572, 18)
        #c9 = z5 + PP(0.318467, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRer(cls, ta=None, **kwargs):
        #M 172.225,101.252 C 174.71012,95.141212 184.25748,85.208359 189.717,87.0869 190.57507,87.38215 190.94543,88.649161 190.86918,89.553398 190.81137,90.23897 190.35666,91.062865 189.69481,91.250749 189.12024,91.413855 188.15886,91.120527 188.05319,90.532684 187.84084,89.351421 189.55338,88.553817 190.64294,88.031192

        #z0 = P(0, -0)
        #c0 = P(0.87342, 2.1477)
        #c1 = P(4.22893, 5.6387)
        #z1 = P(6.14774, 4.97846)
        #c2 = P(6.44931, 4.8747)
        #c3 = P(6.57948, 4.42939)
        #z2 = P(6.55268, 4.11159)
        #c4 = P(6.53236, 3.87064)
        #c5 = P(6.37255, 3.58107)
        #z3 = P(6.13994, 3.51504)
        #c6 = P(5.938, 3.45771)
        #c7 = P(5.60011, 3.56081)
        #z4 = P(5.56297, 3.76741)
        #c8 = P(5.48834, 4.18258)
        #c9 = P(6.09023, 4.4629)
        z5 = P(6.47317, 4.64658)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.87342, 2.1477)
        #z1 = z0 + P(6.14774, 4.97846)
        #c1 = z1 + P(-1.9188, 0.660232)
        #c2 = z1 + P(0.301577, -0.103769)
        #z2 = z1 + P(0.404945, -0.866875)
        #c3 = z2 + P(0.0267988, 0.317803)
        #c4 = z2 + P(-0.0203179, -0.240951)
        #z3 = z2 + P(-0.412744, -0.596551)
        #c5 = z3 + P(0.232614, 0.0660337)
        #c6 = z3 + P(-0.201938, -0.0573252)
        #z4 = z3 + P(-0.576964, 0.252371)
        #c7 = z4 + P(0.0371388, -0.206603)
        #c8 = z4 + P(-0.0746325, 0.415167)
        #z5 = z4 + P(0.910193, 0.879174)
        #c9 = z5 + P(-0.382937, -0.183682)

        z0 = P(0, -0)
        c0 = z0 + PP(2.3185, 67)
        z1 = z0 + PP(7.91074, 39)
        c1 = z1 + PP(2.02921, 161)
        c2 = z1 + PP(0.318931, -18)
        z2 = z1 + PP(0.956793, -64)
        c3 = z2 + PP(0.318931, 85)
        c4 = z2 + PP(0.241806, -94)
        z3 = z2 + PP(0.725417, -124)
        c5 = z3 + PP(0.241805, 15)
        c6 = z3 + PP(0.209917, -164)
        #z4 = z3 + PP(0.629744, 156)
        z4 = z5 - PP(1.26546, ta + 378)
        c7 = z4 + PP(0.209915, -79)
        #c8 = z4 + PP(0.421821, 100)
        #z5 = z4 + PP(1.26546, 44)
        #c9 = z5 + PP(0.424711, -154)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRel(cls, ta=None, **kwargs):
        #M 115.453,101.252 C 117.96267,95.105126 127.35711,85.349195 132.945,87.0869 133.58256,87.313872 134.254,87.6384 133.898,88.8796 133.721,89.5392 133.33589,90.573353 132.64691,90.530022 131.716,90.471477 130.67292,88.839268 131.24921,88.105846 131.81752,87.382583 132.98974,88.337734 133.898,88.8796

        #z0 = P(0, -0)
        #c0 = P(0.882048, 2.16038)
        #c1 = P(4.18382, 5.5892)
        #z1 = P(6.14774, 4.97846)
        #c2 = P(6.37181, 4.89869)
        #c3 = P(6.6078, 4.78463)
        #z2 = P(6.48268, 4.3484)
        #c4 = P(6.42047, 4.11658)
        #c5 = P(6.28512, 3.75312)
        #z3 = P(6.04297, 3.76835)
        #c6 = P(5.71579, 3.78892)
        #c7 = P(5.34919, 4.36258)
        #z4 = P(5.55173, 4.62035)
        #c8 = P(5.75147, 4.87454)
        #c9 = P(6.16346, 4.53885)
        z5 = P(6.48268, 4.3484)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.882048, 2.16038)
        #z1 = z0 + P(6.14774, 4.97846)
        #c1 = z1 + P(-1.96392, 0.610734)
        #c2 = z1 + P(0.224077, -0.0797716)
        #z2 = z1 + P(0.334941, -0.630062)
        #c3 = z2 + P(0.12512, 0.436232)
        #c4 = z2 + P(-0.0622084, -0.231823)
        #z3 = z2 + P(-0.439708, -0.580057)
        #c5 = z3 + P(0.242149, -0.0152291)
        #c6 = z3 + P(-0.327178, 0.0205762)
        #z4 = z3 + P(-0.491235, 0.852001)
        #c7 = z4 + P(-0.202543, -0.257768)
        #c8 = z4 + P(0.199738, 0.254198)
        #z5 = z4 + P(0.930943, -0.271943)
        #c9 = z5 + P(-0.319217, 0.190444)

        z0 = P(0, -0)
        c0 = z0 + PP(2.33351, 67)
        z1 = z0 + PP(7.91074, 39)
        c1 = z1 + PP(2.05669, 162)
        c2 = z1 + PP(0.237853, -19)
        z2 = z1 + PP(0.713557, -62)
        c3 = z2 + PP(0.453821, 73)
        c4 = z2 + PP(0.240024, -105)
        z3 = z2 + PP(0.72788, -127)
        c5 = z3 + PP(0.242627, -3)
        c6 = z3 + PP(0.327824, 176)
        #z4 = z3 + PP(0.983472, 119)
        z4 = z5 - PP(0.96985, ta + 15)
        c7 = z4 + PP(0.327823, -128)
        #c8 = z4 + PP(0.323283, 51)
        #z5 = z4 + PP(0.96985, -16)
        #c9 = z5 + PP(0.37171, 149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRne(cls, ta=None, **kwargs):
        #M 172.225,101.252 C 174.71012,95.141212 184.25748,85.208359 189.717,87.0869 190.57507,87.38215 190.94543,88.649161 190.86918,89.553398 190.81137,90.23897 190.35666,91.062865 189.69481,91.250749 189.12024,91.413855 188.15886,91.120527 188.05319,90.532684 187.84084,89.351421 189.55338,88.553817 190.64294,88.031192

        #z0 = P(0, -0)
        #c0 = P(0.87342, 2.1477)
        #c1 = P(4.22893, 5.6387)
        #z1 = P(6.14774, 4.97846)
        #c2 = P(6.44931, 4.8747)
        #c3 = P(6.57948, 4.42939)
        #z2 = P(6.55268, 4.11159)
        #c4 = P(6.53236, 3.87064)
        #c5 = P(6.37255, 3.58107)
        #z3 = P(6.13994, 3.51504)
        #c6 = P(5.938, 3.45771)
        #c7 = P(5.60011, 3.56081)
        #z4 = P(5.56297, 3.76741)
        #c8 = P(5.48834, 4.18258)
        #c9 = P(6.09023, 4.4629)
        z5 = P(6.47317, 4.64658)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.87342, 2.1477)
        #z1 = z0 + P(6.14774, 4.97846)
        #c1 = z1 + P(-1.9188, 0.660232)
        #c2 = z1 + P(0.301577, -0.103769)
        #z2 = z1 + P(0.404945, -0.866875)
        #c3 = z2 + P(0.0267988, 0.317803)
        #c4 = z2 + P(-0.0203179, -0.240951)
        #z3 = z2 + P(-0.412744, -0.596551)
        #c5 = z3 + P(0.232614, 0.0660337)
        #c6 = z3 + P(-0.201938, -0.0573252)
        #z4 = z3 + P(-0.576964, 0.252371)
        #c7 = z4 + P(0.0371388, -0.206603)
        #c8 = z4 + P(-0.0746325, 0.415167)
        #z5 = z4 + P(0.910193, 0.879174)
        #c9 = z5 + P(-0.382937, -0.183682)

        z0 = P(0, -0)
        c0 = z0 + PP(2.3185, 67)
        z1 = z0 + PP(7.91074, 39)
        c1 = z1 + PP(2.02921, 161)
        c2 = z1 + PP(0.318931, -18)
        z2 = z1 + PP(0.956793, -64)
        c3 = z2 + PP(0.318931, 85)
        c4 = z2 + PP(0.241806, -94)
        z3 = z2 + PP(0.725417, -124)
        c5 = z3 + PP(0.241805, 15)
        c6 = z3 + PP(0.209917, -164)
        #z4 = z3 + PP(0.629744, 156)
        z4 = z5 - PP(1.26546, ta + 378)
        c7 = z4 + PP(0.209915, -79)
        #c8 = z4 + PP(0.421821, 100)
        #z5 = z4 + PP(1.26546, 44)
        #c9 = z5 + PP(0.424711, -154)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRner(cls, ta=None, **kwargs):
        #M 156.055,143.826 C 158.56519,137.67998 167.96698,127.89989 173.547,129.661 174.19246,129.86471 174.54979,130.77899 174.5,131.454 174.46035,131.99152 174.0711,132.66412 173.53983,132.755 173.15175,132.82138 172.74005,132.44319 172.56245,132.09181 172.16934,131.31407 172.44021,130.25549 172.6634,129.47944

        #z0 = P(0, -0)
        #c0 = P(0.882231, 2.16008)
        #c1 = P(4.18658, 5.59739)
        #z1 = P(6.14774, 4.97843)
        #c2 = P(6.37459, 4.90683)
        #c3 = P(6.50018, 4.5855)
        #z2 = P(6.48268, 4.34826)
        #c4 = P(6.46874, 4.15934)
        #c5 = P(6.33194, 3.92295)
        #z3 = P(6.14522, 3.89101)
        #c6 = P(6.00882, 3.86768)
        #c7 = P(5.86413, 4.0006)
        #z4 = P(5.80171, 4.1241)
        #c8 = P(5.66354, 4.39744)
        #c9 = P(5.75874, 4.76949)
        z5 = P(5.83719, 5.04224)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.882231, 2.16008)
        #z1 = z0 + P(6.14774, 4.97843)
        #c1 = z1 + P(-1.96115, 0.61896)
        #c2 = z1 + P(0.226853, -0.0715959)
        #z2 = z1 + P(0.334941, -0.630168)
        #c3 = z2 + P(0.0174992, 0.237239)
        #c4 = z2 + P(-0.0139354, -0.188917)
        #z3 = z2 + P(-0.337461, -0.457249)
        #c5 = z3 + P(0.18672, 0.0319407)
        #c6 = z3 + P(-0.136395, -0.0233299)
        #z4 = z3 + P(-0.34351, 0.233085)
        #c7 = z4 + P(0.0624193, -0.123496)
        #c8 = z4 + P(-0.138162, 0.273344)
        #z5 = z4 + P(0.0354799, 0.918143)
        #c9 = z5 + P(-0.0784423, -0.27275)

        z0 = P(0, -0)
        c0 = z0 + PP(2.3333, 67)
        z1 = z0 + PP(7.91072, 39)
        c1 = z1 + PP(2.05651, 162)
        c2 = z1 + PP(0.237883, -17)
        z2 = z1 + PP(0.71365, -62)
        c3 = z2 + PP(0.237883, 85)
        c4 = z2 + PP(0.18943, -94)
        z3 = z2 + PP(0.568293, -126)
        c5 = z3 + PP(0.189432, 9)
        c6 = z3 + PP(0.138375, -170)
        #z4 = z3 + PP(0.415123, 145)
        z4 = z5 - PP(0.918829, ta + 373)
        c7 = z4 + PP(0.138374, -63)
        #c8 = z4 + PP(0.306278, 116)
        #z5 = z4 + PP(0.918829, 87)
        #c9 = z5 + PP(0.283806, -106)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRnel(cls, ta=None, **kwargs):
        #M 102.064,143.826 C 104.57368,137.67925 113.97568,127.89972 119.556,129.661 120.20146,129.86472 120.67071,130.79676 120.509,131.454 120.32886,132.18616 119.3934,132.79077 118.6418,132.73077 118.01851,132.68101 117.12327,132.04478 117.28096,131.43972 117.55286,130.39648 119.25966,130.89273 120.41535,130.64213

        #z0 = P(0, -0)
        #c0 = P(0.882052, 2.16034)
        #c1 = P(4.18648, 5.59745)
        #z1 = P(6.14774, 4.97843)
        #c2 = P(6.37459, 4.90683)
        #c3 = P(6.53951, 4.57926)
        #z2 = P(6.48268, 4.34826)
        #c4 = P(6.41937, 4.09094)
        #c5 = P(6.09059, 3.87844)
        #z3 = P(5.82643, 3.89953)
        #c6 = P(5.60737, 3.91702)
        #c7 = P(5.29273, 4.14063)
        #z4 = P(5.34815, 4.35328)
        #c8 = P(5.44371, 4.71994)
        #c9 = P(6.04358, 4.54553)
        z5 = P(6.44976, 4.6336)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.882052, 2.16034)
        #z1 = z0 + P(6.14774, 4.97843)
        #c1 = z1 + P(-1.96126, 0.619019)
        #c2 = z1 + P(0.226853, -0.0715994)
        #z2 = z1 + P(0.334941, -0.630168)
        #c3 = z2 + P(0.0568346, 0.230993)
        #c4 = z2 + P(-0.063312, -0.257325)
        #z3 = z2 + P(-0.656246, -0.448733)
        #c5 = z3 + P(0.264157, -0.0210876)
        #c6 = z3 + P(-0.219061, 0.0174886)
        #z4 = z3 + P(-0.478281, 0.453752)
        #c7 = z4 + P(-0.0554217, -0.212654)
        #c8 = z4 + P(0.0955619, 0.366657)
        #z5 = z4 + P(1.10161, 0.280321)
        #c9 = z5 + P(-0.406179, -0.0880758)

        z0 = P(0, -0)
        c0 = z0 + PP(2.33347, 67)
        z1 = z0 + PP(7.91072, 39)
        c1 = z1 + PP(2.05663, 162)
        c2 = z1 + PP(0.237884, -17)
        z2 = z1 + PP(0.71365, -62)
        c3 = z2 + PP(0.237883, 76)
        c4 = z2 + PP(0.264999, -103)
        z3 = z2 + PP(0.794997, -145)
        c5 = z3 + PP(0.264998, -4)
        c6 = z3 + PP(0.219758, 175)
        #z4 = z3 + PP(0.659275, 136)
        z4 = z5 - PP(1.13672, ta + 361)
        c7 = z4 + PP(0.219758, -104)
        #c8 = z4 + PP(0.378906, 75)
        #z5 = z4 + PP(1.13672, 14)
        #c9 = z5 + PP(0.415618, -167)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRs(cls, ta=None, **kwargs):
        #M 47.3414,171.824 C 49.851479,165.6777 59.253089,155.89803 64.8334,157.659 65.478897,157.8627 65.923729,158.52077 65.982675,159.14388 66.055114,159.90964 65.690157,161.04241 64.937538,161.20117 64.416794,161.31102 63.948104,160.66247 63.701062,160.19107 63.319564,159.46312 63.504987,158.58034 63.504987,157.7333

        #z0 = P(0, -0)
        #c0 = P(0.882192, 2.16018)
        #c1 = P(4.18648, 5.59734)
        #z1 = P(6.14774, 4.97843)
        #c2 = P(6.3746, 4.90684)
        #c3 = P(6.53094, 4.67555)
        #z2 = P(6.55166, 4.45655)
        #c4 = P(6.57712, 4.18742)
        #c5 = P(6.44885, 3.7893)
        #z3 = P(6.18434, 3.7335)
        #c6 = P(6.00132, 3.69489)
        #c7 = P(5.83659, 3.92283)
        #z4 = P(5.74976, 4.08851)
        #c8 = P(5.61568, 4.34435)
        #c9 = P(5.68085, 4.65462)
        #z5 = P(5.68085, 4.95232)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.882192, 2.16018)
        #z1 = z0 + P(6.14774, 4.97843)
        #c1 = z1 + P(-1.96126, 0.61891)
        #c2 = z1 + P(0.226866, -0.0715924)
        #z2 = z1 + P(0.403924, -0.521876)
        #c3 = z2 + P(-0.0207172, 0.218998)
        #c4 = z2 + P(0.0254594, -0.269134)
        #z3 = z2 + P(-0.367324, -0.723055)
        #c5 = z3 + P(0.264515, 0.0557978)
        #c6 = z3 + P(-0.183021, -0.0386079)
        #z4 = z3 + P(-0.434572, 0.35501)
        #c7 = z4 + P(0.0868254, -0.165678)
        #c8 = z4 + P(-0.134081, 0.255845)
        #z5 = z4 + P(-0.0689125, 0.863808)
        #c9 = z5 + P(0, -0.297701)

        z0 = P(0, -0)
        c0 = z0 + PP(2.33337, 67)
        z1 = z0 + PP(7.91072, 39)
        c1 = z1 + PP(2.05659, 162)
        c2 = z1 + PP(0.237894, -17)
        z2 = z1 + PP(0.659931, -52)
        c3 = z2 + PP(0.219976, 95)
        c4 = z2 + PP(0.270335, -84)
        z3 = z2 + PP(0.811009, -116)
        c5 = z3 + PP(0.270336, 11)
        c6 = z3 + PP(0.187048, -168)
        z4 = z3 + PP(0.561146, 140)
        #z4 = z5 - PP(0.866552, ta + 364)
        c7 = z4 + PP(0.187051, -62)
        c8 = z4 + PP(0.28885, 117)
        z5 = z4 + PP(0.866552, 94)
        c9 = z5 + PP(0.297701, -90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRsl(cls, ta=None, **kwargs):
        #M 106.949,171.824 C 109.57695,165.50767 118.38942,156.34564 124.441,157.659 125.00553,157.78152 125.44359,158.43329 125.53405,159.00383 125.62878,159.60124 125.43998,160.46522 124.88127,160.69698 124.34692,160.91862 123.608,160.48092 123.29411,159.995 122.84873,159.30554 123.04501,158.26667 123.31204,157.53267

        #z0 = P(0, -0)
        #c0 = P(0.923619, 2.21994)
        #c1 = P(4.02085, 5.44002)
        #z1 = P(6.14774, 4.97843)
        #c2 = P(6.34615, 4.93537)
        #c3 = P(6.50011, 4.7063)
        #z2 = P(6.5319, 4.50578)
        #c4 = P(6.56519, 4.29581)
        #c5 = P(6.49884, 3.99216)
        #z3 = P(6.30247, 3.9107)
        #c6 = P(6.11467, 3.8328)
        #c7 = P(5.85497, 3.98664)
        #z4 = P(5.74465, 4.15742)
        #c8 = P(5.58812, 4.39974)
        #c9 = P(5.6571, 4.76486)
        #z5 = P(5.75095, 5.02283)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.923619, 2.21994)
        #z1 = z0 + P(6.14774, 4.97843)
        #c1 = z1 + P(-2.12689, 0.461593)
        #c2 = z1 + P(0.19841, -0.0430609)
        #z2 = z1 + P(0.384163, -0.472654)
        #c3 = z2 + P(-0.0317931, 0.200522)
        #c4 = z2 + P(0.0332938, -0.209966)
        #z3 = z2 + P(-0.229426, -0.595074)
        #c5 = z3 + P(0.196364, 0.0814543)
        #c6 = z3 + P(-0.187803, -0.0778976)
        #z4 = z3 + P(-0.557823, 0.246718)
        #c7 = z4 + P(0.11032, -0.170781)
        #c8 = z4 + P(-0.156533, 0.242318)
        #z5 = z4 + P(0.00630168, 0.86541)
        #c9 = z5 + P(-0.0938503, -0.257972)

        z0 = P(0, -0)
        c0 = z0 + PP(2.40441, 67)
        z1 = z0 + PP(7.91072, 39)
        c1 = z1 + PP(2.1764, 167)
        c2 = z1 + PP(0.203029, -12)
        z2 = z1 + PP(0.609084, -50)
        c3 = z2 + PP(0.203027, 99)
        c4 = z2 + PP(0.212589, -80)
        z3 = z2 + PP(0.637769, -111)
        c5 = z3 + PP(0.212588, 22)
        c6 = z3 + PP(0.203317, -157)
        z4 = z3 + PP(0.609948, 156)
        #z4 = z5 - PP(0.865433, ta + 378)
        c7 = z4 + PP(0.203314, -57)
        #c8 = z4 + PP(0.28848, 122)
        z5 = z4 + PP(0.865433, 89)
        #c9 = z5 + PP(0.274513, -109)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta+180)])

    @classmethod
    def path_NERCRsr(cls, ta=None, **kwargs):
        #M 166.556,171.824 C 169.10253,165.53293 178.18289,156.30438 184.048,157.659 184.66502,157.80151 185.15043,158.54035 185.19707,159.17189 185.23038,159.62279 184.96493,160.19509 184.54429,160.36085 184.10334,160.53462 183.57501,160.19785 183.19368,159.9164 182.44654,159.36495 181.91542,158.23813 181.58169,157.64432

        #z0 = P(0, -0)
        #c0 = P(0.895003, 2.21106)
        #c1 = P(4.08639, 5.45452)
        #z1 = P(6.14774, 4.97843)
        #c2 = P(6.36459, 4.92834)
        #c3 = P(6.5352, 4.66867)
        #z2 = P(6.55159, 4.44671)
        #c4 = P(6.5633, 4.28824)
        #c5 = P(6.47, 4.0871)
        #z3 = P(6.32216, 4.02884)
        #c6 = P(6.16719, 3.96776)
        #c7 = P(5.9815, 4.08613)
        #z4 = P(5.84748, 4.18504)
        #c8 = P(5.58489, 4.37886)
        #c9 = P(5.39822, 4.77489)
        #z5 = P(5.28093, 4.98359)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.895003, 2.21106)
        #z1 = z0 + P(6.14774, 4.97843)
        #c1 = z1 + P(-2.06135, 0.476095)
        #c2 = z1 + P(0.216858, -0.0500865)
        #z2 = z1 + P(0.403852, -0.53172)
        #c3 = z2 + P(-0.0163921, 0.221961)
        #c4 = z2 + P(0.0117071, -0.158473)
        #z3 = z2 + P(-0.229426, -0.417872)
        #c5 = z3 + P(0.147838, 0.058258)
        #c6 = z3 + P(-0.154976, -0.0610732)
        #z4 = z3 + P(-0.474685, 0.156206)
        #c7 = z4 + P(0.134022, -0.0989184)
        #c8 = z4 + P(-0.26259, 0.193813)
        #z5 = z4 + P(-0.56655, 0.798545)
        #c9 = z5 + P(0.117293, -0.2087)

        z0 = P(0, -0)
        c0 = z0 + PP(2.38533, 67)
        z1 = z0 + PP(7.91072, 39)
        c1 = z1 + PP(2.11562, 166)
        c2 = z1 + PP(0.222567, -13)
        z2 = z1 + PP(0.6677, -52)
        c3 = z2 + PP(0.222565, 94)
        c4 = z2 + PP(0.158905, -85)
        z3 = z2 + PP(0.476711, -118)
        c5 = z3 + PP(0.158903, 21)
        c6 = z3 + PP(0.166576, -158)
        z4 = z3 + PP(0.499726, 161)
        #z4 = z5 - PP(0.979108, ta + 365)
        c7 = z4 + PP(0.166574, -36)
        #c8 = z4 + PP(0.326369, 143)
        z5 = z4 + PP(0.979108, 125)
        #c9 = z5 + PP(0.239402, -60)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta+180)])

    @classmethod
    def path_NERCRse(cls, ta=None, **kwargs):
        #M 47.3414,237.076 C 49.851479,230.9297 59.245745,221.17348 64.8334,222.911 65.471076,223.138 65.971856,224.05297 65.7866,224.704 65.497018,225.72165 63.962784,226.8275 63.044245,226.30237 62.350293,225.90563 62.335765,224.29395 63.033736,223.90433 63.843158,223.4525 64.382543,223.74843 65.394471,225.37428

        #z0 = P(0, -0)
        #c0 = P(0.882192, 2.16018)
        #c1 = P(4.1839, 5.5891)
        #z1 = P(6.14774, 4.97843)
        #c2 = P(6.37185, 4.89865)
        #c3 = P(6.54786, 4.57707)
        #z2 = P(6.48275, 4.34826)
        #c4 = P(6.38097, 3.9906)
        #c5 = P(5.84175, 3.60194)
        #z3 = P(5.51892, 3.7865)
        #c6 = P(5.27502, 3.92594)
        #c7 = P(5.26992, 4.49238)
        #z4 = P(5.51523, 4.62931)
        #c8 = P(5.79971, 4.78811)
        #c9 = P(5.98928, 4.68411)
        z5 = P(6.34493, 4.11269)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.882192, 2.16018)
        #z1 = z0 + P(6.14774, 4.97843)
        #c1 = z1 + P(-1.96384, 0.610669)
        #c2 = z1 + P(0.224118, -0.0797814)
        #z2 = z1 + P(0.335012, -0.630168)
        #c3 = z2 + P(0.0651101, 0.228811)
        #c4 = z2 + P(-0.101776, -0.357663)
        #z3 = z2 + P(-0.963828, -0.561763)
        #c5 = z3 + P(0.32283, -0.184562)
        #c6 = z3 + P(-0.243896, 0.139438)
        #z4 = z3 + P(-0.00369349, 0.842815)
        #c7 = z4 + P(-0.245309, -0.136936)
        #c8 = z4 + P(0.284479, 0.1588)
        #z5 = z4 + P(0.829704, -0.516628)
        #c9 = z5 + P(-0.355652, 0.571421)

        z0 = P(0, -0)
        c0 = z0 + PP(2.33337, 67)
        z1 = z0 + PP(7.91072, 39)
        c1 = z1 + PP(2.05659, 162)
        c2 = z1 + PP(0.237894, -19)
        z2 = z1 + PP(0.713683, -62)
        c3 = z2 + PP(0.237894, 74)
        c4 = z2 + PP(0.371862, -105)
        z3 = z2 + PP(1.11559, -149)
        c5 = z3 + PP(0.371863, -29)
        c6 = z3 + PP(0.280942, 150)
        #z4 = z3 + PP(0.842823, 90)
        z4 = z5 - PP(0.977401, ta + 28)
        c7 = z4 + PP(0.280941, -150)
        #c8 = z4 + PP(0.325801, 29)
        #z5 = z4 + PP(0.977401, -31)
        #c9 = z5 + PP(0.67306, 121)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRser(cls, ta=None, **kwargs):
        #M 98.4448,237.076 C 101.03666,230.81209 110.01789,221.46905 115.937,222.911 116.59949,223.07239 117.1749,223.88287 117.1421,224.56395 117.09318,225.57941 116.13341,226.83772 115.11679,226.84432 114.2068,226.85023 112.84278,225.62629 113.27753,224.82684 113.86454,223.74741 115.95491,224.86387 116.91387,225.4308

        #z0 = P(0, -0)
        #c0 = P(0.910935, 2.20151)
        #c1 = P(4.06748, 5.48522)
        #z1 = P(6.14781, 4.97843)
        #c2 = P(6.38065, 4.92171)
        #c3 = P(6.58288, 4.63686)
        #z2 = P(6.57135, 4.39748)
        #c4 = P(6.55416, 4.04059)
        #c5 = P(6.21684, 3.59834)
        #z3 = P(5.85954, 3.59602)
        #c6 = P(5.53971, 3.59395)
        #c7 = P(5.06031, 4.02411)
        #z4 = P(5.21311, 4.30509)
        #c8 = P(5.41942, 4.68446)
        #c9 = P(6.1541, 4.29207)
        z5 = P(6.49114, 4.09282)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.910935, 2.20151)
        #z1 = z0 + P(6.14781, 4.97843)
        #c1 = z1 + P(-2.08033, 0.506788)
        #c2 = z1 + P(0.232839, -0.0567221)
        #z2 = z1 + P(0.423544, -0.580946)
        #c3 = z2 + P(0.0115279, 0.239372)
        #c4 = z2 + P(-0.0171934, -0.356893)
        #z3 = z2 + P(-0.711815, -0.801459)
        #c5 = z3 + P(0.357301, 0.00231964)
        #c6 = z3 + P(-0.319825, -0.00207713)
        #z4 = z3 + P(-0.646426, 0.709063)
        #c7 = z4 + P(-0.152797, -0.280975)
        #c8 = z4 + P(0.20631, 0.379376)
        #z5 = z4 + P(1.27803, -0.212268)
        #c9 = z5 + P(-0.337036, 0.199253)

        z0 = P(0, -0)
        c0 = z0 + PP(2.38253, 67)
        z1 = z0 + PP(7.91077, 39)
        c1 = z1 + PP(2.14117, 166)
        c2 = z1 + PP(0.239648, -13)
        z2 = z1 + PP(0.718949, -53)
        c3 = z2 + PP(0.23965, 87)
        c4 = z2 + PP(0.357307, -92)
        z3 = z2 + PP(1.07192, -131)
        c5 = z3 + PP(0.357309, 0)
        c6 = z3 + PP(0.319832, -179)
        #z4 = z3 + PP(0.959499, 132)
        z4 = z5 - PP(1.29554, ta + 22)
        c7 = z4 + PP(0.319834, -118)
        #c8 = z4 + PP(0.431845, 61)
        #z5 = z4 + PP(1.29554, -9)
        #c9 = z5 + PP(0.391529, 149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRsel(cls, ta=None, **kwargs):
        #M 155.217,237.076 C 156.581,233.523 159.1015,229.98175 162.20725,227.32875 165.313,224.67575 169.02948,221.97092 172.709,222.911 173.37926,223.08224 174.00642,223.84295 174.00155,224.53472 173.99727,225.14354 173.43661,225.80802 172.84398,225.94757 172.28884,226.07829 171.63383,225.69665 171.283,225.247 170.75863,224.57493 170.844,223.46345 170.83473,222.72929

        #z0 = P(0, -0)
        #c0 = P(0.479391, 1.24874)
        #c1 = P(1.36525, 2.49334)
        #z1 = P(2.45679, 3.42577)
        #c2 = P(3.54834, 4.35819)
        #c3 = P(4.85453, 5.30883)
        #z2 = P(6.14774, 4.97843)
        #c4 = P(6.38331, 4.91825)
        #c5 = P(6.60373, 4.65089)
        #z3 = P(6.60202, 4.40776)
        #c6 = P(6.60051, 4.19378)
        #c7 = P(6.40346, 3.96024)
        #z4 = P(6.19518, 3.9112)
        #c8 = P(6.00007, 3.86525)
        #c9 = P(5.76986, 3.99938)
        #z5 = P(5.64655, 4.15742)
        #c10 = P(5.46226, 4.39362)
        #c11 = P(5.49226, 4.78427)
        #z6 = P(5.48901, 5.04229)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.479391, 1.24874)
        #z1 = z0 + P(2.45679, 3.42577)
        #c1 = z1 + P(-1.09155, -0.932423)
        #c2 = z1 + P(1.09155, 0.932423)
        #z2 = z1 + P(3.69094, 1.55266)
        #c3 = z2 + P(-1.2932, 0.3304)
        #c4 = z2 + P(0.235569, -0.060184)
        #z3 = z2 + P(0.454279, -0.570672)
        #c5 = z3 + P(0.00171161, 0.243129)
        #c6 = z3 + P(-0.00150425, -0.213976)
        #z4 = z3 + P(-0.406839, -0.49656)
        #c7 = z4 + P(0.208286, 0.0490462)
        #c8 = z4 + P(-0.195109, -0.0459428)
        #z5 = z4 + P(-0.548622, 0.246222)
        #c9 = z5 + P(0.123303, -0.158034)
        #c10 = z5 + P(-0.184295, 0.236206)
        #z6 = z5 + P(-0.157549, 0.884874)
        #c11 = z6 + P(0.00325803, -0.258028)

        z0 = P(0, -0)
        c0 = z0 + PP(1.33759, 68)
        z1 = z0 + PP(4.21565, 54)
        c1 = z1 + PP(1.43558, -139)
        c2 = z1 + PP(1.43558, 40)
        z2 = z1 + PP(4.00423, 22)
        c3 = z2 + PP(1.33474, 165)
        c4 = z2 + PP(0.243136, -14)
        z3 = z2 + PP(0.729409, -51)
        c5 = z3 + PP(0.243135, 89)
        c6 = z3 + PP(0.213981, -90)
        z4 = z3 + PP(0.641943, -129)
        c7 = z4 + PP(0.213982, 13)
        c8 = z4 + PP(0.200446, -166)
        z5 = z4 + PP(0.601341, 155)
        #z5 = z6 - PP(0.89879, ta + 369)
        c9 = z5 + PP(0.200445, -52)
        #c10 = z5 + PP(0.299596, 127)
        z6 = z5 + PP(0.89879, 100)
        #c11 = z6 + PP(0.258048, -89)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta+180)])

    @classmethod
    def path_NERCRsw(cls, ta=None, **kwargs):
        #M 47.3414,296.601 C 49.893679,290.30122 58.945416,281.10289 64.8334,282.436 65.443845,282.57421 66.108324,283.08625 66.17875,283.69679 66.264199,284.43759 65.660205,285.37407 64.937539,285.55801 64.450372,285.68201 63.849524,285.29401 63.602775,284.85603 63.184982,284.11445 63.437033,283.05249 63.757185,282.3072

        #z0 = P(0, -0)
        #c0 = P(0.897024, 2.21412)
        #c1 = P(4.07835, 5.44696)
        #z1 = P(6.14774, 4.97843)
        #c2 = P(6.36228, 4.92985)
        #c3 = P(6.59582, 4.74989)
        #z2 = P(6.62057, 4.53531)
        #c4 = P(6.6506, 4.27495)
        #c5 = P(6.43832, 3.94582)
        #z3 = P(6.18434, 3.88117)
        #c6 = P(6.01312, 3.83759)
        #c7 = P(5.80194, 3.97395)
        #z4 = P(5.71522, 4.12789)
        #c8 = P(5.56838, 4.38852)
        #c9 = P(5.65697, 4.76176)
        z5 = P(5.76949, 5.0237)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.897024, 2.21412)
        #z1 = z0 + P(6.14774, 4.97843)
        #c1 = z1 + P(-2.06939, 0.468535)
        #c2 = z1 + P(0.214547, -0.0485753)
        #z2 = z1 + P(0.472837, -0.443117)
        #c3 = z2 + P(-0.0247519, 0.21458)
        #c4 = z2 + P(0.0300319, -0.260361)
        #z3 = z2 + P(-0.436236, -0.654144)
        #c5 = z3 + P(0.253988, 0.0646475)
        #c6 = z3 + P(-0.17122, -0.043581)
        #z4 = z3 + P(-0.469116, 0.246718)
        #c7 = z4 + P(0.0867224, -0.153932)
        #c8 = z4 + P(-0.146837, 0.260636)
        #z5 = z4 + P(0.0542689, 0.895811)
        #c9 = z5 + P(-0.112521, -0.26194)

        z0 = P(0, -0)
        c0 = z0 + PP(2.38893, 67)
        z1 = z0 + PP(7.91072, 39)
        c1 = z1 + PP(2.12177, 167)
        c2 = z1 + PP(0.219977, -12)
        z2 = z1 + PP(0.648018, -43)
        c3 = z2 + PP(0.216003, 96)
        c4 = z2 + PP(0.262088, -83)
        z3 = z2 + PP(0.786261, -123)
        c5 = z3 + PP(0.262086, 14)
        c6 = z3 + PP(0.176679, -165)
        z4 = z3 + PP(0.530037, 152)
        #z4 = z5 - PP(0.897454, ta + 379)
        c7 = z4 + PP(0.17668, -60)
        #c8 = z4 + PP(0.299152, 119)
        z5 = z4 + PP(0.897454, 86)
        #c9 = z5 + PP(0.285085, -113)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta+180)])

    @classmethod
    def path_NERCRswr(cls, ta=None, **kwargs):
        #M 103.071,296.601 C 104.4345,293.048 106.95475,289.50675 110.0605,286.85375 113.16625,284.20075 116.88323,281.49599 120.563,282.436 121.12975,282.58078 121.65424,283.2239 121.65605,283.80884 121.65831,284.53861 120.99858,285.30923 120.303,285.53 119.55389,285.76776 118.30468,285.59733 118.04358,284.85603 117.82057,284.22287 118.51807,283.25764 119.18671,283.19803 120.06332,283.11988 120.90891,284.26325 121.0463,285.07232

        #z0 = P(0, -0)
        #c0 = P(0.479216, 1.24874)
        #c1 = P(1.36498, 2.49334)
        #z1 = P(2.45653, 3.42577)
        #c2 = P(3.54808, 4.35819)
        #c3 = P(4.85444, 5.3088)
        #z2 = P(6.14774, 4.97843)
        #c4 = P(6.34693, 4.92754)
        #c5 = P(6.53126, 4.70151)
        #z3 = P(6.5319, 4.49593)
        #c6 = P(6.53269, 4.23945)
        #c7 = P(6.30083, 3.9686)
        #z4 = P(6.05636, 3.89101)
        #c8 = P(5.79307, 3.80745)
        #c9 = P(5.35403, 3.86735)
        #z5 = P(5.26226, 4.12789)
        #c10 = P(5.18388, 4.35042)
        #c11 = P(5.42903, 4.68966)
        #z6 = P(5.66403, 4.71061)
        #c12 = P(5.97212, 4.73807)
        #c13 = P(6.26931, 4.33622)
        z7 = P(6.3176, 4.05187)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.479216, 1.24874)
        #z1 = z0 + P(2.45653, 3.42577)
        #c1 = z1 + P(-1.09155, -0.932423)
        #c2 = z1 + P(1.09155, 0.932423)
        #z2 = z1 + P(3.69121, 1.55266)
        #c3 = z2 + P(-1.29329, 0.330376)
        #c4 = z2 + P(0.19919, -0.0508844)
        #z3 = z2 + P(0.384163, -0.482498)
        #c5 = z3 + P(-0.000636142, 0.205583)
        #c6 = z3 + P(0.000794299, -0.256485)
        #z4 = z3 + P(-0.475543, -0.604919)
        #c7 = z4 + P(0.244468, 0.0775918)
        #c8 = z4 + P(-0.263282, -0.0835631)
        #z5 = z4 + P(-0.794095, 0.236873)
        #c9 = z5 + P(0.0917662, -0.260537)
        #c10 = z5 + P(-0.0783791, 0.22253)
        #z6 = z5 + P(0.401764, 0.58272)
        #c11 = z6 + P(-0.235, -0.0209505)
        #c12 = z6 + P(0.308093, 0.0274666)
        #z7 = z6 + P(0.653571, -0.658738)
        #c13 = z7 + P(-0.0482871, 0.284356)

        z0 = P(0, -0)
        c0 = z0 + PP(1.33753, 69)
        z1 = z0 + PP(4.2155, 54)
        c1 = z1 + PP(1.43558, -139)
        c2 = z1 + PP(1.43558, 40)
        z2 = z1 + PP(4.00447, 22)
        c3 = z2 + PP(1.33482, 165)
        c4 = z2 + PP(0.205587, -14)
        z3 = z2 + PP(0.616754, -51)
        c5 = z3 + PP(0.205584, 90)
        c6 = z3 + PP(0.256486, -89)
        z4 = z3 + PP(0.769459, -128)
        c7 = z4 + PP(0.256486, 17)
        c8 = z4 + PP(0.276225, -162)
        z5 = z4 + PP(0.828672, 163)
        c9 = z5 + PP(0.276226, -70)
        c10 = z5 + PP(0.23593, 109)
        #z6 = z5 + PP(0.707798, 55)
        z6 = z7 - PP(0.92795, ta + 36)
        c11 = z6 + PP(0.235932, -174)
        #c12 = z6 + PP(0.309315, 5)
        #z7 = z6 + PP(0.92795, -45)
        #c13 = z7 + PP(0.288426, 99)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            knot(*z6),
            #controlcurve(c12, c13),
            curve(),
            endknot(*z7, angle=ta)])

    @classmethod
    def path_NERCRswl(cls, ta=None, **kwargs):
        #M152.777 296.601C155.505 289.495 162.859 282.436 170.269 282.436C171.05 282.436 171.578 282.987 171.222 284.229C171.046 284.888 170.432 285.384 170.009 285.53C169.544 285.699 168.677 285.488 168.843 284.772C169.101 283.736 169.679 283.216 169.862 282.482

        #z0 = P(0, -0)
        #c0 = P(0.958783, 2.49747)
        #c1 = P(3.54342, 4.97843)
        #z1 = P(6.14774, 4.97843)
        #c2 = P(6.42223, 4.97843)
        #c3 = P(6.6078, 4.78477)
        #z2 = P(6.48268, 4.34826)
        #c4 = P(6.42082, 4.11665)
        #c5 = P(6.20502, 3.94233)
        #z3 = P(6.05636, 3.89101)
        #c6 = P(5.89293, 3.83162)
        #c7 = P(5.58821, 3.90577)
        #z4 = P(5.64655, 4.15742)
        #c8 = P(5.73723, 4.52153)
        #c9 = P(5.94037, 4.70429)
        #z5 = P(6.00469, 4.96226)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.958783, 2.49747)
        #z1 = z0 + P(6.14774, 4.97843)
        #c1 = z1 + P(-2.60432, 0)
        #c2 = z1 + P(0.27449, 0)
        #z2 = z1 + P(0.334941, -0.630168)
        #c3 = z2 + P(0.12512, 0.436513)
        #c4 = z2 + P(-0.0618569, -0.231612)
        #z3 = z2 + P(-0.426321, -0.457249)
        #c5 = z3 + P(0.148668, 0.0513131)
        #c6 = z3 + P(-0.163429, -0.0593967)
        #z4 = z3 + P(-0.409802, 0.266407)
        #c7 = z4 + P(-0.0583423, -0.251645)
        #c8 = z4 + P(0.0906766, 0.364112)
        #z5 = z4 + P(0.358138, 0.804843)
        #c9 = z5 + P(-0.0643172, -0.257972)

        z0 = P(0, -0)
        c0 = z0 + PP(2.67519, 68)
        z1 = z0 + PP(7.91072, 39)
        c1 = z1 + PP(2.60432, 180)
        c2 = z1 + PP(0.27449, 0)
        z2 = z1 + PP(0.71365, -62)
        c3 = z2 + PP(0.454091, 74)
        c4 = z2 + PP(0.23973, -104)
        z3 = z2 + PP(0.625161, -132)
        c5 = z3 + PP(0.157274, 19)
        c6 = z3 + PP(0.173888, -160)
        z4 = z3 + PP(0.488785, 146)
        #z4 = z5 - PP(0.880928, ta + 349)
        c7 = z4 + PP(0.25832, -103)
        c8 = z4 + PP(0.375233, 76)
        z5 = z4 + PP(0.880928, 66)
        c9 = z5 + PP(0.265868, -103)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_NERCRNE(cls, ta=None, **kwargs):
        #M 47.3414,144.773 C 49.9094,138.723 59.3295,128.788 64.7683,130.661 65.6281,130.941 66.036,132.198 65.9572,133.099 65.9094,133.783 65.44897,134.56279 64.8073,134.804 64.395666,134.95874 63.675702,134.88254 63.5318,134.467 63.140508,133.33707 64.603207,132.39583 65.6906,131.602 66.513472,131.00128 67.352565,130.40055 68.344508,129.79983

        #z0 = P(0, -0)
        #c0 = P(0.905933, 2.13431)
        #c1 = P(4.22914, 5.63915)
        #z1 = P(6.14782, 4.9784)
        #c2 = P(6.45114, 4.87962)
        #c3 = P(6.59504, 4.43618)
        #z2 = P(6.56724, 4.11833)
        #c4 = P(6.55038, 3.87703)
        #c5 = P(6.38795, 3.60194)
        #z3 = P(6.16158, 3.51684)
        #c6 = P(6.01637, 3.46225)
        #c7 = P(5.76238, 3.48913)
        #z4 = P(5.71161, 3.63573)
        #c8 = P(5.57357, 4.03434)
        #c9 = P(6.08958, 4.36639)
        #z5 = P(6.47319, 4.64644)
        #c10 = P(6.76348, 4.85836)
        #c11 = P(7.05949, 5.07028)
        #z6 = P(7.40943, 5.2822)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.905933, 2.13431)
        #z1 = z0 + P(6.14782, 4.9784)
        #c1 = z1 + P(-1.91869, 0.660753)
        #c2 = z1 + P(0.303318, -0.0987778)
        #z2 = z1 + P(0.419418, -0.860072)
        #c3 = z2 + P(0.0277989, 0.317853)
        #c4 = z2 + P(-0.0168628, -0.2413)
        #z3 = z2 + P(-0.405659, -0.601486)
        #c5 = z3 + P(0.226367, 0.0850935)
        #c6 = z3 + P(-0.145215, -0.0545888)
        #z4 = z3 + P(-0.449968, 0.118886)
        #c7 = z4 + P(0.0507654, -0.146593)
        #c8 = z4 + P(-0.138039, 0.398614)
        #z5 = z4 + P(0.761577, 1.01071)
        #c9 = z5 + P(-0.383608, -0.280046)
        #c10 = z5 + P(0.290291, 0.211921)
        #z6 = z5 + P(0.93624, 0.635766)
        #c11 = z6 + P(-0.349935, -0.211921)

        z0 = P(0, -0)
        c0 = z0 + PP(2.31861, 67)
        z1 = z0 + PP(7.91076, 38)
        c1 = z1 + PP(2.02927, 160)
        c2 = z1 + PP(0.318997, -18)
        z2 = z1 + PP(0.956888, -64)
        c3 = z2 + PP(0.319066, 85)
        c4 = z2 + PP(0.241888, -93)
        z3 = z2 + PP(0.725496, -123)
        c5 = z3 + PP(0.241832, 20)
        c6 = z3 + PP(0.155137, -159)
        z4 = z3 + PP(0.465409, 165)
        c7 = z4 + PP(0.155135, -70)
        c8 = z4 + PP(0.421839, 109)
        z5 = z4 + PP(1.26552, 53)
        #z5 = z6 - PP(1.1317, ta + 362)
        c9 = z5 + PP(0.474953, -143)
        c10 = z5 + PP(0.359415, 36)
        z6 = z5 + PP(1.1317, 34)
        c11 = z6 + PP(0.409103, -148)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            controlcurve(c10, c11),
            #curve(),
            endknot(*z6)])

class CharYun(CharYu):
    def __init__(self, name='yun', kana='ゆん',
                 model='NER8CR1NE1F', head_type='NER',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_NERCRNE()]

class CharYamo(CharYun):
    def __init__(self, name='yamo', kana='やも',
                 model='NER8CR1NE1F', head_type='NER',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharYoi(CharYu):
    def __init__(self, name='yoi', kana='よい',
                 model='NER4CR1', head_type='NER',
                 tail_type='NERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)


    @classmethod
    def path_NERCR(cls, ta=None, **kwargs):
        #M 58.636058,54.353787 C 59.906253,50.483293 64.603644,46.891752 67.042798,47.231659 67.81563,47.339357 68.351898,47.783259 67.995998,49.024459 67.819298,49.683959 67.205298,50.179959 66.782798,50.325359 66.317198,50.494859 65.450698,50.284259 65.616098,49.567759 65.874298,48.532259 66.452698,48.011559 66.635598,47.277959

        #z0 = P(0, -0)
        #c0 = P(0.448097, 1.36542)
        #c1 = P(2.10523, 2.63244)
        #z1 = P(2.96571, 2.51253)
        #c2 = P(3.23835, 2.47454)
        #c3 = P(3.42753, 2.31794)
        #z2 = P(3.30198, 1.88007)
        #c4 = P(3.23964, 1.64741)
        #c5 = P(3.02304, 1.47243)
        #z3 = P(2.87399, 1.42114)
        #c6 = P(2.70974, 1.36134)
        #c7 = P(2.40405, 1.43564)
        #z4 = P(2.4624, 1.6884)
        #c8 = P(2.55349, 2.05371)
        #c9 = P(2.75754, 2.2374)
        z5 = P(2.82206, 2.49619)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.448097, 1.36542)
        #z1 = z0 + P(2.96571, 2.51253)
        #c1 = z1 + P(-0.860479, 0.119912)
        #c2 = z1 + P(0.272638, -0.0379935)
        #z2 = z1 + P(0.336268, -0.63246)
        #c3 = z2 + P(0.125554, 0.437868)
        #c4 = z2 + P(-0.0623358, -0.232657)
        #z3 = z2 + P(-0.42799, -0.458929)
        #c5 = z3 + P(0.149049, 0.0512939)
        #c6 = z3 + P(-0.164253, -0.0597958)
        #z4 = z3 + P(-0.411586, 0.267264)
        #c7 = z4 + P(-0.0583494, -0.252765)
        #c8 = z4 + P(0.0910872, 0.365301)
        #z5 = z4 + P(0.359657, 0.807791)
        #c9 = z5 + P(-0.0645231, -0.258798)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43707, 71)
        z1 = z0 + PP(3.88693, 40)
        c1 = z1 + PP(0.868794, 172)
        c2 = z1 + PP(0.275273, -7)
        z2 = z1 + PP(0.716297, -62)
        c3 = z2 + PP(0.455513, 74)
        c4 = z2 + PP(0.240863, -104)
        z3 = z2 + PP(0.627528, -133)
        c5 = z3 + PP(0.157628, 18)
        c6 = z3 + PP(0.174799, -159)
        z4 = z3 + PP(0.490748, 147)
        #z4 = z5 - PP(0.884239, ta + 348)
        c7 = z4 + PP(0.259413, -102)
        c8 = z4 + PP(0.376486, 75)
        z5 = z4 + PP(0.884239, 65)
        c9 = z5 + PP(0.26672, -103)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_NERCRe(cls, ta=None, **kwargs):
        #M 95.1023,108.352 C 96.4286,104.501 101.104,100.927 103.543,101.27 104.317,101.365 104.852,101.822 104.496,103.063 104.331,103.725 103.86285,104.2402 103.283,104.364 102.54387,104.52181 101.14989,104.23616 101.19434,103.48167 101.26392,102.30054 103.11385,102.49387 104.60367,102.49387

        #z0 = P(0, -0)
        #c0 = P(0.467889, 1.35855)
        #c1 = P(2.11727, 2.61937)
        #z1 = P(2.97769, 2.49837)
        #c2 = P(3.25074, 2.46486)
        #c3 = P(3.43948, 2.30364)
        #z2 = P(3.31389, 1.86584)
        #c4 = P(3.25568, 1.6323)
        #c5 = P(3.09053, 1.45055)
        #z3 = P(2.88597, 1.40688)
        #c6 = P(2.62522, 1.35121)
        #c7 = P(2.13346, 1.45198)
        #z4 = P(2.14914, 1.71814)
        #c8 = P(2.17368, 2.13482)
        #c9 = P(2.8263, 2.06662)
        z5 = P(3.35187, 2.06662)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467889, 1.35855)
        #z1 = z0 + P(2.97769, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.27305, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632531)
        #c3 = z2 + P(0.125589, 0.437797)
        #c4 = z2 + P(-0.0582083, -0.233539)
        #z3 = z2 + P(-0.427919, -0.458964)
        #c5 = z3 + P(0.204558, 0.0436739)
        #c6 = z3 + P(-0.260749, -0.0556719)
        #z4 = z3 + P(-0.736833, 0.311266)
        #c7 = z4 + P(-0.015681, -0.266167)
        #c8 = z4 + P(0.0245463, 0.416676)
        #z5 = z4 + P(1.20274, 0.348474)
        #c9 = z5 + P(-0.525575, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43686, 70)
        z1 = z0 + PP(3.88697, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275099, -6)
        z2 = z1 + PP(0.716326, -62)
        c3 = z2 + PP(0.455455, 73)
        c4 = z2 + PP(0.240684, -103)
        z3 = z2 + PP(0.627505, -132)
        c5 = z3 + PP(0.209169, 12)
        c6 = z3 + PP(0.266626, -167)
        #z4 = z3 + PP(0.799881, 157)
        z4 = z5 - PP(1.2522, ta + 16)
        c7 = z4 + PP(0.266629, -93)
        #c8 = z4 + PP(0.417399, 86)
        #z5 = z4 + PP(1.2522, 16)
        #c9 = z5 + PP(0.525575, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRer(cls, ta=None, **kwargs):
        #M 154.202,108.352 C 155.528,104.501 160.203,100.927 162.642,101.27 163.417,101.365 163.951,101.822 163.595,103.063 163.43,103.725 162.807,104.226 162.382,104.364 161.92,104.541 161.063,104.325 161.216,103.606 161.492,102.575 162.4865,101.92016 163.27901,101.47855

        #z0 = P(0, -0)
        #c0 = P(0.467783, 1.35855)
        #c1 = P(2.11702, 2.61937)
        #z1 = P(2.97744, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.43923, 2.30364)
        #z2 = P(3.31364, 1.86584)
        #c4 = P(3.25543, 1.6323)
        #c5 = P(3.03565, 1.45556)
        #z3 = P(2.88572, 1.40688)
        #c6 = P(2.72274, 1.34444)
        #c7 = P(2.42041, 1.42064)
        #z4 = P(2.47438, 1.67428)
        #c8 = P(2.57175, 2.038)
        #c9 = P(2.92259, 2.26901)
        z5 = P(3.20217, 2.4248)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467783, 1.35855)
        #z1 = z0 + P(2.97744, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.273403, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632531)
        #c3 = z2 + P(0.125589, 0.437797)
        #c4 = z2 + P(-0.0582083, -0.233539)
        #z3 = z2 + P(-0.427919, -0.458964)
        #c5 = z3 + P(0.149931, 0.0486833)
        #c6 = z3 + P(-0.162983, -0.0624417)
        #z4 = z3 + P(-0.411339, 0.267406)
        #c7 = z4 + P(-0.053975, -0.253647)
        #c8 = z4 + P(0.0973667, 0.363714)
        #z5 = z4 + P(0.727784, 0.750517)
        #c9 = z5 + P(-0.27958, -0.15579)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43683, 71)
        z1 = z0 + PP(3.88678, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275449, -6)
        z2 = z1 + PP(0.716326, -62)
        c3 = z2 + PP(0.455455, 73)
        c4 = z2 + PP(0.240684, -103)
        z3 = z2 + PP(0.627505, -132)
        c5 = z3 + PP(0.157636, 17)
        c6 = z3 + PP(0.174535, -159)
        #z4 = z3 + PP(0.490617, 146)
        z4 = z5 - PP(1.04544, ta + 375)
        c7 = z4 + PP(0.259326, -102)
        #c8 = z4 + PP(0.376521, 75)
        #z5 = z4 + PP(1.04544, 45)
        #c9 = z5 + PP(0.320055, -150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRel(cls, ta=None, **kwargs):
        #M 47.3414,108.352 C 48.6676,104.501 53.341563,100.93738 55.7817,101.27 56.554855,101.37539 57.0909,101.822 56.735,103.063 56.5698,103.725 55.923304,104.63452 55.211749,104.5707 54.290492,104.48807 53.096319,103.06235 53.618446,102.29886 54.222235,101.41595 55.289753,102.22951 56.735,103.063

        #z0 = P(0, -0)
        #c0 = P(0.467854, 1.35855)
        #c1 = P(2.11672, 2.61571)
        #z1 = P(2.97755, 2.49837)
        #c2 = P(3.2503, 2.46119)
        #c3 = P(3.43941, 2.30364)
        #z2 = P(3.31385, 1.86584)
        #c4 = P(3.25557, 1.6323)
        #c5 = P(3.02751, 1.31144)
        #z3 = P(2.77648, 1.33396)
        #c6 = P(2.45149, 1.36311)
        #c7 = P(2.03021, 1.86607)
        #z4 = P(2.2144, 2.13541)
        #c8 = P(2.42741, 2.44688)
        #c9 = P(2.804, 2.15988)
        z5 = P(3.31385, 1.86584)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467854, 1.35855)
        #z1 = z0 + P(2.97755, 2.49837)
        #c1 = z1 + P(-0.860826, 0.117341)
        #c2 = z1 + P(0.272752, -0.0371792)
        #z2 = z1 + P(0.336303, -0.632531)
        #c3 = z2 + P(0.125554, 0.437797)
        #c4 = z2 + P(-0.0582789, -0.233539)
        #z3 = z2 + P(-0.537369, -0.531883)
        #c5 = z3 + P(0.251021, -0.0225143)
        #c6 = z3 + P(-0.324999, 0.02915)
        #z4 = z3 + P(-0.562082, 0.801455)
        #c7 = z4 + P(-0.184195, -0.269342)
        #c8 = z4 + P(0.213003, 0.311471)
        #z5 = z4 + P(1.09945, -0.269572)
        #c9 = z5 + P(-0.509851, 0.294037)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43685, 70)
        z1 = z0 + PP(3.88686, 39)
        c1 = z1 + PP(0.868787, 172)
        c2 = z1 + PP(0.275274, -7)
        z2 = z1 + PP(0.716376, -62)
        c3 = z2 + PP(0.455445, 73)
        c4 = z2 + PP(0.240701, -104)
        z3 = z2 + PP(0.756085, -135)
        c5 = z3 + PP(0.252028, -5)
        c6 = z3 + PP(0.326304, 174)
        #z4 = z3 + PP(0.97891, 125)
        z4 = z5 - PP(1.13202, ta + 17)
        c7 = z4 + PP(0.326302, -124)
        #c8 = z4 + PP(0.377339, 55)
        #z5 = z4 + PP(1.13202, -13)
        #c9 = z5 + PP(0.588562, 150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRne(cls, ta=None, **kwargs):
        #M 356.209,108.352 C 357.536,104.501 362.211,100.927 364.65,101.27 365.424,101.365 365.78888,102.41218 365.603,103.063 365.47121,103.52443 364.83041,103.70205 364.35787,103.78564 363.92086,103.86294 363.18509,103.97468 363.04698,103.55292 362.75862,102.6723 364.38479,101.94948 364.96654,101.54216

        #z0 = P(0, -0)
        #c0 = P(0.468136, 1.35855)
        #c1 = P(2.11737, 2.61937)
        #z1 = P(2.9778, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.37957, 2.09544)
        #z2 = P(3.31399, 1.86584)
        #c4 = P(3.2675, 1.70306)
        #c5 = P(3.04144, 1.6404)
        #z3 = P(2.87474, 1.61091)
        #c6 = P(2.72057, 1.58364)
        #c7 = P(2.46101, 1.54422)
        #z4 = P(2.41229, 1.69301)
        #c8 = P(2.31056, 2.00367)
        #c9 = P(2.88424, 2.25867)
        z5 = P(3.08947, 2.40236)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.468136, 1.35855)
        #z1 = z0 + P(2.9778, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.27305, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632531)
        #c3 = z2 + P(0.0655743, 0.229595)
        #c4 = z2 + P(-0.0464926, -0.162782)
        #z3 = z2 + P(-0.439254, -0.254931)
        #c5 = z3 + P(0.166702, 0.0294887)
        #c6 = z3 + P(-0.154167, -0.0272697)
        #z4 = z3 + P(-0.462453, 0.0820984)
        #c7 = z4 + P(0.0487221, -0.148788)
        #c8 = z4 + P(-0.101727, 0.310663)
        #z5 = z4 + P(0.677178, 0.709351)
        #c9 = z5 + P(-0.205228, -0.143693)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43694, 70)
        z1 = z0 + PP(3.88705, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275099, -6)
        z2 = z1 + PP(0.716326, -62)
        c3 = z2 + PP(0.238776, 74)
        c4 = z2 + PP(0.169292, -105)
        z3 = z2 + PP(0.507872, -149)
        c5 = z3 + PP(0.16929, 10)
        c6 = z3 + PP(0.156561, -169)
        #z4 = z3 + PP(0.469684, 169)
        z4 = z5 - PP(0.980688, ta + 371)
        c7 = z4 + PP(0.156562, -71)
        #c8 = z4 + PP(0.326894, 108)
        #z5 = z4 + PP(0.980688, 46)
        #c9 = z5 + PP(0.250532, -145)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRner(cls, ta=None, **kwargs):
        #M 401.92,108.352 C 403.246,104.501 407.921,100.927 410.36,101.27 411.135,101.365 411.4598,102.40227 411.313,103.063 411.1936,103.60038 410.48589,104.30162 409.99333,104.05583 409.18151,103.65074 409.7421,102.04752 409.993,101.334

        #z0 = P(0, -0)
        #c0 = P(0.467783, 1.35855)
        #c1 = P(2.11702, 2.61937)
        #z1 = P(2.97744, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.36543, 2.09893)
        #z2 = P(3.31364, 1.86584)
        #c4 = P(3.27152, 1.67627)
        #c5 = P(3.02186, 1.42888)
        #z3 = P(2.84809, 1.51559)
        #c6 = P(2.5617, 1.6585)
        #c7 = P(2.75946, 2.22408)
        z4 = P(2.84797, 2.47579)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467783, 1.35855)
        #z1 = z0 + P(2.97744, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.273403, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632531)
        #c3 = z2 + P(0.0517878, 0.233091)
        #c4 = z2 + P(-0.0421217, -0.189576)
        #z3 = z2 + P(-0.46555, -0.350248)
        #c5 = z3 + P(0.173764, -0.0867092)
        #c6 = z3 + P(-0.286392, 0.142907)
        #z4 = z3 + P(-0.000116417, 0.960201)
        #c7 = z4 + P(-0.0885119, -0.251714)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43683, 71)
        z1 = z0 + PP(3.88678, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275449, -6)
        z2 = z1 + PP(0.716326, -62)
        c3 = z2 + PP(0.238775, 77)
        c4 = z2 + PP(0.194199, -102)
        #z3 = z2 + PP(0.58259, -143)
        z3 = z4 - PP(0.960201, ta + 379)
        c5 = z3 + PP(0.194197, -26)
        #c6 = z3 + PP(0.320067, 153)
        #z4 = z3 + PP(0.960201, 90)
        #c7 = z4 + PP(0.266823, -109)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NERCRnel(cls, ta=None, **kwargs):
        #M 311.23,108.352 C 312.556,104.501 317.231,100.927 319.67,101.27 320.445,101.365 320.79823,102.40923 320.623,103.063 320.46167,103.66491 319.6592,104.09778 319.03761,104.05368 318.42228,104.01002 317.54738,103.47353 317.62235,102.86122 317.74595,101.85169 319.57776,101.67437 320.3611,101.51617

        #z0 = P(0, -0)
        #c0 = P(0.467783, 1.35855)
        #c1 = P(2.11702, 2.61937)
        #z1 = P(2.97744, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.37546, 2.09648)
        #z2 = P(3.31364, 1.86584)
        #c4 = P(3.25673, 1.6535)
        #c5 = P(2.97363, 1.50079)
        #z3 = P(2.75435, 1.51635)
        #c6 = P(2.53728, 1.53175)
        #c7 = P(2.22863, 1.72102)
        #z4 = P(2.25508, 1.93703)
        #c8 = P(2.29868, 2.29316)
        #c9 = P(2.9449, 2.35572)
        z5 = P(3.22125, 2.41153)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467783, 1.35855)
        #z1 = z0 + P(2.97744, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.273403, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632531)
        #c3 = z2 + P(0.0618172, 0.230636)
        #c4 = z2 + P(-0.0569136, -0.21234)
        #z3 = z2 + P(-0.55929, -0.34949)
        #c5 = z3 + P(0.219283, -0.0155575)
        #c6 = z3 + P(-0.217075, 0.0154023)
        #z4 = z3 + P(-0.499272, 0.420673)
        #c7 = z4 + P(-0.0264478, -0.216009)
        #c8 = z4 + P(0.0436033, 0.35614)
        #z5 = z4 + P(0.96617, 0.474504)
        #c9 = z5 + P(-0.276345, -0.0558094)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43683, 71)
        z1 = z0 + PP(3.88678, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275449, -6)
        z2 = z1 + PP(0.716326, -62)
        c3 = z2 + PP(0.238776, 74)
        c4 = z2 + PP(0.219835, -105)
        z3 = z2 + PP(0.659507, -147)
        c5 = z3 + PP(0.219834, -4)
        c6 = z3 + PP(0.21762, 175)
        #z4 = z3 + PP(0.65287, 139)
        z4 = z5 - PP(1.0764, ta + 374)
        c7 = z4 + PP(0.217622, -96)
        #c8 = z4 + PP(0.358799, 83)
        #z5 = z4 + PP(1.0764, 26)
        #c9 = z5 + PP(0.281924, -168)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRs(cls, ta=None, **kwargs):
        #M 238.385,108.352 C 239.711,104.501 244.387,100.927 246.825,101.27 247.6,101.365 247.86738,102.39179 247.779,103.063 247.70156,103.65107 247.14674,104.47975 246.565,104.364 245.53199,104.15846 245.45776,102.51362 245.45776,101.40456

        #z0 = P(0, -0)
        #c0 = P(0.467783, 1.35855)
        #c1 = P(2.11737, 2.61937)
        #z1 = P(2.97744, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.34517, 2.10263)
        #z2 = P(3.31399, 1.86584)
        #c4 = P(3.28668, 1.65838)
        #c5 = P(3.09095, 1.36604)
        #z3 = P(2.88572, 1.40688)
        #c6 = P(2.5213, 1.47939)
        #c7 = P(2.49511, 2.05965)
        z4 = P(2.49511, 2.4509)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467783, 1.35855)
        #z1 = z0 + P(2.97744, 2.49837)
        #c1 = z1 + P(-0.860072, 0.121003)
        #c2 = z1 + P(0.273403, -0.0335139)
        #z2 = z1 + P(0.33655, -0.632531)
        #c3 = z2 + P(0.0311785, 0.236788)
        #c4 = z2 + P(-0.0273191, -0.207458)
        #z3 = z2 + P(-0.428272, -0.458964)
        #c5 = z3 + P(0.205225, -0.040834)
        #c6 = z3 + P(-0.364423, 0.0725099)
        #z4 = z3 + P(-0.39061, 1.04402)
        #c7 = z4 + P(0, -0.391252)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43683, 71)
        z1 = z0 + PP(3.88678, 39)
        c1 = z1 + PP(0.868542, 171)
        c2 = z1 + PP(0.275449, -6)
        z2 = z1 + PP(0.716492, -61)
        c3 = z2 + PP(0.238832, 82)
        c4 = z2 + PP(0.209249, -97)
        z3 = z2 + PP(0.627746, -133)
        #z3 = z4 - PP(1.1147, ta + 380)
        c5 = z3 + PP(0.209248, -11)
        c6 = z3 + PP(0.371567, 168)
        z4 = z3 + PP(1.1147, 110)
        c7 = z4 + PP(0.391252, -90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_NERCRsl(cls, ta=None, **kwargs):
        #M274.807 108.352C276.134 104.501 280.809 100.927 283.248 101.27C284.022 101.365 284.557 101.822 284.201 103.063C284.036 103.725 283.413 104.226 282.988 104.364C282.525 104.541 281.668 104.325 281.821 103.606C282.097 102.575 282.71 102.071 282.88 101.334

        #z0 = P(0, -0)
        #c0 = P(0.468136, 1.35855)
        #c1 = P(2.11737, 2.61937)
        #z1 = P(2.9778, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.43958, 2.30364)
        #z2 = P(3.31399, 1.86584)
        #c4 = P(3.25579, 1.6323)
        #c5 = P(3.03601, 1.45556)
        #z3 = P(2.88607, 1.40688)
        #c6 = P(2.72274, 1.34444)
        #c7 = P(2.42041, 1.42064)
        #z4 = P(2.47438, 1.67428)
        #c8 = P(2.57175, 2.038)
        #c9 = P(2.788, 2.2158)
        z5 = P(2.84797, 2.47579)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.468136, 1.35855)
        #z1 = z0 + P(2.9778, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.27305, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632531)
        #c3 = z2 + P(0.125589, 0.437797)
        #c4 = z2 + P(-0.0582083, -0.233539)
        #z3 = z2 + P(-0.427919, -0.458964)
        #c5 = z3 + P(0.149931, 0.0486833)
        #c6 = z3 + P(-0.163336, -0.0624417)
        #z4 = z3 + P(-0.411692, 0.267406)
        #c7 = z4 + P(-0.053975, -0.253647)
        #c8 = z4 + P(0.0973667, 0.363714)
        #z5 = z4 + P(0.373592, 0.801511)
        #c9 = z5 + P(-0.0599722, -0.259997)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43694, 70)
        z1 = z0 + PP(3.88705, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275099, -6)
        z2 = z1 + PP(0.716326, -62)
        c3 = z2 + PP(0.455455, 73)
        c4 = z2 + PP(0.240684, -103)
        z3 = z2 + PP(0.627505, -132)
        c5 = z3 + PP(0.157636, 17)
        c6 = z3 + PP(0.174865, -159)
        z4 = z3 + PP(0.490913, 146)
        #z4 = z5 - PP(0.884302, ta + 347)
        c7 = z4 + PP(0.259326, -102)
        c8 = z4 + PP(0.376521, 75)
        z5 = z4 + PP(0.884302, 65)
        c9 = z5 + PP(0.266824, -102)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_NERCRsr(cls, ta=None, **kwargs):
        #M 201.963,108.352 C 203.289,104.501 207.964,100.927 210.403,101.27 211.178,101.365 211.712,101.822 211.356,103.063 211.191,103.725 210.68938,104.13373 210.143,104.364 208.90262,104.88676 207.71455,103.58387 208.62491,102.46496 209.19122,101.76891 209.9365,102.22993 210.98244,103.76449

        #z0 = P(0, -0)
        #c0 = P(0.467783, 1.35855)
        #c1 = P(2.11702, 2.61937)
        #z1 = P(2.97744, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.43923, 2.30364)
        #z2 = P(3.31364, 1.86584)
        #c4 = P(3.25543, 1.6323)
        #c5 = P(3.07847, 1.48811)
        #z3 = P(2.88572, 1.40688)
        #c6 = P(2.44814, 1.22246)
        #c7 = P(2.02902, 1.68209)
        #z4 = P(2.35017, 2.07682)
        #c8 = P(2.54996, 2.32237)
        #c9 = P(2.81287, 2.15973)
        z5 = P(3.18186, 1.61837)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467783, 1.35855)
        #z1 = z0 + P(2.97744, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.273403, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632531)
        #c3 = z2 + P(0.125589, 0.437797)
        #c4 = z2 + P(-0.0582083, -0.233539)
        #z3 = z2 + P(-0.427919, -0.458964)
        #c5 = z3 + P(0.192751, 0.0812341)
        #c6 = z3 + P(-0.437578, -0.184418)
        #z4 = z3 + P(-0.535548, 0.669939)
        #c7 = z4 + P(-0.321155, -0.394727)
        #c8 = z4 + P(0.199782, 0.245551)
        #z5 = z4 + P(0.831684, -0.458445)
        #c9 = z5 + P(-0.368984, 0.541359)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43683, 71)
        z1 = z0 + PP(3.88678, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275449, -6)
        z2 = z1 + PP(0.716326, -62)
        c3 = z2 + PP(0.455455, 73)
        c4 = z2 + PP(0.240684, -103)
        z3 = z2 + PP(0.627505, -132)
        c5 = z3 + PP(0.209169, 22)
        c6 = z3 + PP(0.474853, -157)
        #z4 = z3 + PP(0.857689, 128)
        z4 = z5 - PP(0.949669, ta + 28)
        c7 = z4 + PP(0.508871, -129)
        #c8 = z4 + PP(0.316556, 50)
        #z5 = z4 + PP(0.949669, -28)
        #c9 = z5 + PP(0.655148, 124)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRse(cls, ta=None, **kwargs):
        #M 154.168,175.399 C 155.494,171.547 160.17,167.974 162.609,168.317 163.383,168.412 163.918,168.868 163.562,170.109 163.397,170.772 162.89059,171.40368 162.28233,171.41 161.84245,171.41457 161.42006,170.92068 161.33755,170.48859 161.23326,169.94241 161.46926,169.05176 162.01863,168.96581 162.70062,168.85911 163.12184,170.02403 163.40108,170.50764

        #z0 = P(0, -0)
        #c0 = P(0.467783, 1.3589)
        #c1 = P(2.11737, 2.61938)
        #z1 = P(2.9778, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.43958, 2.30399)
        #z2 = P(3.31399, 1.86619)
        #c4 = P(3.25579, 1.6323)
        #c5 = P(3.07714, 1.40946)
        #z3 = P(2.86256, 1.40723)
        #c6 = P(2.70738, 1.40562)
        #c7 = P(2.55837, 1.57985)
        #z4 = P(2.52926, 1.73228)
        #c8 = P(2.49247, 1.92496)
        #c9 = P(2.57572, 2.23917)
        #z5 = P(2.76953, 2.26949)
        #c10 = P(3.01012, 2.30713)
        #c11 = P(3.15872, 1.89617)
        z6 = P(3.25723, 1.72556)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467783, 1.3589)
        #z1 = z0 + P(2.9778, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.27305, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632178)
        #c3 = z2 + P(0.125589, 0.437797)
        #c4 = z2 + P(-0.0582083, -0.233892)
        #z3 = z2 + P(-0.451439, -0.458964)
        #c5 = z3 + P(0.214581, 0.00222956)
        #c6 = z3 + P(-0.15518, -0.00161219)
        #z4 = z3 + P(-0.333297, 0.325053)
        #c7 = z4 + P(0.0291077, -0.152432)
        #c8 = z4 + P(-0.0367912, 0.19268)
        #z5 = z4 + P(0.24027, 0.537203)
        #c9 = z5 + P(-0.193806, -0.0303212)
        #c10 = z5 + P(0.240591, 0.0376414)
        #z6 = z5 + P(0.487698, -0.543923)
        #c11 = z6 + P(-0.0985097, 0.170607)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43716, 71)
        z1 = z0 + PP(3.88705, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275099, -6)
        z2 = z1 + PP(0.716015, -61)
        c3 = z2 + PP(0.455455, 73)
        c4 = z2 + PP(0.241026, -103)
        z3 = z2 + PP(0.643774, -134)
        c5 = z3 + PP(0.214592, 0)
        c6 = z3 + PP(0.155188, -179)
        z4 = z3 + PP(0.465561, 135)
        c7 = z4 + PP(0.155186, -79)
        c8 = z4 + PP(0.196161, 100)
        #z5 = z4 + PP(0.588487, 65)
        z5 = z6 - PP(0.730549, ta + 12)
        c9 = z5 + PP(0.196163, -171)
        #c10 = z5 + PP(0.243518, 8)
        #z6 = z5 + PP(0.730549, -48)
        #c11 = z6 + PP(0.197005, 120)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_NERCRser(cls, ta=None, **kwargs):
        #M 106.407,175.399 C 107.734,171.547 112.409,167.974 114.848,168.317 115.622,168.412 116.14175,168.86373 115.801,170.109 115.62068,170.768 115.12903,171.20823 114.588,171.18899 113.99354,171.16786 113.13466,170.4679 113.34286,169.91069 113.63981,169.11598 115.03743,169.09233 115.87914,169.69878

        #z0 = P(0, -0)
        #c0 = P(0.468136, 1.3589)
        #c1 = P(2.11737, 2.61938)
        #z1 = P(2.9778, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.4342, 2.3055)
        #z2 = P(3.31399, 1.86619)
        #c4 = P(3.25038, 1.63371)
        #c5 = P(3.07694, 1.47841)
        #z3 = P(2.88607, 1.4852)
        #c6 = P(2.67636, 1.49265)
        #c7 = P(2.37337, 1.73958)
        #z4 = P(2.44682, 1.93615)
        #c8 = P(2.55157, 2.21651)
        #c9 = P(3.04462, 2.22485)
        z5 = P(3.34156, 2.01091)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.468136, 1.3589)
        #z1 = z0 + P(2.9778, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.27305, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632178)
        #c3 = z2 + P(0.120209, 0.439304)
        #c4 = z2 + P(-0.0636129, -0.232481)
        #z3 = z2 + P(-0.427919, -0.380996)
        #c5 = z3 + P(0.190863, -0.00678744)
        #c6 = z3 + P(-0.209712, 0.00745419)
        #z4 = z3 + P(-0.439258, 0.450956)
        #c7 = z4 + P(-0.0734483, -0.196571)
        #c8 = z4 + P(0.104757, 0.280356)
        #z5 = z4 + P(0.894743, 0.0747571)
        #c9 = z5 + P(-0.296937, 0.213942)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43728, 70)
        z1 = z0 + PP(3.88705, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275099, -6)
        z2 = z1 + PP(0.716015, -61)
        c3 = z2 + PP(0.455453, 74)
        c4 = z2 + PP(0.241027, -105)
        z3 = z2 + PP(0.572951, -138)
        c5 = z3 + PP(0.190984, -2)
        c6 = z3 + PP(0.209845, 177)
        #z4 = z3 + PP(0.62953, 134)
        z4 = z5 - PP(0.897861, ta + 40)
        c7 = z4 + PP(0.209845, -110)
        #c8 = z4 + PP(0.299289, 69)
        #z5 = z4 + PP(0.897861, 4)
        #c9 = z5 + PP(0.365982, 144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_NERCRsel(cls, ta=None, **kwargs):
        #M 196.26,175.399 C 197.586,171.547 202.261,167.974 204.7,168.317 205.475,168.412 205.7554,169.44024 205.653,170.109 205.55208,170.7681 204.87728,171.66632 204.22832,171.51317 203.19252,171.26872 203.15063,169.57156 203.19634,168.49177

        #z0 = P(0, -0)
        #c0 = P(0.467783, 1.3589)
        #c1 = P(2.11702, 2.61938)
        #z1 = P(2.97744, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.34977, 2.10212)
        #z2 = P(3.31364, 1.86619)
        #c4 = P(3.27804, 1.63368)
        #c5 = P(3.03998, 1.31681)
        #z3 = P(2.81105, 1.37083)
        #c6 = P(2.44564, 1.45707)
        #c7 = P(2.43086, 2.05579)
        z4 = P(2.44699, 2.43672)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467783, 1.3589)
        #z1 = z0 + P(2.97744, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.273403, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632178)
        #c3 = z2 + P(0.0361244, 0.235924)
        #c4 = z2 + P(-0.0356023, -0.232516)
        #z3 = z2 + P(-0.502595, -0.49536)
        #c5 = z3 + P(0.228939, -0.0540279)
        #c6 = z3 + P(-0.365407, 0.0862365)
        #z4 = z3 + P(-0.36406, 1.06588)
        #c7 = z4 + P(-0.0161255, -0.380926)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43716, 71)
        z1 = z0 + PP(3.88678, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275449, -6)
        z2 = z1 + PP(0.716015, -61)
        c3 = z2 + PP(0.238673, 81)
        c4 = z2 + PP(0.235226, -98)
        z3 = z2 + PP(0.70568, -135)
        #z3 = z4 - PP(1.12634, ta + 380)
        c5 = z3 + PP(0.235227, -13)
        c6 = z3 + PP(0.375445, 166)
        z4 = z3 + PP(1.12634, 108)
        c7 = z4 + PP(0.381267, -92)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_NERCRsw(cls, ta=None, **kwargs):
        #M 47.3414,175.399 C 48.6676,171.547 53.343,167.974 55.7817,168.317 56.5562,168.412 57.0909,168.868 56.735,170.109 56.5698,170.772 55.9468,171.272 55.5218,171.41 55.0593,171.588 54.472423,171.40346 54.647479,170.68953 54.901665,169.65289 55.189598,169.02666 55.4145,168.28966

        #z0 = P(0, -0)
        #c0 = P(0.467854, 1.3589)
        #c1 = P(2.11723, 2.61938)
        #z1 = P(2.97755, 2.49837)
        #c2 = P(3.25078, 2.46486)
        #c3 = P(3.43941, 2.30399)
        #z2 = P(3.31385, 1.86619)
        #c4 = P(3.25557, 1.6323)
        #c5 = P(3.03579, 1.45591)
        #z3 = P(2.88586, 1.40723)
        #c6 = P(2.7227, 1.34444)
        #c7 = P(2.51567, 1.40954)
        #z4 = P(2.57742, 1.6614)
        #c8 = P(2.66709, 2.0271)
        #c9 = P(2.76867, 2.24802)
        z5 = P(2.84801, 2.50802)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467854, 1.3589)
        #z1 = z0 + P(2.97755, 2.49837)
        #c1 = z1 + P(-0.860319, 0.121003)
        #c2 = z1 + P(0.273226, -0.0335139)
        #z2 = z1 + P(0.336303, -0.632178)
        #c3 = z2 + P(0.125554, 0.437797)
        #c4 = z2 + P(-0.0582789, -0.233892)
        #z3 = z2 + P(-0.42799, -0.458964)
        #c5 = z3 + P(0.149931, 0.0486833)
        #c6 = z3 + P(-0.16316, -0.0627944)
        #z4 = z3 + P(-0.308441, 0.254166)
        #c7 = z4 + P(-0.0617559, -0.251859)
        #c8 = z4 + P(0.0896712, 0.365704)
        #z5 = z4 + P(0.270588, 0.846621)
        #c9 = z5 + P(-0.0793404, -0.259997)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43718, 71)
        z1 = z0 + PP(3.88686, 39)
        c1 = z1 + PP(0.868787, 171)
        c2 = z1 + PP(0.275274, -6)
        z2 = z1 + PP(0.716065, -61)
        c3 = z2 + PP(0.455445, 73)
        c4 = z2 + PP(0.241043, -103)
        z3 = z2 + PP(0.627553, -132)
        c5 = z3 + PP(0.157636, 17)
        c6 = z3 + PP(0.174826, -158)
        z4 = z3 + PP(0.39967, 140)
        #z4 = z5 - PP(0.888811, ta + 358)
        c7 = z4 + PP(0.259319, -103)
        c8 = z4 + PP(0.376537, 76)
        z5 = z4 + PP(0.888811, 72)
        c9 = z5 + PP(0.271834, -106)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_NERCRswr(cls, ta=None, **kwargs):
        #M 79.8857,175.399 C 81.212,171.547 85.8873,167.974 88.3261,168.317 89.1005,168.412 89.6352,168.868 89.2793,170.109 89.1141,170.772 88.655574,171.34576 88.0661,171.41 87.606278,171.46011 86.960811,171.08149 86.923364,170.6228 86.884622,170.14824 87.131107,169.26427 87.660768,169.20355 88.327189,169.12716 88.863048,170.18323 88.968598,170.73298

        #z0 = P(0, -0)
        #c0 = P(0.467889, 1.3589)
        #c1 = P(2.11723, 2.61938)
        #z1 = P(2.97759, 2.49837)
        #c2 = P(3.25078, 2.46486)
        #c3 = P(3.43941, 2.30399)
        #z2 = P(3.31385, 1.86619)
        #c4 = P(3.25557, 1.6323)
        #c5 = P(3.09382, 1.42989)
        #z3 = P(2.88586, 1.40723)
        #c6 = P(2.72365, 1.38955)
        #c7 = P(2.49594, 1.52312)
        #z4 = P(2.48273, 1.68494)
        #c8 = P(2.46906, 1.85235)
        #c9 = P(2.55602, 2.1642)
        #z5 = P(2.74287, 2.18562)
        #c10 = P(2.97797, 2.21257)
        #c11 = P(3.16701, 1.84001)
        z6 = P(3.20424, 1.64607)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467889, 1.3589)
        #z1 = z0 + P(2.97759, 2.49837)
        #c1 = z1 + P(-0.860354, 0.121003)
        #c2 = z1 + P(0.273191, -0.0335139)
        #z2 = z1 + P(0.336268, -0.632178)
        #c3 = z2 + P(0.125554, 0.437797)
        #c4 = z2 + P(-0.0582789, -0.233892)
        #z3 = z2 + P(-0.42799, -0.458964)
        #c5 = z3 + P(0.207953, 0.0226624)
        #c6 = z3 + P(-0.162215, -0.0176777)
        #z4 = z3 + P(-0.403132, 0.277707)
        #c7 = z4 + P(0.0132105, -0.161816)
        #c8 = z4 + P(-0.0136673, 0.167414)
        #z5 = z4 + P(0.26014, 0.50068)
        #c9 = z5 + P(-0.186853, -0.0214207)
        #c10 = z5 + P(0.235099, 0.0269487)
        #z6 = z5 + P(0.461373, -0.539549)
        #c11 = z6 + P(-0.0372357, 0.19394)

        z0 = P(0, -0)
        c0 = z0 + PP(1.4372, 71)
        z1 = z0 + PP(3.88689, 39)
        c1 = z1 + PP(0.868822, 171)
        c2 = z1 + PP(0.275239, -6)
        z2 = z1 + PP(0.716048, -61)
        c3 = z2 + PP(0.455445, 73)
        c4 = z2 + PP(0.241043, -103)
        z3 = z2 + PP(0.627553, -132)
        c5 = z3 + PP(0.209185, 6)
        c6 = z3 + PP(0.163175, -173)
        z4 = z3 + PP(0.489527, 145)
        c7 = z4 + PP(0.162354, -85)
        c8 = z4 + PP(0.167971, 94)
        #z5 = z4 + PP(0.564228, 62)
        z5 = z6 - PP(0.709914, ta + 31)
        c9 = z5 + PP(0.188076, -173)
        #c10 = z5 + PP(0.236638, 6)
        #z6 = z5 + PP(0.709914, -49)
        #c11 = z6 + PP(0.197482, 100)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            knot(*z5),
            #controlcurve(c10, c11),
            curve(),
            endknot(*z6, angle=ta)])

    @classmethod
    def path_NERCRswl(cls, ta=None, **kwargs):
        #M455.714 108.352C457.04 104.501 461.715 100.927 464.154 101.27C464.929 101.365 465.463 101.822 465.107 103.063C464.942 103.725 464.319 104.226 463.894 104.364C463.432 104.541 462.575 104.325 462.728 103.606C463.004 102.575 463.617 102.071 463.787 101.334

        #z0 = P(0, -0)
        #c0 = P(0.467783, 1.35855)
        #c1 = P(2.11702, 2.61937)
        #z1 = P(2.97744, 2.49837)
        #c2 = P(3.25085, 2.46486)
        #c3 = P(3.43923, 2.30364)
        #z2 = P(3.31364, 1.86584)
        #c4 = P(3.25543, 1.6323)
        #c5 = P(3.03565, 1.45556)
        #z3 = P(2.88572, 1.40688)
        #c6 = P(2.72274, 1.34444)
        #c7 = P(2.42041, 1.42064)
        #z4 = P(2.47438, 1.67428)
        #c8 = P(2.57175, 2.038)
        #c9 = P(2.788, 2.2158)
        z5 = P(2.84797, 2.47579)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.467783, 1.35855)
        #z1 = z0 + P(2.97744, 2.49837)
        #c1 = z1 + P(-0.860425, 0.121003)
        #c2 = z1 + P(0.273403, -0.0335139)
        #z2 = z1 + P(0.336197, -0.632531)
        #c3 = z2 + P(0.125589, 0.437797)
        #c4 = z2 + P(-0.0582083, -0.233539)
        #z3 = z2 + P(-0.427919, -0.458964)
        #c5 = z3 + P(0.149931, 0.0486833)
        #c6 = z3 + P(-0.162983, -0.0624417)
        #z4 = z3 + P(-0.411339, 0.267406)
        #c7 = z4 + P(-0.053975, -0.253647)
        #c8 = z4 + P(0.0973667, 0.363714)
        #z5 = z4 + P(0.373592, 0.801511)
        #c9 = z5 + P(-0.0599722, -0.259997)

        z0 = P(0, -0)
        c0 = z0 + PP(1.43683, 71)
        z1 = z0 + PP(3.88678, 39)
        c1 = z1 + PP(0.868892, 171)
        c2 = z1 + PP(0.275449, -6)
        z2 = z1 + PP(0.716326, -62)
        c3 = z2 + PP(0.455455, 73)
        c4 = z2 + PP(0.240684, -103)
        z3 = z2 + PP(0.627505, -132)
        c5 = z3 + PP(0.157636, 17)
        c6 = z3 + PP(0.174535, -159)
        z4 = z3 + PP(0.490617, 146)
        #z4 = z5 - PP(0.884302, ta + 347)
        c7 = z4 + PP(0.259326, -102)
        c8 = z4 + PP(0.376521, 75)
        z5 = z4 + PP(0.884302, 65)
        c9 = z5 + PP(0.266824, -102)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

class CharYoui(WasedaChar):
    def __init__(self, name='youi', kana='ようい',
                 model='NER4OR4', head_type='NER',
                 tail_type='NEROR4'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature = {'ER', 'NE', 'NER', 'NEL', 'SL', 'SW', 'SWL'}

    @classmethod
    def path_NEROR(cls, ta=None, **kwargs):
        #M196.26216 175.36037C196.96253 173.53014 200.59717 168.12328 204.10499 168.31918C204.86442 168.36159 205.83118 169.29168 205.62265 170.02315C204.89212 172.58564 198.12285 172.29159 198.12285 172.29159

        #z0 = P(0, -0)
        #c0 = P(0.247075, 0.645664)
        #c1 = P(1.5293, 2.55308)
        #z1 = P(2.76678, 2.48398)
        #c2 = P(3.03469, 2.46901)
        #c3 = P(3.37574, 2.1409)
        #z2 = P(3.30217, 1.88285)
        #c4 = P(3.04446, 0.978863)
        #c5 = P(0.65641, 1.0826)
        z3 = P(0.65641, 1.0826)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.247075, 0.645664)
        #z1 = z0 + P(2.76678, 2.48398)
        #c1 = z1 + P(-1.23748, 0.0691092)
        #c2 = z1 + P(0.26791, -0.0149613)
        #z2 = z1 + P(0.535397, -0.601123)
        #c3 = z2 + P(0.0735647, 0.258046)
        #c4 = z2 + P(-0.257715, -0.90399)
        #z3 = z2 + P(-2.64576, -0.800255)
        #c5 = z3 + P(0, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(0.691324, 69)
        z1 = z0 + PP(3.71822, 41)
        c1 = z1 + PP(1.23941, 176)
        c2 = z1 + PP(0.268327, -3)
        z2 = z1 + PP(0.804983, -48)
        #z2 = z3 - PP(2.76414, ta + 17)
        c3 = z2 + PP(0.268328, 74)
        c4 = z2 + PP(0.940007, -105)
        z3 = z2 + PP(2.76414, -163)
        c5 = z3 + PP(0, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])
    @classmethod
    def path_NERORe(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NERORer(cls, ta=None, **kwargs):
        #M 89.0177,112.442 C 89.498189,111.1898 90.917327,107.92153 92.765611,106.24494 93.61846,105.47132 94.56268,105.03659 95.548217,105.29519 96.232743,105.47481 98.136617,106.61388 96.026332,107.36375 94.504238,107.88548 93.021246,108.52163 90.44303,109.41465

        #z0 = P(0, -0)
        #c0 = P(0.169506, 0.441748)
        #c1 = P(0.670146, 1.59472)
        #z1 = P(1.32218, 2.18619)
        #c2 = P(1.62305, 2.4591)
        #c3 = P(1.95615, 2.61246)
        #z2 = P(2.30382, 2.52124)
        #c4 = P(2.54531, 2.45787)
        #c5 = P(3.21695, 2.05603)
        #z3 = P(2.47249, 1.79149)
        #c6 = P(1.93553, 1.60744)
        #c7 = P(1.41236, 1.38302)
        z4 = P(0.502825, 1.06798)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.169506, 0.441748)
        #z1 = z0 + P(1.32218, 2.18619)
        #c1 = z1 + P(-0.652034, -0.591464)
        #c2 = z1 + P(0.300866, 0.272916)
        #z2 = z1 + P(0.981642, 0.335051)
        #c3 = z2 + P(-0.347676, 0.0912283)
        #c4 = z2 + P(0.241486, -0.0633659)
        #z3 = z2 + P(0.168668, -0.729742)
        #c5 = z3 + P(0.744462, 0.264537)
        #c6 = z3 + P(-0.536961, -0.184055)
        #z4 = z3 + P(-1.96966, -0.723512)
        #c7 = z4 + P(0.909537, 0.315038)

        z0 = P(0, -0)
        c0 = z0 + PP(0.473153, 69)
        z1 = z0 + PP(2.55491, 58)
        c1 = z1 + PP(0.880328, -137)
        c2 = z1 + PP(0.406206, 42)
        z2 = z1 + PP(1.03725, 18)
        c3 = z2 + PP(0.359445, 165)
        c4 = z2 + PP(0.249661, -14)
        z3 = z2 + PP(0.748981, -76)
        #z3 = z4 - PP(2.09834, ta + 2)
        c5 = z3 + PP(0.790065, 19)
        c6 = z3 + PP(0.567629, -161)
        z4 = z3 + PP(2.09834, -159)
        c7 = z4 + PP(0.962552, 19)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4)])

    @classmethod
    def path_NERORel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NERORne(cls, ta=None, **kwargs):
        #M 313.617,112.442 C 314.319,110.612 318.067,105.282 321.571,105.527 322.331,105.567 322.87809,106.29432 322.75771,106.88271 322.3536,108.8581 318.31276,111.20125 317.30625,109.50389 316.31483,107.83198 321.571,105.527 321.571,105.527

        #z0 = P(0, -0)
        #c0 = P(0.24765, 0.645583)
        #c1 = P(1.56986, 2.52589)
        #z1 = P(2.80599, 2.43946)
        #c2 = P(3.07411, 2.42535)
        #c3 = P(3.26711, 2.16876)
        #z2 = P(3.22464, 1.96119)
        #c4 = P(3.08208, 1.26432)
        #c5 = P(1.65656, 0.437709)
        #z3 = P(1.30149, 1.0365)
        #c6 = P(0.951734, 1.62631)
        #c7 = P(2.80599, 2.43946)
        z4 = P(2.80599, 2.43946)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.24765, 0.645583)
        #z1 = z0 + P(2.80599, 2.43946)
        #c1 = z1 + P(-1.23613, 0.0864306)
        #c2 = z1 + P(0.268111, -0.0141111)
        #z2 = z1 + P(0.418645, -0.478264)
        #c3 = z2 + P(0.0424674, 0.207571)
        #c4 = z2 + P(-0.142561, -0.696874)
        #z3 = z2 + P(-1.92315, -0.924694)
        #c5 = z3 + P(0.355074, -0.598791)
        #c6 = z3 + P(-0.349751, 0.589813)
        #z4 = z3 + P(1.50451, 1.40296)
        #c7 = z4 + P(0, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(0.691454, 69)
        z1 = z0 + PP(3.71814, 41)
        c1 = z1 + PP(1.23915, 176)
        c2 = z1 + PP(0.268482, -3)
        z2 = z1 + PP(0.63561, -48)
        c3 = z2 + PP(0.211871, 78)
        c4 = z2 + PP(0.711306, -101)
        z3 = z2 + PP(2.13391, -154)
        #z3 = z4 - PP(2.05714, ta + 222)
        c5 = z3 + PP(0.696153, -59)
        #c6 = z3 + PP(0.685715, 120)
        #z4 = z3 + PP(2.05714, 42)
        #c7 = z4 + PP(0, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NERORner(cls, ta=None, **kwargs):
        #M 359.172,112.442 C 359.874,110.612 363.621,105.282 367.126,105.527 367.886,105.567 368.45682,106.59407 368.21868,107.223 367.52889,109.04471 364.41839,111.55991 363.34478,110.02867 362.25558,108.4752 365.41549,106.16709 366.06786,105.60508

        #z0 = P(0, -0)
        #c0 = P(0.24765, 0.645583)
        #c1 = P(1.56951, 2.52589)
        #z1 = P(2.80599, 2.43946)
        #c2 = P(3.07411, 2.42535)
        #c3 = P(3.27548, 2.06302)
        #z2 = P(3.19147, 1.84115)
        #c4 = P(2.94813, 1.19849)
        #c5 = P(1.85081, 0.311182)
        #z3 = P(1.47206, 0.851369)
        #c6 = P(1.08782, 1.3994)
        #c7 = P(2.20256, 2.21365)
        z4 = P(2.43271, 2.41191)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.24765, 0.645583)
        #z1 = z0 + P(2.80599, 2.43946)
        #c1 = z1 + P(-1.23649, 0.0864306)
        #c2 = z1 + P(0.268111, -0.0141111)
        #z2 = z1 + P(0.385473, -0.598311)
        #c3 = z2 + P(0.0840105, 0.221873)
        #c4 = z2 + P(-0.243343, -0.642659)
        #z3 = z2 + P(-1.7194, -0.989778)
        #c5 = z3 + P(0.378746, -0.540187)
        #c6 = z3 + P(-0.384246, 0.54803)
        #z4 = z3 + P(0.960642, 1.56054)
        #c7 = z4 + P(-0.230142, -0.198265)

        z0 = P(0, -0)
        c0 = z0 + PP(0.691454, 69)
        z1 = z0 + PP(3.71814, 41)
        c1 = z1 + PP(1.2395, 176)
        c2 = z1 + PP(0.268482, -3)
        z2 = z1 + PP(0.711734, -57)
        c3 = z2 + PP(0.237245, 69)
        c4 = z2 + PP(0.687187, -110)
        #z3 = z2 + PP(1.98394, -150)
        z3 = z4 - PP(1.83252, ta + 377)
        c5 = z3 + PP(0.659735, -54)
        #c6 = z3 + PP(0.669314, 125)
        #z4 = z3 + PP(1.83252, 58)
        #c7 = z4 + PP(0.303766, -139)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_NERORnel(cls, ta=None, **kwargs):
        #M 274.722,112.442 C 275.424,110.612 277.89593,104.00593 281.39993,104.25093 282.15993,104.29093 283.13693,105.21593 282.92693,105.94693 282.23693,108.52093 275.94436,109.514 275.94436,109.514

        #z0 = P(0, -0)
        #c0 = P(0.24765, 0.645583)
        #c1 = P(1.11969, 2.97606)
        #z1 = P(2.35583, 2.88963)
        #c2 = P(2.62394, 2.87552)
        #c3 = P(2.9686, 2.5492)
        #z2 = P(2.89452, 2.29132)
        #c4 = P(2.6511, 1.38327)
        #c5 = P(0.431221, 1.03293)
        z3 = P(0.431221, 1.03293)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.24765, 0.645583)
        #z1 = z0 + P(2.35583, 2.88963)
        #c1 = z1 + P(-1.23613, 0.0864306)
        #c2 = z1 + P(0.268111, -0.0141111)
        #z2 = z1 + P(0.538692, -0.598311)
        #c3 = z2 + P(0.0740833, 0.257881)
        #c4 = z2 + P(-0.243417, -0.90805)
        #z3 = z2 + P(-2.4633, -1.25838)
        #c5 = z3 + P(0, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(0.691454, 69)
        z1 = z0 + PP(3.72825, 50)
        c1 = z1 + PP(1.23915, 176)
        c2 = z1 + PP(0.268482, -3)
        z2 = z1 + PP(0.805087, -48)
        #z2 = z3 - PP(2.76611, ta + 28)
        c3 = z2 + PP(0.268311, 73)
        c4 = z2 + PP(0.94011, -105)
        z3 = z2 + PP(2.76611, -152)
        c5 = z3 + PP(0, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_NERORs(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NERORsl(cls, ta=None, **kwargs):
        #M 244.384,112.442 C 245.086,110.612 248.834,105.282 252.339,105.527 253.098,105.567 254.075,106.492 253.865,107.223 253.176,109.797 247.19035,108.33637 247.19035,108.33637

        #z0 = P(0, -0)
        #c0 = P(0.24765, 0.645583)
        #c1 = P(1.56986, 2.52589)
        #z1 = P(2.80635, 2.43946)
        #c2 = P(3.07411, 2.42535)
        #c3 = P(3.41877, 2.09903)
        #z2 = P(3.34469, 1.84115)
        #c4 = P(3.10162, 0.933097)
        #c5 = P(0.990018, 1.44838)
        z3 = P(0.990018, 1.44838)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.24765, 0.645583)
        #z1 = z0 + P(2.80635, 2.43946)
        #c1 = z1 + P(-1.23649, 0.0864306)
        #c2 = z1 + P(0.267758, -0.0141111)
        #z2 = z1 + P(0.538339, -0.598311)
        #c3 = z2 + P(0.0740833, 0.257881)
        #c4 = z2 + P(-0.243064, -0.90805)
        #z3 = z2 + P(-2.35467, -0.392772)
        #c5 = z3 + P(0, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(0.691454, 69)
        z1 = z0 + PP(3.71841, 40)
        c1 = z1 + PP(1.2395, 176)
        c2 = z1 + PP(0.26813, -3)
        z2 = z1 + PP(0.804851, -48)
        #z2 = z3 - PP(2.3872, ta + 10)
        c3 = z2 + PP(0.268311, 73)
        c4 = z2 + PP(0.940019, -104)
        z3 = z2 + PP(2.3872, -170)
        c5 = z3 + PP(0, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_NERORsr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NERORse(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NERORser(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NERORsel(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NERORsw(cls, ta=None, **kwargs):
        #M 47.3414,183.578 C48.0437,181.749 51.7912,176.419 55.2959,176.664 56.0555,176.703 57.0324,177.628 56.8228,178.359 56.1331,180.933 49.987314,179.6444 49.987314,179.6444

        #z0 = P(0, -0)
        #c0 = P(0.247756, 0.645231)
        #c1 = P(1.56979, 2.52554)
        #z1 = P(2.80617, 2.43911)
        #c2 = P(3.07414, 2.42535)
        #c3 = P(3.41877, 2.09903)
        #z2 = P(3.34483, 1.84115)
        #c4 = P(3.10152, 0.933097)
        #c5 = P(0.93342, 1.38769)
        z3 = P(0.93342, 1.38769)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.247756, 0.645231)
        #z1 = z0 + P(2.80617, 2.43911)
        #c1 = z1 + P(-1.23638, 0.0864306)
        #c2 = z1 + P(0.26797, -0.0137583)
        #z2 = z1 + P(0.538656, -0.597958)
        #c3 = z2 + P(0.0739422, 0.257881)
        #c4 = z2 + P(-0.243311, -0.90805)
        #z3 = z2 + P(-2.41141, -0.453461)
        #c5 = z3 + P(0, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(0.691162, 68)
        z1 = z0 + PP(3.71804, 40)
        c1 = z1 + PP(1.2394, 176)
        c2 = z1 + PP(0.268323, -2)
        z2 = z1 + PP(0.804801, -47)
        #z2 = z3 - PP(2.45367, ta + 11)
        c3 = z2 + PP(0.268272, 74)
        c4 = z2 + PP(0.940082, -104)
        z3 = z2 + PP(2.45367, -169)
        c5 = z3 + PP(0, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_NERORswr(cls, ta=None, **kwargs):
        pass

    @classmethod
    def path_NERORswl(cls, ta=None, **kwargs):
        #M 414.056,112.442 C 414.758,110.612 418.506,105.282 422.01,105.527 422.77,105.567 423.747,106.492 423.537,107.223 422.848,109.797 416.83093,108.41229 416.83093,108.41229

        #z0 = P(0, -0)
        #c0 = P(0.24765, 0.645583)
        #c1 = P(1.56986, 2.52589)
        #z1 = P(2.80599, 2.43946)
        #c2 = P(3.07411, 2.42535)
        #c3 = P(3.41877, 2.09903)
        #z2 = P(3.34469, 1.84115)
        #c4 = P(3.10162, 0.933097)
        #c5 = P(0.978934, 1.42159)
        z3 = P(0.978934, 1.42159)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.24765, 0.645583)
        #z1 = z0 + P(2.80599, 2.43946)
        #c1 = z1 + P(-1.23613, 0.0864306)
        #c2 = z1 + P(0.268111, -0.0141111)
        #z2 = z1 + P(0.538692, -0.598311)
        #c3 = z2 + P(0.0740833, 0.257881)
        #c4 = z2 + P(-0.243064, -0.90805)
        #z3 = z2 + P(-2.36575, -0.419555)
        #c5 = z3 + P(0, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(0.691454, 69)
        z1 = z0 + PP(3.71814, 41)
        c1 = z1 + PP(1.23915, 176)
        c2 = z1 + PP(0.268482, -3)
        z2 = z1 + PP(0.805087, -48)
        #z2 = z3 - PP(2.40267, ta + 11)
        c3 = z2 + PP(0.268311, 73)
        c4 = z2 + PP(0.940019, -104)
        z3 = z2 + PP(2.40267, -169)
        c5 = z3 + PP(0, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

class CharYuku(CharYu):
    def __init__(self, name='yuku', kana='ゆく',
                 model='BNER8CR1', head_type='BNER',
                 tail_type='NERCR1'):
        super().__init__(name, kana, model, head_type, tail_type)
