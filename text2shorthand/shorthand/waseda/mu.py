from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)


class CharMu(WasedaChar):
    def __init__(self, name='mu', kana='む',
                 model='ER8CR4', head_type='ER',
                 tail_type='ERCR4'):
        super().__init__(name, kana, model, head_type, tail_type)

    @classmethod
    def path_ERCR(cls, ta=None, **kwargs):
        #M 0,0 C 5.73224,-2.43319 10.452,-3.82934 14.2913,-3.82934 17.3818,-3.82934 22.1796,-2.75843 22.1796,0.77453 22.1796,3.75709 16.5964,2.04507 14.7819,0.77453 13.1421,-0.373655 12.155801,-1.2451496 11.097422,-3.4616377

        #z0 = P(0, 0)
        #c0 = P(2.01465, 0.855169)
        #c1 = P(3.67346, 1.34586)
        #z1 = P(5.02282, 1.34586)
        #c2 = P(6.10901, 1.34586)
        #c3 = P(7.79524, 0.969477)
        #z2 = P(7.79524, -0.272216)
        #c4 = P(7.79524, -1.32047)
        #c5 = P(5.83297, -0.71876)
        #z3 = P(5.19524, -0.272216)
        #c6 = P(4.61892, 0.131325)
        #c7 = P(4.27228, 0.43762)
        #z4 = P(3.9003, 1.21663)

        #z0 = P(0, 0)
        #c0 = z0 + P(2.01465, 0.855169)
        #z1 = z0 + P(5.02282, 1.34586)
        #c1 = z1 + P(-1.34936, 0)
        #c2 = z1 + P(1.08619, 0)
        #z2 = z1 + P(2.77242, -1.61808)
        #c3 = z2 + P(0, 1.24169)
        #c4 = z2 + P(0, -1.04825)
        #z3 = z2 + P(-2.59999, 0)
        #c5 = z3 + P(0.637724, -0.446544)
        #c6 = z3 + P(-0.576324, 0.403541)
        #z4 = z3 + P(-1.29495, 1.48884)
        #c7 = z4 + P(0.371978, -0.779007)

        z0 = P(0, 0)
        c0 = z0 + PP(2.18864, 22)
        z1 = z0 + PP(5.2, 14)
        c1 = z1 + PP(1.34936, 180)
        c2 = z1 + PP(1.08619, 0)
        z2 = z1 + PP(3.21006, -30)
        c3 = z2 + PP(1.24169, 90)
        c4 = z2 + PP(1.04825, -90)
        z3 = z2 + PP(2.59999, 180)
        #z3 = z4 - PP(1.97321, ta + 375)
        c5 = z3 + PP(0.77852, -35)
        c6 = z3 + PP(0.703558, 145)
        z4 = z3 + PP(1.97321, 131)
        c7 = z4 + PP(0.863261, -64)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            #curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRe(cls, ta=None, **kwargs):
        #M 47.3414,112.132 C 53.0937,109.808 57.8188,108.566 61.6437,108.566 64.7227,108.566 69.524,109.596 69.524,113.116 69.524,116.088 65.697071,115.75939 63.570479,115.44903 61.416442,115.13466 57.387474,114.38592 57.865997,112.26983 58.255263,110.54844 65.170036,109.86621 67.424863,109.86621

        #z0 = P(0, -0)
        #c0 = P(2.0217, 0.816793)
        #c1 = P(3.68239, 1.25331)
        #z1 = P(5.02668, 1.25331)
        #c2 = P(6.10883, 1.25331)
        #c3 = P(7.79629, 0.891302)
        #z2 = P(7.79629, -0.345837)
        #c4 = P(7.79629, -1.39038)
        #c5 = P(6.45128, -1.27488)
        #z3 = P(5.70387, -1.1658)
        #c6 = P(4.94681, -1.05531)
        #c7 = P(3.53079, -0.792162)
        #z4 = P(3.69897, -0.0484417)
        #c8 = P(3.83578, 0.556558)
        #c9 = P(6.26605, 0.796334)
        z5 = P(7.05853, 0.796334)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.0217, 0.816793)
        #z1 = z0 + P(5.02668, 1.25331)
        #c1 = z1 + P(-1.3443, 0)
        #c2 = z1 + P(1.08214, 0)
        #z2 = z1 + P(2.76961, -1.59914)
        #c3 = z2 + P(0, 1.23714)
        #c4 = z2 + P(0, -1.04454)
        #z3 = z2 + P(-2.09242, -0.819966)
        #c5 = z3 + P(0.747412, -0.109079)
        #c6 = z3 + P(-0.757058, 0.110488)
        #z4 = z3 + P(-2.0049, 1.11736)
        #c7 = z4 + P(-0.168182, -0.743721)
        #c8 = z4 + P(0.136811, 0.605)
        #z5 = z4 + P(3.35956, 0.844776)
        #c9 = z5 + P(-0.792481, 0)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18047, 21)
        z1 = z0 + PP(5.18057, 14)
        c1 = z1 + PP(1.3443, 180)
        c2 = z1 + PP(1.08214, 0)
        z2 = z1 + PP(3.19812, -30)
        c3 = z2 + PP(1.23714, 90)
        c4 = z2 + PP(1.04454, -90)
        z3 = z2 + PP(2.24735, -158)
        c5 = z3 + PP(0.755329, -8)
        c6 = z3 + PP(0.765078, 171)
        #z4 = z3 + PP(2.29524, 150)
        z4 = z5 - PP(3.46414, ta + 14)
        c7 = z4 + PP(0.7625, -102)
        #c8 = z4 + PP(0.620276, 77)
        #z5 = z4 + PP(3.46414, 14)
        #c9 = z5 + PP(0.792481, 180)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_ERCRer(cls, ta=None, **kwargs):
        #M 180.059,112.132 C 185.79,109.817 190.497,108.58 194.308,108.58 197.376,108.58 202.159,108.58302 202.159,112.09002 202.159,115.05002 197.30531,115.74111 195.50431,114.48011 193.49831,113.07511 195.48753,110.88259 198.43853,109.17859

        #z0 = P(0, -0)
        #c0 = P(2.02177, 0.816681)
        #c1 = P(3.68229, 1.25307)
        #z1 = P(5.02673, 1.25307)
        #c2 = P(6.10905, 1.25307)
        #c3 = P(7.79639, 1.252)
        #z2 = P(7.79639, 0.0148096)
        #c4 = P(7.79639, -1.02941)
        #c5 = P(6.08411, -1.27321)
        #z3 = P(5.44876, -0.828361)
        #c6 = P(4.74109, -0.332708)
        #c7 = P(5.44284, 0.440764)
        z4 = P(6.48389, 1.0419)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.02177, 0.816681)
        #z1 = z0 + P(5.02673, 1.25307)
        #c1 = z1 + P(-1.34444, 0)
        #c2 = z1 + P(1.08232, 0)
        #z2 = z1 + P(2.76966, -1.23826)
        #c3 = z2 + P(0, 1.23719)
        #c4 = z2 + P(0, -1.04422)
        #z3 = z2 + P(-2.34763, -0.843171)
        #c5 = z3 + P(0.635353, -0.444853)
        #c6 = z3 + P(-0.707672, 0.495653)
        #z4 = z3 + P(1.03513, 1.87026)
        #c7 = z4 + P(-1.04105, -0.601133)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18049, 21)
        z1 = z0 + PP(5.18056, 13)
        c1 = z1 + PP(1.34444, 180)
        c2 = z1 + PP(1.08232, 0)
        z2 = z1 + PP(3.03386, -24)
        c3 = z2 + PP(1.23719, 90)
        c4 = z2 + PP(1.04422, -90)
        #z3 = z2 + PP(2.49445, -160)
        z3 = z4 - PP(2.13761, ta + 390)
        c5 = z3 + PP(0.775608, -34)
        #c6 = z3 + PP(0.863986, 144)
        #z4 = z3 + PP(2.13761, 61)
        #c7 = z4 + PP(1.20214, -149)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRel(cls, ta=None, **kwargs):
        #M 109.511,112.132 C 115.263,109.808 119.988,108.566 123.813,108.566 126.892,108.566 131.693,109.596 131.693,113.116 131.693,116.088 124.79784,114.54864 122.98984,113.28264 121.09015,111.37749 124.24419,108.16837 126.27797,109.40139 127.60405,110.20536 129.88211,111.50107 131.5888,112.25493

        #z0 = P(0, -0)
        #c0 = P(2.0216, 0.816793)
        #c1 = P(3.68225, 1.25331)
        #z1 = P(5.02658, 1.25331)
        #c2 = P(6.10872, 1.25331)
        #c3 = P(7.79608, 0.891302)
        #z2 = P(7.79608, -0.345837)
        #c4 = P(7.79608, -1.39038)
        #c5 = P(5.37271, -0.849352)
        #z3 = P(4.73727, -0.404404)
        #c6 = P(4.06961, 0.26518)
        #c7 = P(5.17813, 1.39306)
        #z4 = P(5.89292, 0.9597)
        #c8 = P(6.35898, 0.677137)
        #c9 = P(7.15963, 0.221747)
        z5 = P(7.75946, -0.043205)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.0216, 0.816793)
        #z1 = z0 + P(5.02658, 1.25331)
        #c1 = z1 + P(-1.34433, 0)
        #c2 = z1 + P(1.08214, 0)
        #z2 = z1 + P(2.7695, -1.59914)
        #c3 = z2 + P(0, 1.23714)
        #c4 = z2 + P(0, -1.04454)
        #z3 = z2 + P(-3.05881, -0.0585673)
        #c5 = z3 + P(0.635439, -0.444948)
        #c6 = z3 + P(-0.667665, 0.669584)
        #z4 = z3 + P(1.15565, 1.3641)
        #c7 = z4 + P(-0.714792, 0.433357)
        #c8 = z4 + P(0.466064, -0.282563)
        #z5 = z4 + P(1.86654, -1.0029)
        #c9 = z5 + P(-0.599833, 0.264952)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18037, 22)
        z1 = z0 + PP(5.18047, 14)
        c1 = z1 + PP(1.34433, 180)
        c2 = z1 + PP(1.08214, 0)
        z2 = z1 + PP(3.19803, -30)
        c3 = z2 + PP(1.23714, 90)
        c4 = z2 + PP(1.04454, -90)
        z3 = z2 + PP(3.05937, -178)
        c5 = z3 + PP(0.775733, -35)
        c6 = z3 + PP(0.945579, 134)
        #z4 = z3 + PP(1.78782, 49)
        z4 = z5 - PP(2.11892, ta + -4)
        c7 = z4 + PP(0.835898, 148)
        #c8 = z4 + PP(0.54503, -31)
        #z5 = z4 + PP(2.11892, -28)
        #c9 = z5 + PP(0.655743, 156)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_ERCRne(cls, ta=None, **kwargs):
        #M 47.3414,165.588 C 53.0937,163.264 57.8188,162.022 61.6437,162.022 64.7227,162.022 69.524,163.052 69.524,166.571 69.524,169.543 62.685436,170.36919 60.877736,169.10319 59.244036,167.96019 63.064876,164.03162 65.658357,162.58252

        #z0 = P(0, -0)
        #c0 = P(2.0217, 0.816793)
        #c1 = P(3.68239, 1.25331)
        #z1 = P(5.02668, 1.25331)
        #c2 = P(6.10883, 1.25331)
        #c3 = P(7.79629, 0.891302)
        #z2 = P(7.79629, -0.345485)
        #c4 = P(7.79629, -1.39002)
        #c5 = P(5.39281, -1.6804)
        #z3 = P(4.75748, -1.23545)
        #c6 = P(4.1833, -0.83373)
        #c7 = P(5.52617, 0.547005)
        z4 = P(6.43768, 1.05631)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.0217, 0.816793)
        #z1 = z0 + P(5.02668, 1.25331)
        #c1 = z1 + P(-1.3443, 0)
        #c2 = z1 + P(1.08214, 0)
        #z2 = z1 + P(2.76961, -1.59879)
        #c3 = z2 + P(0, 1.23679)
        #c4 = z2 + P(0, -1.04454)
        #z3 = z2 + P(-3.03881, -0.889963)
        #c5 = z3 + P(0.635334, -0.444948)
        #c6 = z3 + P(-0.57418, 0.401719)
        #z4 = z3 + P(1.6802, 2.29175)
        #c7 = z4 + P(-0.911505, -0.509301)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18047, 21)
        z1 = z0 + PP(5.18057, 14)
        c1 = z1 + PP(1.3443, 180)
        c2 = z1 + PP(1.08214, 0)
        z2 = z1 + PP(3.19795, -29)
        c3 = z2 + PP(1.23679, 90)
        c4 = z2 + PP(1.04454, -90)
        #z3 = z2 + PP(3.16645, -163)
        z3 = z4 - PP(2.84169, ta + 383)
        c5 = z3 + PP(0.775647, -35)
        #c6 = z3 + PP(0.700757, 145)
        #z4 = z3 + PP(2.84169, 53)
        #c7 = z4 + PP(1.04414, -150)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRner(cls, ta=None, **kwargs):
        #M 423.82,122.011 C 429.591,119.796 434.319,118.708 438.129,118.708 441.197,118.708 446.058,119.596 446.058,123.102 446.058,125.39673 442.85786,127.04632 440.66856,126.48394 438.42375,125.90731 439.13738,121.48627 440.15343,118.83103

        #z0 = P(0, -0)
        #c0 = P(2.03588, 0.781403)
        #c1 = P(3.70381, 1.16522)
        #z1 = P(5.0479, 1.16522)
        #c2 = P(6.13022, 1.16522)
        #c3 = P(7.84507, 0.851958)
        #z2 = P(7.84507, -0.384881)
        #c4 = P(7.84507, -1.19441)
        #c5 = P(6.71613, -1.77635)
        #z3 = P(5.9438, -1.57795)
        #c6 = P(5.15188, -1.37453)
        #c7 = P(5.40363, 0.185113)
        z4 = P(5.76207, 1.12182)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.03588, 0.781403)
        #z1 = z0 + P(5.0479, 1.16522)
        #c1 = z1 + P(-1.34408, 0)
        #c2 = z1 + P(1.08232, 0)
        #z2 = z1 + P(2.79717, -1.55011)
        #c3 = z2 + P(0, 1.23684)
        #c4 = z2 + P(0, -0.80953)
        #z3 = z2 + P(-1.90127, -1.19307)
        #c5 = z3 + P(0.772336, -0.198395)
        #c6 = z3 + P(-0.791919, 0.203422)
        #z4 = z3 + P(-0.181726, 2.69978)
        #c7 = z4 + P(-0.35844, -0.93671)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18069, 20)
        z1 = z0 + PP(5.18064, 12)
        c1 = z1 + PP(1.34408, 180)
        c2 = z1 + PP(1.08232, 0)
        z2 = z1 + PP(3.19797, -28)
        c3 = z2 + PP(1.23684, 90)
        c4 = z2 + PP(0.80953, -90)
        #z3 = z2 + PP(2.24461, -147)
        z3 = z4 - PP(2.70589, ta + 383)
        c5 = z3 + PP(0.797411, -14)
        #c6 = z3 + PP(0.817629, 165)
        #z4 = z3 + PP(2.70589, 93)
        #c7 = z4 + PP(1.00295, -110)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRnel(cls, ta=None, **kwargs):
        #M 96.1217,165.588 C 101.874,163.264 106.599,162.022 110.424,162.022 113.503,162.022 118.304,163.052 118.304,166.571 118.304,170.62619 109.47384,167.33207 109.10091,164.73791 108.72798,162.14375 113.03261,163.48619 115.45887,162.95087

        #z0 = P(0, -0)
        #c0 = P(2.0217, 0.816793)
        #c1 = P(3.68235, 1.25331)
        #z1 = P(5.02668, 1.25331)
        #c2 = P(6.10883, 1.25331)
        #c3 = P(7.79619, 0.891302)
        #z2 = P(7.79619, -0.345485)
        #c4 = P(7.79619, -1.77072)
        #c5 = P(4.69274, -0.612971)
        #z3 = P(4.56167, 0.298773)
        #c6 = P(4.4306, 1.21052)
        #c7 = P(5.94351, 0.738702)
        z4 = P(6.79624, 0.926845)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.0217, 0.816793)
        #z1 = z0 + P(5.02668, 1.25331)
        #c1 = z1 + P(-1.34433, 0)
        #c2 = z1 + P(1.08214, 0)
        #z2 = z1 + P(2.7695, -1.59879)
        #c3 = z2 + P(0, 1.23679)
        #c4 = z2 + P(0, -1.42524)
        #z3 = z2 + P(-3.23452, 0.644258)
        #c5 = z3 + P(0.13107, -0.911743)
        #c6 = z3 + P(-0.13107, 0.911743)
        #z4 = z3 + P(2.23457, 0.628073)
        #c7 = z4 + P(-0.852733, -0.188144)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18047, 21)
        z1 = z0 + PP(5.18057, 14)
        c1 = z1 + PP(1.34433, 180)
        c2 = z1 + PP(1.08214, 0)
        z2 = z1 + PP(3.19786, -29)
        c3 = z2 + PP(1.23679, 90)
        c4 = z2 + PP(1.42524, -90)
        #z3 = z2 + PP(3.29806, 168)
        z3 = z4 - PP(2.32116, ta + 362)
        c5 = z3 + PP(0.921116, -81)
        #c6 = z3 + PP(0.921116, 98)
        #z4 = z3 + PP(2.32116, 15)
        #c7 = z4 + PP(0.873242, -167)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_ERCRs(cls, ta=None, **kwargs):
        return cls.path_ERCR()

    @classmethod
    def path_ERCRsl(cls, ta=None, **kwargs):
        return cls.path_ERCR()

    @classmethod
    def path_ERCRsr(cls, ta=None, **kwargs):
        return cls.path_ERCR()

    @classmethod
    def path_ERCRse(cls, ta=None, **kwargs):
        #M47.3414 280.599C53.0937 278.275 57.8188 277.033 61.6437 277.033C64.7227 277.033 69.524 278.063 69.524 281.583C69.524 284.554 63.9617 282.848 62.154 281.583C60.5203 280.439 59.5571 279.561 58.4844 277.361

        #z0 = P(0, -0)
        #c0 = P(2.0217, 0.816793)
        #c1 = P(3.68239, 1.25331)
        #z1 = P(5.02668, 1.25331)
        #c2 = P(6.10883, 1.25331)
        #c3 = P(7.79629, 0.891302)
        #z2 = P(7.79629, -0.345837)
        #c4 = P(7.79629, -1.39002)
        #c5 = P(5.84137, -0.790433)
        #z3 = P(5.20603, -0.345837)
        #c6 = P(4.63185, 0.0562336)
        #c7 = P(4.29333, 0.364815)
        z4 = P(3.91632, 1.13803)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.0217, 0.816793)
        #z1 = z0 + P(5.02668, 1.25331)
        #c1 = z1 + P(-1.3443, 0)
        #c2 = z1 + P(1.08214, 0)
        #z2 = z1 + P(2.76961, -1.59914)
        #c3 = z2 + P(0, 1.23714)
        #c4 = z2 + P(0, -1.04419)
        #z3 = z2 + P(-2.59026, 0)
        #c5 = z3 + P(0.635334, -0.444597)
        #c6 = z3 + P(-0.57418, 0.40207)
        #z4 = z3 + P(-1.28972, 1.48386)
        #c7 = z4 + P(0.377011, -0.773212)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18047, 21)
        z1 = z0 + PP(5.18057, 14)
        c1 = z1 + PP(1.3443, 180)
        c2 = z1 + PP(1.08214, 0)
        z2 = z1 + PP(3.19812, -30)
        c3 = z2 + PP(1.23714, 90)
        c4 = z2 + PP(1.04419, -90)
        z3 = z2 + PP(2.59026, 180)
        #z3 = z4 - PP(1.96602, ta + 374)
        c5 = z3 + PP(0.775445, -34)
        #c6 = z3 + PP(0.700959, 144)
        #z4 = z3 + PP(1.96602, 130)
        #c7 = z4 + PP(0.860229, -64)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta+180)])

    @classmethod
    def path_ERCRser(cls, ta=None, **kwargs):
        #M 92.503,280.599 C 98.2553,278.275 102.98,277.033 106.805,277.033 109.884,277.033 114.686,278.063 114.686,281.583 114.686,284.554 111.03236,284.69907 108.98245,284.24931 107.1589,283.84922 105.57959,282.76805 105.36776,279.97114 105.15069,277.10513 111.6572,279.28905 114.68303,281.43233

        #z0 = P(0, -0)
        #c0 = P(2.0217, 0.816793)
        #c1 = P(3.68225, 1.25331)
        #z1 = P(5.02658, 1.25331)
        #c2 = P(6.10872, 1.25331)
        #c3 = P(7.79643, 0.891302)
        #z2 = P(7.79643, -0.345837)
        #c4 = P(7.79643, -1.39002)
        #c5 = P(6.51233, -1.44101)
        #z3 = P(5.79187, -1.28294)
        #c6 = P(5.15096, -1.14232)
        #c7 = P(4.5959, -0.762334)
        #z4 = P(4.52145, 0.220668)
        #c8 = P(4.44516, 1.22796)
        #c9 = P(6.73193, 0.460395)
        z5 = P(7.79539, -0.292882)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.0217, 0.816793)
        #z1 = z0 + P(5.02658, 1.25331)
        #c1 = z1 + P(-1.34433, 0)
        #c2 = z1 + P(1.08214, 0)
        #z2 = z1 + P(2.76986, -1.59914)
        #c3 = z2 + P(0, 1.23714)
        #c4 = z2 + P(0, -1.04419)
        #z3 = z2 + P(-2.00457, -0.937101)
        #c5 = z3 + P(0.720461, -0.158073)
        #c6 = z3 + P(-0.640905, 0.140616)
        #z4 = z3 + P(-1.27042, 1.50361)
        #c7 = z4 + P(0.0744497, -0.983002)
        #c8 = z4 + P(-0.0762914, 1.00729)
        #z5 = z4 + P(3.27394, -0.51355)
        #c9 = z5 + P(-1.06346, 0.753277)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18047, 21)
        z1 = z0 + PP(5.18047, 14)
        c1 = z1 + PP(1.34433, 180)
        c2 = z1 + PP(1.08214, 0)
        z2 = z1 + PP(3.19834, -29)
        c3 = z2 + PP(1.23714, 90)
        c4 = z2 + PP(1.04419, -90)
        z3 = z2 + PP(2.21279, -154)
        c5 = z3 + PP(0.737598, -12)
        c6 = z3 + PP(0.656149, 167)
        #z4 = z3 + PP(1.96845, 130)
        z4 = z5 - PP(3.31398, ta + 28)
        c7 = z4 + PP(0.985817, -85)
        #c8 = z4 + PP(1.01017, 94)
        #z5 = z4 + PP(3.31398, -8)
        #c9 = z5 + PP(1.30321, 144)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            #controlcurve(c8, c9),
            curve(),
            endknot(*z5, angle=ta)])

    @classmethod
    def path_ERCRNE(cls, ta=None, **kwargs):
        #M 277.058,112.132 C 282.828,109.917 287.496,108.58 291.307,108.58 294.374,108.58 299.235,109.469 299.235,112.975 299.235,115.936 292.839,117.23 291.038,115.969 288.483,114.181 291.92428,111.35409 295.306,109.138 296.54729,108.32456 297.78858,107.51113 299.02988,106.69769

        #z0 = P(0, -0)
        #c0 = P(2.03553, 0.781403)
        #c1 = P(3.68229, 1.25307)
        #z1 = P(5.02673, 1.25307)
        #c2 = P(6.1087, 1.25307)
        #c3 = P(7.82355, 0.939447)
        #z2 = P(7.82355, -0.297392)
        #c4 = P(7.82355, -1.34197)
        #c5 = P(5.56719, -1.79846)
        #z3 = P(4.93183, -1.35361)
        #c6 = P(4.03049, -0.722842)
        #c7 = P(5.24449, 0.274429)
        #z4 = P(6.43749, 1.05622)
        #c8 = P(6.87539, 1.34318)
        #c9 = P(7.31329, 1.63014)
        z5 = P(7.75119, 1.9171)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.03553, 0.781403)
        #z1 = z0 + P(5.02673, 1.25307)
        #c1 = z1 + P(-1.34444, 0)
        #c2 = z1 + P(1.08197, 0)
        #z2 = z1 + P(2.79682, -1.55046)
        #c3 = z2 + P(0, 1.23684)
        #c4 = z2 + P(0, -1.04458)
        #z3 = z2 + P(-2.89172, -1.05622)
        #c5 = z3 + P(0.635353, -0.444853)
        #c6 = z3 + P(-0.901347, 0.630767)
        #z4 = z3 + P(1.50566, 2.40982)
        #c7 = z4 + P(-1.193, -0.781787)
        #c8 = z4 + P(0.4379, 0.286964)
        #z5 = z4 + P(1.3137, 0.860887)
        #c9 = z5 + P(-0.437903, -0.286964)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18036, 21)
        z1 = z0 + PP(5.18056, 13)
        c1 = z1 + PP(1.34444, 180)
        c2 = z1 + PP(1.08197, 0)
        z2 = z1 + PP(3.19783, -29)
        c3 = z2 + PP(1.23684, 90)
        c4 = z2 + PP(1.04458, -90)
        z3 = z2 + PP(3.07858, -159)
        c5 = z3 + PP(0.775608, -34)
        c6 = z3 + PP(1.10013, 145)
        z4 = z3 + PP(2.84152, 58)
        #z4 = z5 - PP(1.57065, ta + 359)
        c7 = z4 + PP(1.42633, -146)
        c8 = z4 + PP(0.523549, 33)
        z5 = z4 + PP(1.57065, 33)
        c9 = z5 + PP(0.523552, -146)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])

    @classmethod
    def path_ERCRsel(cls, ta=None, **kwargs):
        return cls.path_ERCR()

    @classmethod
    def path_ERCRsw(cls, ta=None, **kwargs):
        return cls.path_ERCR()

    @classmethod
    def path_ERCRswr(cls, ta=None, **kwargs):
        return cls.path_ERCR()

    @classmethod
    def path_ERCRswl(cls, ta=None, **kwargs):
        return cls.path_ERCR()

class CharMun(CharMu):
    def __init__(self, name='mun', kana='むん',
                 model='ER8CR4NE1F', head_type='ER',
                 tail_type='NEF'):
        super().__init__(name, kana, model, head_type, tail_type)

    def get_paths(self):
        return [self.path_ERCRNE()]

class CharMuku(CharMu):
    def __init__(self, name='muku', kana='むく',
                 model='BER8CR4', head_type='BER',
                 tail_type='ERCR4'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharMutsu(CharMu):
    def __init__(self, name='mutsu', kana='むつ',
                 model='ER8CR4SW1F', head_type='ER',
                 tail_type='SWF'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.tail_ligature = {}

    @classmethod
    def path_ERCRSWF(cls, ta=None, **kwargs):
        #M 316.55,112.132 C 322.302,109.808 327.027,108.566 330.852,108.566 333.931,108.566 338.733,109.596 338.733,113.116 338.733,116.088 333.17,114.382 331.363,113.116 329.729,111.972 328.766,111.094 327.693,108.895 327.3926,109.79516 327.0922,110.67755 326.7918,111.44921

        #z0 = P(0, -0)
        #c0 = P(2.02918, 0.819856)
        #c1 = P(3.69605, 1.25801)
        #z1 = P(5.04543, 1.25801)
        #c2 = P(6.13163, 1.25801)
        #c3 = P(7.82567, 0.894644)
        #z2 = P(7.82567, -0.347133)
        #c4 = P(7.82567, -1.39559)
        #c5 = P(5.86317, -0.79375)
        #z3 = P(5.2257, -0.347133)
        #c6 = P(4.64926, 0.0564444)
        #c7 = P(4.30953, 0.366183)
        #z4 = P(3.931, 1.14194)
        #c8 = P(3.82503, 0.824385)
        #c9 = P(3.71905, 0.513098)
        z5 = P(3.61308, 0.240873)

        #z0 = P(0, -0)
        #c0 = z0 + P(2.02918, 0.819856)
        #z1 = z0 + P(5.04543, 1.25801)
        #c1 = z1 + P(-1.34937, 0)
        #c2 = z1 + P(1.0862, 0)
        #z2 = z1 + P(2.78024, -1.60514)
        #c3 = z2 + P(0, 1.24178)
        #c4 = z2 + P(0, -1.04846)
        #z3 = z2 + P(-2.59997, 0)
        #c5 = z3 + P(0.637469, -0.446617)
        #c6 = z3 + P(-0.576439, 0.403578)
        #z4 = z3 + P(-1.29469, 1.48908)
        #c7 = z4 + P(0.378531, -0.775758)
        #c8 = z4 + P(-0.105974, -0.317556)
        #z5 = z4 + P(-0.317923, -0.901069)
        #c9 = z5 + P(0.105974, 0.272224)

        z0 = P(0, -0)
        c0 = z0 + PP(2.18854, 22)
        z1 = z0 + PP(5.1999, 14)
        c1 = z1 + PP(1.34937, 180)
        c2 = z1 + PP(1.0862, 0)
        z2 = z1 + PP(3.21033, -29)
        c3 = z2 + PP(1.24178, 90)
        c4 = z2 + PP(1.04846, -90)
        z3 = z2 + PP(2.59997, 180)
        c5 = z3 + PP(0.778353, -35)
        c6 = z3 + PP(0.703674, 145)
        z4 = z3 + PP(1.97322, 131)
        #z4 = z5 - PP(0.95551, ta + 3)
        c7 = z4 + PP(0.863184, -63)
        c8 = z4 + PP(0.334773, -108)
        z5 = z4 + PP(1.5, -109)
        c9 = z5 + PP(0.292125, 68)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            controlcurve(c6, c7),
            knot(*z4),
            controlcurve(c8, c9),
            #curve(),
            endknot(*z5)])
    
class CharMuchi(CharMutsu):
    def __init__(self, name='muchi', kana='むち',
                 model='ER8CR4SW1F', head_type='ER',
                 tail_type='SWF'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharMuro(CharMutsu):
    def __init__(self, name='muro', kana='むろ',
                 model='ER8CR4SW1F', head_type='ER',
                 tail_type='SWF'):
        super().__init__(name, kana, model, head_type, tail_type)
