from ..waseda.char import WasedaChar
from text2shorthand.common.point import Point as P, PPoint as PP
import pyx
from pyx.metapost.path import (
    beginknot,
    knot,
    endknot,
    smoothknot,
    tensioncurve,
    controlcurve,
    curve)

class CharUra(WasedaChar):
    def __init__(self, name='ura', kana='うら', 
                 model='S4CL1', head_type='S', tail_type='SCL1'):
        super().__init__(name, kana, model, head_type, tail_type)
        self.offset_from_centerline = 2

    @classmethod
    def path_SCL(cls, ta=None, **kwargs):
        #M 47.3414,53.0079 C 47.5141,54.0979 47.6399,61.4316 47.1454,64.2361 46.9959,65.2998 49.262023,64.672557 49.614023,63.016657 49.944223,61.586657 48.0207,60.5387 47.5185,60.2717

        #z0 = P(0, -0)
        #c0 = P(0.0609247, -0.384528)
        #c1 = P(0.105304, -2.97169)
        #z1 = P(-0.0691444, -3.96106)
        #c2 = P(-0.121885, -4.33631)
        #c3 = P(0.677553, -4.11503)
        #z2 = P(0.801731, -3.53087)
        #c4 = P(0.918218, -3.02639)
        #c5 = P(0.239642, -2.6567)
        z3 = P(0.0624769, -2.56251)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0609247, -0.384528)
        #z1 = z0 + P(-0.0691444, -3.96106)
        #c1 = z1 + P(0.174449, 0.989365)
        #c2 = z1 + P(-0.0527403, -0.37525)
        #z2 = z1 + P(0.870875, 0.430192)
        #c3 = z2 + P(-0.124178, -0.584165)
        #c4 = z2 + P(0.116487, 0.504472)
        #z3 = z2 + P(-0.739254, 0.96836)
        #c5 = z3 + P(0.177165, -0.0941917)

        z0 = P(0, -0)
        c0 = z0 + PP(0.389324, -80)
        z1 = z0 + PP(3.96166, -91)
        c1 = z1 + PP(1.00463, 80)
        c2 = z1 + PP(0.378938, -98)
        z2 = z1 + PP(0.971334, 26)
        #z2 = z3 - PP(1.21828, ta + 334)
        c3 = z2 + PP(0.597217, -102)
        c4 = z2 + PP(0.517747, 76)
        z3 = z2 + PP(1.21828, 127)
        c5 = z3 + PP(0.200648, -27)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            #curve(),
            endknot(*z3)])

    @classmethod
    def path_SCLe(cls, ta=None, **kwargs):
        return cls.path_SCL()

    @classmethod
    def path_SCLer(cls, ta=None, **kwargs):
        return cls.path_SCL()

    @classmethod
    def path_SCLel(cls, ta=None, **kwargs):
        return cls.path_SCL()

    @classmethod
    def path_SCLne(cls, ta=None, **kwargs):
        return cls.path_SCL()

    @classmethod
    def path_SCLner(cls, ta=None, **kwargs):
        return cls.path_SCL()

    @classmethod
    def path_SCLnel(cls, ta=None, **kwargs):
        return cls.path_SCL()

    @classmethod
    def path_SCLs(cls, ta=None, **kwargs):
        #M 206.842,111.295 C 206.92176,112.44899 206.83799,119.74391 206.647,122.47 206.628,123.544 208.96386,122.66961 209.1322,121.36 209.21034,120.75221 208.68306,119.0205 207.81332,118.98539 207.27785,118.96379 206.646,121.0567 206.646,122.5207

        #z0 = P(0, -0)
        #c0 = P(0.0281376, -0.407102)
        #c1 = P(-0.00141464, -2.98059)
        #z1 = P(-0.0687917, -3.94229)
        #c2 = P(-0.0754944, -4.32117)
        #c3 = P(0.748545, -4.01271)
        #z2 = P(0.807932, -3.55071)
        #c4 = P(0.835498, -3.33629)
        #c5 = P(0.649485, -2.72538)
        #z3 = P(0.34266, -2.713)
        #c6 = P(0.153758, -2.70538)
        #c7 = P(-0.0691444, -3.44371)
        #z4 = P(-0.0691444, -3.96018)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0281376, -0.407102)
        #z1 = z0 + P(-0.0687917, -3.94229)
        #c1 = z1 + P(0.067377, 0.961704)
        #c2 = z1 + P(-0.00670278, -0.378883)
        #z2 = z1 + P(0.876723, 0.391583)
        #c3 = z2 + P(-0.0593866, -0.462001)
        #c4 = z2 + P(0.0275661, 0.214415)
        #z3 = z2 + P(-0.465272, 0.83771)
        #c5 = z3 + P(0.306825, -0.012386)
        #c6 = z3 + P(-0.188902, 0.00762)
        #z4 = z3 + P(-0.411805, -1.24718)
        #c7 = z4 + P(0, 0.516467)

        z0 = P(0, -0)
        c0 = z0 + PP(0.408073, -86)
        z1 = z0 + PP(3.94289, -90)
        c1 = z1 + PP(0.964061, 85)
        c2 = z1 + PP(0.378943, -91)
        z2 = z1 + PP(0.960199, 24)
        c3 = z2 + PP(0.465803, -97)
        c4 = z2 + PP(0.21618, 82)
        z3 = z2 + PP(0.958246, 119)
        #z3 = z4 - PP(1.31341, ta + -18)
        c5 = z3 + PP(0.307075, -2)
        #c6 = z3 + PP(0.189056, 177)
        z4 = z3 + PP(1.31341, -108)
        #c7 = z4 + PP(0.516467, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SCLsl(cls, ta=None, **kwargs):
        #M 235.233,111.292 C 235.387,112.385 235.532,119.715 235.037,122.52 234.869,123.581 237.73944,123.26647 238.042,121.601 238.16946,120.89939 237.76735,119.31068 236.93581,119.36013 236.39374,119.39237 235.73238,120.36077 235.19163,121.3012

        #z0 = P(0, -0)
        #c0 = P(0.0543278, -0.385586)
        #c1 = P(0.105481, -2.97145)
        #z1 = P(-0.0691444, -3.96099)
        #c2 = P(-0.128411, -4.33529)
        #c3 = P(0.884216, -4.22433)
        #z2 = P(0.990953, -3.63679)
        #c4 = P(1.03592, -3.38927)
        #c5 = P(0.894062, -2.82881)
        #z3 = P(0.600714, -2.84626)
        #c6 = P(0.409483, -2.85763)
        #c7 = P(0.17617, -3.19926)
        z4 = P(-0.0145944, -3.53102)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0543278, -0.385586)
        #z1 = z0 + P(-0.0691444, -3.96099)
        #c1 = z1 + P(0.174625, 0.989542)
        #c2 = z1 + P(-0.0592667, -0.374297)
        #z2 = z1 + P(1.0601, 0.324203)
        #c3 = z2 + P(-0.106736, -0.587541)
        #c4 = z2 + P(0.0449651, 0.247512)
        #z3 = z2 + P(-0.390239, 0.790529)
        #c5 = z3 + P(0.293349, 0.0174449)
        #c6 = z3 + P(-0.19123, -0.0113736)
        #z4 = z3 + P(-0.615308, -0.684766)
        #c7 = z4 + P(0.190765, 0.331763)

        z0 = P(0, -0)
        c0 = z0 + PP(0.389395, -81)
        z1 = z0 + PP(3.96159, -91)
        c1 = z1 + PP(1.00483, 79)
        c2 = z1 + PP(0.37896, -98)
        z2 = z1 + PP(1.10856, 17)
        c3 = z2 + PP(0.597157, -100)
        c4 = z2 + PP(0.251564, 79)
        #z3 = z2 + PP(0.881603, 116)
        z3 = z4 - PP(0.920602, ta + -11)
        c5 = z3 + PP(0.293867, 3)
        #c6 = z3 + PP(0.191568, -176)
        #z4 = z3 + PP(0.920602, -131)
        #c7 = z4 + PP(0.382698, 60)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SCLsr(cls, ta=None, **kwargs):
        #M 178.218,111.292 C 178.372,112.385 178.517,119.715 178.022,122.52 177.854,123.581 179.52206,123.79715 179.81606,122.13015 180.08806,120.73015 178.376,118.552 178.376,118.552
        z0 = P(0, -0)
        c0 = z0 + PP(0.389395, -81)
        z1 = z0 + PP(3.96159, -91)
        c1 = z1 + PP(1.00483, 79)
        c2 = z1 + PP(0.37896, -98)
        z2 = z1 + PP(0.647675, 12)
        c3 = z2 + PP(0.597157, -100)
        c4 = z2 + PP(0.503124, 79)
        z3 = z2 + PP(1.36069, 111)
        c5 = z3 + PP(0, 0)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            endknot(*z3)])

    @classmethod
    def path_SCLse(cls, ta=None, **kwargs):
        return cls.path_SCLsr()

    @classmethod
    def path_SCLser(cls, ta=None, **kwargs):
        return cls.path_SCL()

    @classmethod
    def path_SCLsel(cls, ta=None, **kwargs):
        #M 164.952,188.977 C 164.991,190.07 164.855,197.347 164.757,200.151 164.739,201.225 166.94408,200.81793 167.46118,199.289 167.71255,198.54575 167.43487,197.14649 166.65055,197.06737 165.45027,196.9463 164.756,198.687 164.756,200.151

        #z0 = P(0, -0)
        #c0 = P(0.0137583, -0.385586)
        #c1 = P(-0.0342194, -2.95275)
        #z1 = P(-0.0687917, -3.94194)
        #c2 = P(-0.0751417, -4.32082)
        #c3 = P(0.702762, -4.17722)
        #z2 = P(0.885183, -3.63784)
        #c4 = P(0.973861, -3.37564)
        #c5 = P(0.875901, -2.88201)
        #z3 = P(0.599211, -2.8541)
        #c6 = P(0.175779, -2.81139)
        #c7 = P(-0.0691444, -3.42547)
        z4 = P(-0.0691444, -3.94194)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0137583, -0.385586)
        #z1 = z0 + P(-0.0687917, -3.94194)
        #c1 = z1 + P(0.0345722, 0.989189)
        #c2 = z1 + P(-0.00635, -0.378883)
        #z2 = z1 + P(0.953975, 0.304094)
        #c3 = z2 + P(-0.182421, -0.539373)
        #c4 = z2 + P(0.0886777, 0.262202)
        #z3 = z2 + P(-0.285972, 0.783742)
        #c5 = z3 + P(0.276691, -0.0279118)
        #c6 = z3 + P(-0.423432, 0.0427108)
        #z4 = z3 + P(-0.668355, -1.08784)
        #c7 = z4 + P(0, 0.516467)

        z0 = P(0, -0)
        c0 = z0 + PP(0.385831, -87)
        z1 = z0 + PP(3.94254, -90)
        c1 = z1 + PP(0.989793, 87)
        c2 = z1 + PP(0.378937, -90)
        z2 = z1 + PP(1.00127, 17)
        c3 = z2 + PP(0.569386, -108)
        c4 = z2 + PP(0.276792, 71)
        #z3 = z2 + PP(0.834285, 110)
        z3 = z4 - PP(1.27675, ta + -31)
        c5 = z3 + PP(0.278095, -5)
        #c6 = z3 + PP(0.425581, 174)
        z4 = z3 + PP(1.27675, -121) + P(0.2, 0)
        #c7 = z4 + PP(0.516467, 90)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SCLsw(cls, ta=None, **kwargs):
        #M 47.3414,194.646 C 47.495,195.739 47.836,203.072 47.3414,205.877 47.1919,206.941 49.162065,206.42965 49.605071,204.811 49.793311,204.12321 49.953132,203.31533 49.421094,203.10918 48.597913,202.79024 47.780765,203.9181 47.436665,204.8631

        #z0 = P(0, -0)
        #c0 = P(0.0541867, -0.385586)
        #c1 = P(0.174484, -2.97251)
        #z1 = P(0, -3.96205)
        #c2 = P(-0.0527403, -4.3374)
        #c3 = P(0.64229, -4.15701)
        #z2 = P(0.798573, -3.58599)
        #c4 = P(0.86498, -3.34335)
        #c5 = P(0.921361, -3.05835)
        #z3 = P(0.73367, -2.98562)
        #c6 = P(0.44327, -2.87311)
        #c7 = P(0.154998, -3.27099)
        z4 = P(0.0336074, -3.60437)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0541867, -0.385586)
        #z1 = z0 + P(0, -3.96205)
        #c1 = z1 + P(0.174484, 0.989542)
        #c2 = z1 + P(-0.0527403, -0.375356)
        #z2 = z1 + P(0.798573, 0.376061)
        #c3 = z2 + P(-0.156283, -0.571024)
        #c4 = z2 + P(0.0664069, 0.242637)
        #z3 = z2 + P(-0.064903, 0.600364)
        #c5 = z3 + P(0.187691, -0.0727251)
        #c6 = z3 + P(-0.2904, 0.112515)
        #z4 = z3 + P(-0.700062, -0.618744)
        #c7 = z4 + P(0.121391, 0.333375)

        z0 = P(0, -0)
        c0 = z0 + PP(0.389375, -82)
        z1 = z0 + PP(3.96205, -90)
        c1 = z1 + PP(1.00481, 79)
        c2 = z1 + PP(0.379043, -97)
        z2 = z1 + PP(0.882689, 25)
        c3 = z2 + PP(0.592024, -105)
        c4 = z2 + PP(0.25156, 74)
        #z3 = z2 + PP(0.603862, 96)
        z3 = z4 - PP(0.934308, ta + -27)
        c5 = z3 + PP(0.201288, -21)
        #c6 = z3 + PP(0.311435, 158)
        #z4 = z3 + PP(0.934308, -138)
        #c7 = z4 + PP(0.354788, 69)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SCLswr(cls, ta=None, **kwargs):
        #M 71.9709,186.947 C 72.1245,188.04 72.2694,195.371 71.7749,198.175 71.6068,199.236 74.491712,198.92503 74.7798,197.257 74.914722,196.4758 73.620184,195.43913 72.883278,195.76272 71.956437,196.16971 72.363283,197.19611 72.652889,198.79076

        #z0 = P(0, -0)
        #c0 = P(0.0541867, -0.385586)
        #c1 = P(0.105304, -2.9718)
        #z1 = P(-0.0691444, -3.96099)
        #c2 = P(-0.128446, -4.33529)
        #c3 = P(0.889286, -4.22558)
        #z2 = P(0.990917, -3.63714)
        #c4 = P(1.03851, -3.36155)
        #c5 = P(0.581831, -2.99583)
        #z3 = P(0.321867, -3.10999)
        #c6 = P(-0.00510223, -3.25357)
        #c7 = P(0.138424, -3.61566)
        z4 = P(0.240591, -4.17822)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0541867, -0.385586)
        #z1 = z0 + P(-0.0691444, -3.96099)
        #c1 = z1 + P(0.174449, 0.989189)
        #c2 = z1 + P(-0.0593019, -0.374297)
        #z2 = z1 + P(1.06006, 0.32385)
        #c3 = z2 + P(-0.101631, -0.588444)
        #c4 = z2 + P(0.0475975, 0.27559)
        #z3 = z2 + P(-0.669051, 0.527149)
        #c5 = z3 + P(0.259964, 0.114155)
        #c6 = z3 + P(-0.326969, -0.143577)
        #z4 = z3 + P(-0.0812761, -1.06823)
        #c7 = z4 + P(-0.102167, 0.562557)

        z0 = P(0, -0)
        c0 = z0 + PP(0.389375, -82)
        z1 = z0 + PP(3.96159, -91)
        c1 = z1 + PP(1.00445, 79)
        c2 = z1 + PP(0.378966, -99)
        z2 = z1 + PP(1.10843, 16)
        c3 = z2 + PP(0.597156, -99)
        c4 = z2 + PP(0.27967, 80)
        #z3 = z2 + PP(0.851772, 141)
        z3 = z4 - PP(1.07131, ta + -14)
        c5 = z3 + PP(0.283924, 23)
        #c6 = z3 + PP(0.357104, -156)
        #z4 = z3 + PP(1.07131, -94)
        #c7 = z4 + PP(0.571759, 100)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            controlcurve(c4, c5),
            knot(*z3),
            #controlcurve(c6, c7),
            curve(),
            endknot(*z4, angle=ta)])

    @classmethod
    def path_SCLswl(cls, ta=None, **kwargs):
        #M 384.48,111.292 C 384.634,112.385 384.779,119.715 384.284,122.52 384.116,123.581 386.82658,123.22934 387.289,121.601 388.0727,118.84135 386.01363,119.89367 384.46552,120.57855

        #z0 = P(0, -0)
        #c0 = P(0.0543278, -0.385586)
        #c1 = P(0.105481, -2.97145)
        #z1 = P(-0.0691444, -3.96099)
        #c2 = P(-0.128411, -4.33529)
        #c3 = P(0.827821, -4.21123)
        #z2 = P(0.990953, -3.63679)
        #c4 = P(1.26742, -2.66324)
        #c5 = P(0.541031, -3.03448)
        z3 = P(-0.00510822, -3.27609)

        #z0 = P(0, -0)
        #c0 = z0 + P(0.0543278, -0.385586)
        #z1 = z0 + P(-0.0691444, -3.96099)
        #c1 = z1 + P(0.174625, 0.989542)
        #c2 = z1 + P(-0.0592667, -0.374297)
        #z2 = z1 + P(1.0601, 0.324203)
        #c3 = z2 + P(-0.163132, -0.574442)
        #c4 = z2 + P(0.276472, 0.973543)
        #z3 = z2 + P(-0.996061, 0.360698)
        #c5 = z3 + P(0.546139, 0.24161)

        z0 = P(0, -0)
        c0 = z0 + PP(0.389395, -81)
        z1 = z0 + PP(3.96159, -91)
        c1 = z1 + PP(1.00483, 79)
        c2 = z1 + PP(0.37896, -98)
        #z2 = z1 + PP(1.10856, 17)
        z2 = z3 - PP(1.05936, ta + 317)
        c3 = z2 + PP(0.597156, -105)
        #c4 = z2 + PP(1.01204, 74)
        #z3 = z2 + PP(1.05936, 160)
        #c5 = z3 + PP(0.597196, 23)

        return pyx.metapost.path.path([
            beginknot(*z0),
            controlcurve(c0, c1),
            knot(*z1),
            controlcurve(c2, c3),
            knot(*z2),
            #controlcurve(c4, c5),
            curve(),
            endknot(*z3, angle=ta)])

class CharUri(CharUra):
    def __init__(self, name='uri', kana='うり', 
                 model='S4CL1', head_type='S', tail_type='SCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharUru(CharUra):
    def __init__(self, name='uru', kana='うる', 
                 model='S4CL1', head_type='S', tail_type='SCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharUre(CharUra):
    def __init__(self, name='ure', kana='うれ', 
                 model='S4CL1', head_type='S', tail_type='SCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharUro(CharUra):
    def __init__(self, name='uro', kana='うろ', 
                 model='S4CL1', head_type='S', tail_type='SCL1'):
        super().__init__(name, kana, model, head_type, tail_type)

class CharUu(CharUra):
    def __init__(self, name='uu', kana='うう', 
                 model='S4CL1', head_type='S', tail_type='SCL1'):
        super().__init__(name, kana, model, head_type, tail_type)
